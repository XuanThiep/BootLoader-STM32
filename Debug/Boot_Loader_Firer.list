
Boot_Loader_Firer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000130  20000070  08003c68  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00001100  200001a0  08003c68  000201a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000123e3  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a74  00000000  00000000  00032481  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000370a  00000000  00000000  00034ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000708  00000000  00000000  00038600  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000aa0  00000000  00000000  00038d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004ad5  00000000  00000000  000397a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000033d5  00000000  00000000  0003e27d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00041652  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001974  00000000  00000000  000416d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  00043044  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  000430c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800398c 	.word	0x0800398c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800398c 	.word	0x0800398c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <BootUartInit>:
 * @para	None
 * @retval None
 */
void BootUartInit(void)
{
	UartBootHandle.Instance = UART_BOOT;
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <BootUartInit+0x24>)
	UartBootHandle.Init.BaudRate = UART_BOOT_BAUD;
	UartBootHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartBootHandle.Init.StopBits = UART_STOPBITS_1;
	UartBootHandle.Init.Parity = UART_PARITY_NONE;
	UartBootHandle.Init.Mode = UART_MODE_TX_RX;
 80005f2:	220c      	movs	r2, #12
	UartBootHandle.Init.BaudRate = UART_BOOT_BAUD;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <BootUartInit+0x28>)
 80005f6:	f8df c024 	ldr.w	ip, [pc, #36]	; 800061c <BootUartInit+0x2c>
	UartBootHandle.Init.Mode = UART_MODE_TX_RX;
 80005fa:	6142      	str	r2, [r0, #20]
	UartBootHandle.Init.BaudRate = UART_BOOT_BAUD;
 80005fc:	e880 1008 	stmia.w	r0, {r3, ip}
	UartBootHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000600:	2300      	movs	r3, #0
 8000602:	6083      	str	r3, [r0, #8]
	UartBootHandle.Init.StopBits = UART_STOPBITS_1;
 8000604:	60c3      	str	r3, [r0, #12]
	UartBootHandle.Init.Parity = UART_PARITY_NONE;
 8000606:	6103      	str	r3, [r0, #16]
	UartBootHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000608:	6183      	str	r3, [r0, #24]
	UartBootHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800060a:	61c3      	str	r3, [r0, #28]
	UartBootHandle.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060c:	6203      	str	r3, [r0, #32]
	UartBootHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060e:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&UartBootHandle);
 8000610:	f001 bea7 	b.w	8002362 <HAL_UART_Init>
 8000614:	2000012c 	.word	0x2000012c
 8000618:	40011000 	.word	0x40011000
 800061c:	000f4240 	.word	0x000f4240

08000620 <DebugUartInit>:
 * @para	None
 * @retval None
 */
void DebugUartInit(void)
{
	UartDebugHandle.Instance = UART_DEBUG;
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <DebugUartInit+0x24>)
	UartDebugHandle.Init.BaudRate = UART_DEBUG_BAUD;
	UartDebugHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartDebugHandle.Init.StopBits = UART_STOPBITS_1;
	UartDebugHandle.Init.Parity = UART_PARITY_NONE;
	UartDebugHandle.Init.Mode = UART_MODE_TX;
 8000622:	2208      	movs	r2, #8
	UartDebugHandle.Init.BaudRate = UART_DEBUG_BAUD;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <DebugUartInit+0x28>)
 8000626:	f8df c024 	ldr.w	ip, [pc, #36]	; 800064c <DebugUartInit+0x2c>
	UartDebugHandle.Init.Mode = UART_MODE_TX;
 800062a:	6142      	str	r2, [r0, #20]
	UartDebugHandle.Init.BaudRate = UART_DEBUG_BAUD;
 800062c:	e880 1008 	stmia.w	r0, {r3, ip}
	UartDebugHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000630:	2300      	movs	r3, #0
 8000632:	6083      	str	r3, [r0, #8]
	UartDebugHandle.Init.StopBits = UART_STOPBITS_1;
 8000634:	60c3      	str	r3, [r0, #12]
	UartDebugHandle.Init.Parity = UART_PARITY_NONE;
 8000636:	6103      	str	r3, [r0, #16]
	UartDebugHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000638:	6183      	str	r3, [r0, #24]
	UartDebugHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800063a:	61c3      	str	r3, [r0, #28]
	UartDebugHandle.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063c:	6203      	str	r3, [r0, #32]
	UartDebugHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800063e:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&UartDebugHandle);
 8000640:	f001 be8f 	b.w	8002362 <HAL_UART_Init>
 8000644:	200000bc 	.word	0x200000bc
 8000648:	40011400 	.word	0x40011400
 800064c:	000f4240 	.word	0x000f4240

08000650 <HAL_UART_MspInit>:
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
	if(huart->Instance == UartDebugHandle.Instance)
 8000650:	4a32      	ldr	r2, [pc, #200]	; (800071c <HAL_UART_MspInit+0xcc>)
 8000652:	6803      	ldr	r3, [r0, #0]
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	4293      	cmp	r3, r2
{
 8000658:	b530      	push	{r4, r5, lr}
 800065a:	b0af      	sub	sp, #188	; 0xbc
	if(huart->Instance == UartDebugHandle.Instance)
 800065c:	d12b      	bne.n	80006b6 <HAL_UART_MspInit+0x66>
		GPIO_InitTypeDef  GPIO_InitStruct;

		RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

		/* Enable Clock for GPIO TX of UART Debug */
		UART_DEBUG_GPIO_CLK_ENABLE();
 800065e:	4c30      	ldr	r4, [pc, #192]	; (8000720 <HAL_UART_MspInit+0xd0>)

		/* Set clock source for UART Debug */
		RCC_PeriphClkInit.PeriphClockSelection = UART_DEBUG_RCC_CLOCK;
		RCC_PeriphClkInit.Usart6ClockSelection = UART_DEBUG_CLK_SOURCE;
		HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8000660:	a80a      	add	r0, sp, #40	; 0x28
		UART_DEBUG_GPIO_CLK_ENABLE();
 8000662:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6323      	str	r3, [r4, #48]	; 0x30
 800066a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	9b01      	ldr	r3, [sp, #4]
		RCC_PeriphClkInit.PeriphClockSelection = UART_DEBUG_RCC_CLOCK;
 8000674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000678:	930a      	str	r3, [sp, #40]	; 0x28
		RCC_PeriphClkInit.Usart6ClockSelection = UART_DEBUG_CLK_SOURCE;
 800067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067e:	9320      	str	r3, [sp, #128]	; 0x80
		HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8000680:	f001 f8ec 	bl	800185c <HAL_RCCEx_PeriphCLKConfig>

		UART_DEBUG_CLK_ENABLE();
 8000684:	6c63      	ldr	r3, [r4, #68]	; 0x44
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = UART_GPIO_AF;

		HAL_GPIO_Init(UART_GPIO_PORT,&GPIO_InitStruct);
 8000686:	a905      	add	r1, sp, #20
 8000688:	4826      	ldr	r0, [pc, #152]	; (8000724 <HAL_UART_MspInit+0xd4>)
		UART_DEBUG_CLK_ENABLE();
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	6463      	str	r3, [r4, #68]	; 0x44
 8000690:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000692:	f003 0320 	and.w	r3, r3, #32
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = UART_GPIO_TX_PIN;
 800069a:	2340      	movs	r3, #64	; 0x40
 800069c:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = UART_GPIO_AF;
 80006aa:	2308      	movs	r3, #8
 80006ac:	9309      	str	r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = UART_BOOT_GPIO_AF;

		HAL_GPIO_Init(UART_BOOT_GPIO_PORT,&GPIO_InitStruct);

		GPIO_InitStruct.Pin = UART_BOOT_RX_PIN;
		HAL_GPIO_Init(UART_BOOT_GPIO_PORT,&GPIO_InitStruct);
 80006ae:	f000 fbed 	bl	8000e8c <HAL_GPIO_Init>

	}

}
 80006b2:	b02f      	add	sp, #188	; 0xbc
 80006b4:	bd30      	pop	{r4, r5, pc}
	else if(huart->Instance == UartBootHandle.Instance)
 80006b6:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <HAL_UART_MspInit+0xd8>)
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d1f9      	bne.n	80006b2 <HAL_UART_MspInit+0x62>
		UART_BOOT_GPIO_CLK_ENABLE();
 80006be:	4c18      	ldr	r4, [pc, #96]	; (8000720 <HAL_UART_MspInit+0xd0>)
		RCC_PeriphClkInit.Usart1ClockSelection = UART_BOOT_CLK_SOURCE;
 80006c0:	2501      	movs	r5, #1
		HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 80006c2:	a80a      	add	r0, sp, #40	; 0x28
		UART_BOOT_GPIO_CLK_ENABLE();
 80006c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6323      	str	r3, [r4, #48]	; 0x30
 80006cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
		RCC_PeriphClkInit.Usart1ClockSelection = UART_BOOT_CLK_SOURCE;
 80006ce:	951b      	str	r5, [sp, #108]	; 0x6c
		UART_BOOT_GPIO_CLK_ENABLE();
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	9303      	str	r3, [sp, #12]
 80006d6:	9b03      	ldr	r3, [sp, #12]
		RCC_PeriphClkInit.PeriphClockSelection = UART_BOOT_RCC_CLOCK;
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	930a      	str	r3, [sp, #40]	; 0x28
		HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 80006dc:	f001 f8be 	bl	800185c <HAL_RCCEx_PeriphCLKConfig>
		UART_BOOT_CLK_ENABLE();
 80006e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
		HAL_GPIO_Init(UART_BOOT_GPIO_PORT,&GPIO_InitStruct);
 80006e2:	a905      	add	r1, sp, #20
 80006e4:	4811      	ldr	r0, [pc, #68]	; (800072c <HAL_UART_MspInit+0xdc>)
		UART_BOOT_CLK_ENABLE();
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6463      	str	r3, [r4, #68]	; 0x44
 80006ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ee:	9507      	str	r5, [sp, #28]
		UART_BOOT_CLK_ENABLE();
 80006f0:	f003 0310 	and.w	r3, r3, #16
 80006f4:	9304      	str	r3, [sp, #16]
 80006f6:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Pin = UART_BOOT_TX_PIN;
 80006f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fc:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = UART_BOOT_GPIO_AF;
 8000706:	2307      	movs	r3, #7
 8000708:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(UART_BOOT_GPIO_PORT,&GPIO_InitStruct);
 800070a:	f000 fbbf 	bl	8000e8c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = UART_BOOT_RX_PIN;
 800070e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		HAL_GPIO_Init(UART_BOOT_GPIO_PORT,&GPIO_InitStruct);
 8000712:	a905      	add	r1, sp, #20
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_UART_MspInit+0xdc>)
		GPIO_InitStruct.Pin = UART_BOOT_RX_PIN;
 8000716:	9305      	str	r3, [sp, #20]
 8000718:	e7c9      	b.n	80006ae <HAL_UART_MspInit+0x5e>
 800071a:	bf00      	nop
 800071c:	200000bc 	.word	0x200000bc
 8000720:	40023800 	.word	0x40023800
 8000724:	40020800 	.word	0x40020800
 8000728:	2000012c 	.word	0x2000012c
 800072c:	40020000 	.word	0x40020000

08000730 <HAL_UART_MspDeInit>:
 * @param huart uart handle
 * @retval None
 */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
	if(huart->Instance == UartDebugHandle.Instance)
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <HAL_UART_MspDeInit+0x78>)
{
 8000732:	b508      	push	{r3, lr}
	if(huart->Instance == UartDebugHandle.Instance)
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	6803      	ldr	r3, [r0, #0]
 8000738:	4293      	cmp	r3, r2
 800073a:	d116      	bne.n	800076a <HAL_UART_MspDeInit+0x3a>
	{
		UART_DEBUG_FORCE_RESET();
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_UART_MspDeInit+0x7c>)
		UART_DEBUG_RELEASE_RESET();
		UART_DEBUG_GPIO_CLK_DISABLE();
		UART_DEBUG_CLK_DISABLE();
		HAL_GPIO_DeInit(UART_GPIO_PORT, UART_GPIO_TX_PIN);
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	481b      	ldr	r0, [pc, #108]	; (80007b0 <HAL_UART_MspDeInit+0x80>)
		UART_DEBUG_FORCE_RESET();
 8000742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000744:	f042 0220 	orr.w	r2, r2, #32
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
		UART_DEBUG_RELEASE_RESET();
 800074a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800074c:	f022 0220 	bic.w	r2, r2, #32
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
		UART_DEBUG_GPIO_CLK_DISABLE();
 8000752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000754:	f022 0204 	bic.w	r2, r2, #4
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
		UART_DEBUG_CLK_DISABLE();
 800075a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800075c:	f022 0220 	bic.w	r2, r2, #32
 8000760:	645a      	str	r2, [r3, #68]	; 0x44
		UART_BOOT_GPIO_CLK_DISABLE();
		UART_BOOT_CLK_DISABLE();
		HAL_GPIO_DeInit(UART_BOOT_GPIO_PORT, UART_BOOT_TX_PIN);
		HAL_GPIO_DeInit(UART_BOOT_GPIO_PORT, UART_BOOT_RX_PIN);
	}
}
 8000762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_DeInit(UART_BOOT_GPIO_PORT, UART_BOOT_RX_PIN);
 8000766:	f000 bc7b 	b.w	8001060 <HAL_GPIO_DeInit>
	else if (huart->Instance == UartBootHandle.Instance)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <HAL_UART_MspDeInit+0x84>)
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	4293      	cmp	r3, r2
 8000770:	d119      	bne.n	80007a6 <HAL_UART_MspDeInit+0x76>
		UART_BOOT_FORCE_RESET();
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_UART_MspDeInit+0x7c>)
		HAL_GPIO_DeInit(UART_BOOT_GPIO_PORT, UART_BOOT_TX_PIN);
 8000774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000778:	480f      	ldr	r0, [pc, #60]	; (80007b8 <HAL_UART_MspDeInit+0x88>)
		UART_BOOT_FORCE_RESET();
 800077a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800077c:	f042 0210 	orr.w	r2, r2, #16
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
		UART_BOOT_RELEASE_RESET();
 8000782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000784:	f022 0210 	bic.w	r2, r2, #16
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
		UART_BOOT_GPIO_CLK_DISABLE();
 800078a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078c:	f022 0201 	bic.w	r2, r2, #1
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
		UART_BOOT_CLK_DISABLE();
 8000792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000794:	f022 0210 	bic.w	r2, r2, #16
 8000798:	645a      	str	r2, [r3, #68]	; 0x44
		HAL_GPIO_DeInit(UART_BOOT_GPIO_PORT, UART_BOOT_TX_PIN);
 800079a:	f000 fc61 	bl	8001060 <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(UART_BOOT_GPIO_PORT, UART_BOOT_RX_PIN);
 800079e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <HAL_UART_MspDeInit+0x88>)
 80007a4:	e7dd      	b.n	8000762 <HAL_UART_MspDeInit+0x32>
 80007a6:	bd08      	pop	{r3, pc}
 80007a8:	200000bc 	.word	0x200000bc
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800
 80007b4:	2000012c 	.word	0x2000012c
 80007b8:	40020000 	.word	0x40020000

080007bc <BootLoader_FreeResource>:
 * @brief  This function is used to free all resource
 * @para	None
 * @retval None
 */
void BootLoader_FreeResource(void)
{
 80007bc:	b510      	push	{r4, lr}
	/* free all resource before jump to main application */
	HAL_UART_DeInit(&UartDebugHandle);
 80007be:	480f      	ldr	r0, [pc, #60]	; (80007fc <BootLoader_FreeResource+0x40>)
	UART_BOOT->CR1 = 0x0U;
 80007c0:	2400      	movs	r4, #0
	HAL_UART_DeInit(&UartDebugHandle);
 80007c2:	f001 faf9 	bl	8001db8 <HAL_UART_DeInit>
	UART_BOOT->CR1 &=  ~USART_CR1_UE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <BootLoader_FreeResource+0x44>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	f022 0201 	bic.w	r2, r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
	UART_BOOT->CR1 = 0x0U;
 80007d0:	601c      	str	r4, [r3, #0]
	UART_BOOT->CR2 = 0x0U;
 80007d2:	605c      	str	r4, [r3, #4]
	UART_BOOT->CR3 = 0x0U;
 80007d4:	609c      	str	r4, [r3, #8]
	UART_BOOT_CLK_DISABLE();
 80007d6:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80007da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007dc:	f022 0210 	bic.w	r2, r2, #16
 80007e0:	645a      	str	r2, [r3, #68]	; 0x44
	UART_BOOT_GPIO_CLK_DISABLE();
 80007e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e4:	f022 0201 	bic.w	r2, r2, #1
 80007e8:	631a      	str	r2, [r3, #48]	; 0x30
	BootUartDeInit();


	HAL_RCC_DeInit();
 80007ea:	f000 fd1b 	bl	8001224 <HAL_RCC_DeInit>
	HAL_DeInit();
 80007ee:	f000 f8cf 	bl	8000990 <HAL_DeInit>

	SysTick->CTRL = 0;
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <BootLoader_FreeResource+0x48>)
 80007f4:	601c      	str	r4, [r3, #0]
	SysTick->LOAD = 0;
 80007f6:	605c      	str	r4, [r3, #4]
	SysTick->VAL  = 0;
 80007f8:	609c      	str	r4, [r3, #8]
 80007fa:	bd10      	pop	{r4, pc}
 80007fc:	200000bc 	.word	0x200000bc
 8000800:	40011000 	.word	0x40011000
 8000804:	e000e010 	.word	0xe000e010

08000808 <BootLoader_JumpToApp>:
{
 8000808:	b598      	push	{r3, r4, r7, lr}
	uint32_t  JumpAddress = *(volatile uint32_t*)(FLASH_USER_START_ADDR + 4);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <BootLoader_JumpToApp+0x28>)
{
 800080c:	af00      	add	r7, sp, #0
	printf("\r\nJump To Application");
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <BootLoader_JumpToApp+0x2c>)
	uint32_t  JumpAddress = *(volatile uint32_t*)(FLASH_USER_START_ADDR + 4);
 8000810:	681c      	ldr	r4, [r3, #0]
	printf("\r\nJump To Application");
 8000812:	f002 f97b 	bl	8002b0c <iprintf>
	free(UART_Buffer);
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <BootLoader_JumpToApp+0x30>)
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	f002 f8c3 	bl	80029a4 <free>
	BootLoader_FreeResource();
 800081e:	f7ff ffcd 	bl	80007bc <BootLoader_FreeResource>
	__set_MSP(*(volatile uint32_t*)FLASH_USER_START_ADDR);
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <BootLoader_JumpToApp+0x34>)
 8000824:	681b      	ldr	r3, [r3, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8000826:	f383 8808 	msr	MSP, r3
	Jump();
 800082a:	47a0      	blx	r4
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <BootLoader_JumpToApp+0x24>
 8000830:	08008004 	.word	0x08008004
 8000834:	080039a4 	.word	0x080039a4
 8000838:	200000b8 	.word	0x200000b8
 800083c:	08008000 	.word	0x08008000

08000840 <BootLoader_EraseApplicationFlash>:
	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000840:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 * @brief  This function is used to erase main application in flash
 * @para	None
 * @retval None
 */
void BootLoader_EraseApplicationFlash(uint32_t SizeofProgram)
{
 8000844:	b510      	push	{r4, lr}
 8000846:	b086      	sub	sp, #24
	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000848:	d23e      	bcs.n	80008c8 <BootLoader_EraseApplicationFlash+0x88>
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800084a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800084e:	d33d      	bcc.n	80008cc <BootLoader_EraseApplicationFlash+0x8c>
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000850:	f5a0 4300 	sub.w	r3, r0, #32768	; 0x8000
 8000854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000858:	d33a      	bcc.n	80008d0 <BootLoader_EraseApplicationFlash+0x90>
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800085a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800085e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000862:	d337      	bcc.n	80008d4 <BootLoader_EraseApplicationFlash+0x94>
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000864:	f5a0 33c0 	sub.w	r3, r0, #98304	; 0x18000
 8000868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800086c:	d334      	bcc.n	80008d8 <BootLoader_EraseApplicationFlash+0x98>
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800086e:	f5a0 3260 	sub.w	r2, r0, #229376	; 0x38000
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <BootLoader_EraseApplicationFlash+0xb0>)
 8000874:	429a      	cmp	r2, r3
 8000876:	d931      	bls.n	80008dc <BootLoader_EraseApplicationFlash+0x9c>
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000878:	f5a0 22f0 	sub.w	r2, r0, #491520	; 0x78000
 800087c:	429a      	cmp	r2, r3
 800087e:	d92f      	bls.n	80008e0 <BootLoader_EraseApplicationFlash+0xa0>
	else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000880:	f5a0 2238 	sub.w	r2, r0, #753664	; 0xb8000
 8000884:	429a      	cmp	r2, r3
 8000886:	d92d      	bls.n	80008e4 <BootLoader_EraseApplicationFlash+0xa4>
	else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8000888:	f5a0 2278 	sub.w	r2, r0, #1015808	; 0xf8000
 800088c:	429a      	cmp	r2, r3
 800088e:	d92b      	bls.n	80008e8 <BootLoader_EraseApplicationFlash+0xa8>
	else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8000890:	f5a0 129c 	sub.w	r2, r0, #1277952	; 0x138000
 8000894:	429a      	cmp	r2, r3
 8000896:	d929      	bls.n	80008ec <BootLoader_EraseApplicationFlash+0xac>
	else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000898:	f5a0 10bc 	sub.w	r0, r0, #1540096	; 0x178000
 800089c:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
		return FLASH_SECTOR_11;
 80008a0:	bf34      	ite	cc
 80008a2:	240a      	movcc	r4, #10
 80008a4:	240b      	movcs	r4, #11
	uint32_t FirstSector = GetSector(FLASH_USER_START_ADDR);
	uint32_t NbOfSector  = GetSector(FLASH_USER_START_ADDR + SizeofProgram) - FirstSector + 1;
	uint32_t SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;

	HAL_FLASH_Unlock();
 80008a6:	f000 f9d1 	bl	8000c4c <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase 		= FLASH_TYPEERASE_SECTORS;
 80008aa:	2300      	movs	r3, #0
	EraseInitStruct.VoltageRange 	= FLASH_VOLTAGE_RANGE_3;
	EraseInitStruct.Sector 			= FirstSector;
	EraseInitStruct.NbSectors		= NbOfSector;
	HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 80008ac:	4669      	mov	r1, sp
 80008ae:	a801      	add	r0, sp, #4
	EraseInitStruct.TypeErase 		= FLASH_TYPEERASE_SECTORS;
 80008b0:	9301      	str	r3, [sp, #4]
	EraseInitStruct.VoltageRange 	= FLASH_VOLTAGE_RANGE_3;
 80008b2:	2302      	movs	r3, #2
	EraseInitStruct.NbSectors		= NbOfSector;
 80008b4:	9404      	str	r4, [sp, #16]
	EraseInitStruct.VoltageRange 	= FLASH_VOLTAGE_RANGE_3;
 80008b6:	9305      	str	r3, [sp, #20]
	EraseInitStruct.Sector 			= FirstSector;
 80008b8:	2301      	movs	r3, #1
 80008ba:	9303      	str	r3, [sp, #12]
	HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 80008bc:	f000 fa96 	bl	8000dec <HAL_FLASHEx_Erase>

	HAL_FLASH_Lock();
 80008c0:	f000 f9d6 	bl	8000c70 <HAL_FLASH_Lock>
}
 80008c4:	b006      	add	sp, #24
 80008c6:	bd10      	pop	{r4, pc}
		return FLASH_SECTOR_0;
 80008c8:	2400      	movs	r4, #0
 80008ca:	e7ec      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_1;
 80008cc:	2401      	movs	r4, #1
 80008ce:	e7ea      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_2;
 80008d0:	2402      	movs	r4, #2
 80008d2:	e7e8      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_3;
 80008d4:	2403      	movs	r4, #3
 80008d6:	e7e6      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_4;
 80008d8:	2404      	movs	r4, #4
 80008da:	e7e4      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_5;
 80008dc:	2405      	movs	r4, #5
 80008de:	e7e2      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_6;
 80008e0:	2406      	movs	r4, #6
 80008e2:	e7e0      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_7;
 80008e4:	2407      	movs	r4, #7
 80008e6:	e7de      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_8;
 80008e8:	2408      	movs	r4, #8
 80008ea:	e7dc      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
		return FLASH_SECTOR_9;
 80008ec:	2409      	movs	r4, #9
 80008ee:	e7da      	b.n	80008a6 <BootLoader_EraseApplicationFlash+0x66>
 80008f0:	0003ffff 	.word	0x0003ffff

080008f4 <BootLoader_WriteFlash>:
 * @retval 0: Data successfully written to Flash memory
 *         1: Error occurred while writing data in Flash memory
 *         2: Written Data in flash memory is different from expected one
 */
uint32_t BootLoader_WriteFlash(uint32_t FlashAddress, uint8_t* Data ,uint32_t DataLength)
{
 80008f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f8:	460c      	mov	r4, r1
 80008fa:	4617      	mov	r7, r2
	uint32_t i = 0;
	uint8_t returnValue = 0;
 80008fc:	2500      	movs	r5, #0

	HAL_FLASH_Unlock();

	/* Integer part */
	for (i = 0; (i < DataLength) && (FlashAddress <= ( FLASH_USER_END_ADDR-4)); i++)
 80008fe:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8000940 <BootLoader_WriteFlash+0x4c>
 8000902:	4427      	add	r7, r4
{
 8000904:	4606      	mov	r6, r0
	HAL_FLASH_Unlock();
 8000906:	f000 f9a1 	bl	8000c4c <HAL_FLASH_Unlock>
	for (i = 0; (i < DataLength) && (FlashAddress <= ( FLASH_USER_END_ADDR-4)); i++)
 800090a:	42bc      	cmp	r4, r7
 800090c:	d001      	beq.n	8000912 <BootLoader_WriteFlash+0x1e>
 800090e:	4546      	cmp	r6, r8
 8000910:	d904      	bls.n	800091c <BootLoader_WriteFlash+0x28>
			/* Error occurred while writing data in Flash memory */
			returnValue = (1);
		}
	}

	HAL_FLASH_Lock();
 8000912:	f000 f9ad 	bl	8000c70 <HAL_FLASH_Lock>
	return returnValue;
}
 8000916:	4628      	mov	r0, r5
 8000918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (HAL_FLASH_Program(TYPEPROGRAM_BYTE, FlashAddress, *(uint8_t*)(Data+i)) == HAL_OK)
 800091c:	7822      	ldrb	r2, [r4, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	4631      	mov	r1, r6
 8000922:	2000      	movs	r0, #0
 8000924:	f000 f9da 	bl	8000cdc <HAL_FLASH_Program>
 8000928:	b938      	cbnz	r0, 800093a <BootLoader_WriteFlash+0x46>
			if (*(uint8_t*)FlashAddress != *(uint8_t*)(Data+i))
 800092a:	f816 2b01 	ldrb.w	r2, [r6], #1
 800092e:	7823      	ldrb	r3, [r4, #0]
				returnValue = (2);
 8000930:	429a      	cmp	r2, r3
 8000932:	bf18      	it	ne
 8000934:	2502      	movne	r5, #2
 8000936:	3401      	adds	r4, #1
 8000938:	e7e7      	b.n	800090a <BootLoader_WriteFlash+0x16>
			returnValue = (1);
 800093a:	2501      	movs	r5, #1
 800093c:	e7fb      	b.n	8000936 <BootLoader_WriteFlash+0x42>
 800093e:	bf00      	nop
 8000940:	081ffffb 	.word	0x081ffffb

08000944 <CalculateCRCBuffer>:
 * @brief  	This function is used to calculate CRC32 from data buffer
 * @para	None
 * @retval 	CRC32 Value
 */
uint32_t CalculateCRCBuffer(uint32_t initialValue, uint8_t* buffer, uint32_t bufferLength)
{
 8000944:	b510      	push	{r4, lr}
 8000946:	440a      	add	r2, r1
			temp = (temp << 1) ^ 0x04C11DB7; // Polynomial used in STM32
 8000948:	4c07      	ldr	r4, [pc, #28]	; (8000968 <CalculateCRCBuffer+0x24>)
	uint32_t temp = initialValue;
	for (uint32_t i = 0; i < bufferLength; i++)
 800094a:	4291      	cmp	r1, r2
 800094c:	d100      	bne.n	8000950 <CalculateCRCBuffer+0xc>
	{
		temp = calculateCRCWord(temp, *(buffer+i));
	}

	return temp;
}
 800094e:	bd10      	pop	{r4, pc}
		temp = calculateCRCWord(temp, *(buffer+i));
 8000950:	f811 3b01 	ldrb.w	r3, [r1], #1
	uint32_t temp = initial_value ^ data;
 8000954:	4058      	eors	r0, r3
 8000956:	2320      	movs	r3, #32
		if ((temp & 0x80000000) != 0)
 8000958:	2800      	cmp	r0, #0
 800095a:	ea4f 0040 	mov.w	r0, r0, lsl #1
			temp = (temp << 1) ^ 0x04C11DB7; // Polynomial used in STM32
 800095e:	bfb8      	it	lt
 8000960:	4060      	eorlt	r0, r4
	for (uint32_t i = 0; i < 32; i++)
 8000962:	3b01      	subs	r3, #1
 8000964:	d1f8      	bne.n	8000958 <CalculateCRCBuffer+0x14>
 8000966:	e7f0      	b.n	800094a <CalculateCRCBuffer+0x6>
 8000968:	04c11db7 	.word	0x04c11db7

0800096c <BootLoaderSendACK>:
 * @brief  	This function is used to send ACK or NACK to PC
 * @para	None
 * @retval 	CRC32 Value
 */
void BootLoaderSendACK(uint8_t ackValue)
{
 800096c:	b507      	push	{r0, r1, r2, lr}
	uint8_t sendData = ackValue;
 800096e:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&UartBootHandle,(uint8_t* )&sendData,1,UART_TIMEOUT);
 8000970:	f242 7310 	movw	r3, #10000	; 0x2710
 8000974:	2201      	movs	r2, #1
	uint8_t sendData = ackValue;
 8000976:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&UartBootHandle,(uint8_t* )&sendData,1,UART_TIMEOUT);
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <BootLoaderSendACK+0x1c>)
 800097c:	f001 fa69 	bl	8001e52 <HAL_UART_Transmit>
}
 8000980:	b003      	add	sp, #12
 8000982:	f85d fb04 	ldr.w	pc, [sp], #4
 8000986:	bf00      	nop
 8000988:	2000012c 	.word	0x2000012c

0800098c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800098c:	4770      	bx	lr
	...

08000990 <HAL_DeInit>:
{
 8000990:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_DeInit+0x28>)
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 8000998:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 800099a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800099c:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80009a0:	625c      	str	r4, [r3, #36]	; 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 80009a2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80009a4:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 80009a6:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80009a8:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 80009aa:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80009ac:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 80009ae:	f7ff ffed 	bl	800098c <HAL_MspDeInit>
}
 80009b2:	4620      	mov	r0, r4
 80009b4:	bd10      	pop	{r4, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_InitTick+0x3c>)
{
 80009c0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_InitTick+0x40>)
 80009c4:	7818      	ldrb	r0, [r3, #0]
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f0 	udiv	r3, r3, r0
 80009ce:	6810      	ldr	r0, [r2, #0]
 80009d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80009d4:	f000 f890 	bl	8000af8 <HAL_SYSTICK_Config>
 80009d8:	4604      	mov	r4, r0
 80009da:	b958      	cbnz	r0, 80009f4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	2d0f      	cmp	r5, #15
 80009de:	d809      	bhi.n	80009f4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	4602      	mov	r2, r0
 80009e2:	4629      	mov	r1, r5
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f84e 	bl	8000a88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <HAL_InitTick+0x44>)
 80009ee:	4620      	mov	r0, r4
 80009f0:	601d      	str	r5, [r3, #0]
 80009f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009f4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_Init>:
{
 8000a04:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a06:	2003      	movs	r0, #3
 8000a08:	f000 f82c 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff ffd5 	bl	80009bc <HAL_InitTick>
  HAL_MspInit();
 8000a12:	f001 ff0b 	bl	800282c <HAL_MspInit>
}
 8000a16:	2000      	movs	r0, #0
 8000a18:	bd08      	pop	{r3, pc}
	...

08000a1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_IncTick+0x10>)
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <HAL_IncTick+0x14>)
 8000a20:	6811      	ldr	r1, [r2, #0]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	440b      	add	r3, r1
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000098 	.word	0x20000098
 8000a30:	20000000 	.word	0x20000000

08000a34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a34:	4b01      	ldr	r3, [pc, #4]	; (8000a3c <HAL_GetTick+0x8>)
 8000a36:	6818      	ldr	r0, [r3, #0]
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000098 	.word	0x20000098

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff fff6 	bl	8000a34 <HAL_GetTick>
 8000a48:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4c:	bf1e      	ittt	ne
 8000a4e:	4b04      	ldrne	r3, [pc, #16]	; (8000a60 <HAL_Delay+0x20>)
 8000a50:	781b      	ldrbne	r3, [r3, #0]
 8000a52:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	1b40      	subs	r0, r0, r5
 8000a5a:	4284      	cmp	r4, r0
 8000a5c:	d8fa      	bhi.n	8000a54 <HAL_Delay+0x14>
  {
  }
}
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a66:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a6a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a72:	041b      	lsls	r3, r3, #16
 8000a74:	0c1b      	lsrs	r3, r3, #16
 8000a76:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000a7e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a80:	60d3      	str	r3, [r2, #12]
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8a:	b530      	push	{r4, r5, lr}
 8000a8c:	68dc      	ldr	r4, [r3, #12]
 8000a8e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a92:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	bf28      	it	cs
 8000a9c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa4:	bf8c      	ite	hi
 8000aa6:	3c03      	subhi	r4, #3
 8000aa8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aaa:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 8000aae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f103 33ff 	add.w	r3, r3, #4294967295
 8000ab4:	ea01 0103 	and.w	r1, r1, r3
 8000ab8:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	fa05 f404 	lsl.w	r4, r5, r4
 8000ac0:	f104 34ff 	add.w	r4, r4, #4294967295
 8000ac4:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	ea42 0201 	orr.w	r2, r2, r1
 8000acc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000ad0:	da05      	bge.n	8000ade <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	f000 000f 	and.w	r0, r0, #15
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_NVIC_SetPriority+0x6c>)
 8000ada:	541a      	strb	r2, [r3, r0]
 8000adc:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ae8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000aec:	bd30      	pop	{r4, r5, pc}
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00
 8000af4:	e000ed14 	.word	0xe000ed14

08000af8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	3801      	subs	r0, #1
 8000afa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afe:	d20a      	bcs.n	8000b16 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	21f0      	movs	r1, #240	; 0xf0
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b26:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	bf0c      	ite	eq
 8000b2c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b30:	f022 0204 	bicne.w	r2, r2, #4
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	4770      	bx	lr
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b3c:	4770      	bx	lr

08000b3e <HAL_SYSTICK_IRQHandler>:
{
 8000b3e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b40:	f7ff fffc 	bl	8000b3c <HAL_SYSTICK_Callback>
 8000b44:	bd08      	pop	{r3, pc}
	...

08000b48 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000b48:	4909      	ldr	r1, [pc, #36]	; (8000b70 <FLASH_Program_DoubleWord+0x28>)
{
 8000b4a:	b510      	push	{r4, lr}
  FLASH->CR &= CR_PSIZE_MASK;
 8000b4c:	690c      	ldr	r4, [r1, #16]
 8000b4e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000b52:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000b54:	690c      	ldr	r4, [r1, #16]
 8000b56:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000b5a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000b5c:	690c      	ldr	r4, [r1, #16]
 8000b5e:	f044 0401 	orr.w	r4, r4, #1
 8000b62:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000b64:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000b66:	6043      	str	r3, [r0, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b68:	f3bf 8f4f 	dsb	sy
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <FLASH_Program_Word+0x24>)
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b7c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000b7e:	691a      	ldr	r2, [r3, #16]
 8000b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b84:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000b86:	691a      	ldr	r2, [r3, #16]
 8000b88:	f042 0201 	orr.w	r2, r2, #1
 8000b8c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000b8e:	6001      	str	r1, [r0, #0]
 8000b90:	f3bf 8f4f 	dsb	sy
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <FLASH_Program_HalfWord+0x24>)
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ba4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000bae:	691a      	ldr	r2, [r3, #16]
 8000bb0:	f042 0201 	orr.w	r2, r2, #1
 8000bb4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000bb6:	8001      	strh	r1, [r0, #0]
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <FLASH_Program_Byte+0x20>)
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bcc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000bce:	691a      	ldr	r2, [r3, #16]
 8000bd0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000bd2:	691a      	ldr	r2, [r3, #16]
 8000bd4:	f042 0201 	orr.w	r2, r2, #1
 8000bd8:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000bda:	7001      	strb	r1, [r0, #0]
 8000bdc:	f3bf 8f4f 	dsb	sy
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <FLASH_SetErrorCode+0x5c>)
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	0792      	lsls	r2, r2, #30
 8000bee:	d504      	bpl.n	8000bfa <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000bf0:	4915      	ldr	r1, [pc, #84]	; (8000c48 <FLASH_SetErrorCode+0x60>)
 8000bf2:	698a      	ldr	r2, [r1, #24]
 8000bf4:	f042 0220 	orr.w	r2, r2, #32
 8000bf8:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	06db      	lsls	r3, r3, #27
 8000bfe:	d504      	bpl.n	8000c0a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <FLASH_SetErrorCode+0x60>)
 8000c02:	6993      	ldr	r3, [r2, #24]
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <FLASH_SetErrorCode+0x5c>)
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	0690      	lsls	r0, r2, #26
 8000c10:	d504      	bpl.n	8000c1c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <FLASH_SetErrorCode+0x60>)
 8000c14:	698a      	ldr	r2, [r1, #24]
 8000c16:	f042 0208 	orr.w	r2, r2, #8
 8000c1a:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	0659      	lsls	r1, r3, #25
 8000c20:	d504      	bpl.n	8000c2c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000c22:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <FLASH_SetErrorCode+0x60>)
 8000c24:	6993      	ldr	r3, [r2, #24]
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <FLASH_SetErrorCode+0x5c>)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	0612      	lsls	r2, r2, #24
 8000c32:	d504      	bpl.n	8000c3e <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000c34:	4904      	ldr	r1, [pc, #16]	; (8000c48 <FLASH_SetErrorCode+0x60>)
 8000c36:	698a      	ldr	r2, [r1, #24]
 8000c38:	f042 0202 	orr.w	r2, r2, #2
 8000c3c:	618a      	str	r2, [r1, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000c3e:	22f2      	movs	r2, #242	; 0xf2
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	4770      	bx	lr
 8000c44:	40023c00 	.word	0x40023c00
 8000c48:	2000009c 	.word	0x2000009c

08000c4c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_FLASH_Unlock+0x1c>)
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	da07      	bge.n	8000c64 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_FLASH_Unlock+0x20>)
 8000c56:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c58:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000c5c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c5e:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000c60:	0fc0      	lsrs	r0, r0, #31
 8000c62:	4770      	bx	lr
 8000c64:	2000      	movs	r0, #0
}
 8000c66:	4770      	bx	lr
 8000c68:	40023c00 	.word	0x40023c00
 8000c6c:	45670123 	.word	0x45670123

08000c70 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000c70:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <HAL_FLASH_Lock+0x10>)
}
 8000c72:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 8000c74:	6913      	ldr	r3, [r2, #16]
 8000c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c7a:	6113      	str	r3, [r2, #16]
}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c84:	2200      	movs	r2, #0
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <FLASH_WaitForLastOperation+0x50>)
{ 
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c8c:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000c8e:	4c12      	ldr	r4, [pc, #72]	; (8000cd8 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 8000c90:	f7ff fed0 	bl	8000a34 <HAL_GetTick>
 8000c94:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000c96:	68e3      	ldr	r3, [r4, #12]
 8000c98:	03db      	lsls	r3, r3, #15
 8000c9a:	d407      	bmi.n	8000cac <FLASH_WaitForLastOperation+0x28>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000c9c:	68e2      	ldr	r2, [r4, #12]
 8000c9e:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 8000ca2:	d00e      	beq.n	8000cc2 <FLASH_WaitForLastOperation+0x3e>
    FLASH_SetErrorCode();
 8000ca4:	f7ff ffa0 	bl	8000be8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ca8:	2001      	movs	r0, #1
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000cac:	1c6a      	adds	r2, r5, #1
 8000cae:	d0f2      	beq.n	8000c96 <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000cb0:	b90d      	cbnz	r5, 8000cb6 <FLASH_WaitForLastOperation+0x32>
        return HAL_TIMEOUT;
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000cb6:	f7ff febd 	bl	8000a34 <HAL_GetTick>
 8000cba:	1b80      	subs	r0, r0, r6
 8000cbc:	4285      	cmp	r5, r0
 8000cbe:	d2ea      	bcs.n	8000c96 <FLASH_WaitForLastOperation+0x12>
 8000cc0:	e7f7      	b.n	8000cb2 <FLASH_WaitForLastOperation+0x2e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000cc2:	68e0      	ldr	r0, [r4, #12]
 8000cc4:	f010 0001 	ands.w	r0, r0, #1
 8000cc8:	d002      	beq.n	8000cd0 <FLASH_WaitForLastOperation+0x4c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cca:	2301      	movs	r3, #1
  return HAL_OK;
 8000ccc:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cce:	60e3      	str	r3, [r4, #12]
}  
 8000cd0:	bd70      	pop	{r4, r5, r6, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000009c 	.word	0x2000009c
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_FLASH_Program>:
{
 8000cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000ce0:	4c1c      	ldr	r4, [pc, #112]	; (8000d54 <HAL_FLASH_Program+0x78>)
{
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	4607      	mov	r7, r0
 8000ce6:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8000ce8:	7d23      	ldrb	r3, [r4, #20]
{
 8000cea:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d02d      	beq.n	8000d4c <HAL_FLASH_Program+0x70>
 8000cf0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cf2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000cf6:	7523      	strb	r3, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cf8:	f7ff ffc4 	bl	8000c84 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000cfc:	b990      	cbnz	r0, 8000d24 <HAL_FLASH_Program+0x48>
    switch(TypeProgram)
 8000cfe:	2f03      	cmp	r7, #3
 8000d00:	d807      	bhi.n	8000d12 <HAL_FLASH_Program+0x36>
 8000d02:	e8df f007 	tbb	[pc, r7]
 8000d06:	1302      	.short	0x1302
 8000d08:	1d18      	.short	0x1d18
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8000d0a:	b2f1      	uxtb	r1, r6
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	f7ff ff59 	bl	8000bc4 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d16:	f7ff ffb5 	bl	8000c84 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_FLASH_Program+0x7c>)
 8000d1c:	6913      	ldr	r3, [r2, #16]
 8000d1e:	f023 0301 	bic.w	r3, r3, #1
 8000d22:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000d24:	2300      	movs	r3, #0
 8000d26:	7523      	strb	r3, [r4, #20]
  return status;
 8000d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000d2c:	b2b1      	uxth	r1, r6
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f7ff ff34 	bl	8000b9c <FLASH_Program_HalfWord>
        break;
 8000d34:	e7ed      	b.n	8000d12 <HAL_FLASH_Program+0x36>
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000d36:	4631      	mov	r1, r6
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff1b 	bl	8000b74 <FLASH_Program_Word>
        break;
 8000d3e:	e7e8      	b.n	8000d12 <HAL_FLASH_Program+0x36>
        FLASH_Program_DoubleWord(Address, Data);
 8000d40:	4632      	mov	r2, r6
 8000d42:	4643      	mov	r3, r8
 8000d44:	4628      	mov	r0, r5
 8000d46:	f7ff feff 	bl	8000b48 <FLASH_Program_DoubleWord>
        break;
 8000d4a:	e7e2      	b.n	8000d12 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8000d4c:	2002      	movs	r0, #2
}
 8000d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d52:	bf00      	nop
 8000d54:	2000009c 	.word	0x2000009c
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <FLASH_MassErase+0x38>)
  if(Banks == FLASH_BANK_BOTH)
 8000d5e:	2903      	cmp	r1, #3
  FLASH->CR &= CR_PSIZE_MASK;
 8000d60:	691a      	ldr	r2, [r3, #16]
 8000d62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d66:	611a      	str	r2, [r3, #16]
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8000d68:	691a      	ldr	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 8000d6a:	d104      	bne.n	8000d76 <FLASH_MassErase+0x1a>
    FLASH->CR |= FLASH_MER_BIT;
 8000d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8000d70:	f042 0204 	orr.w	r2, r2, #4
 8000d74:	e003      	b.n	8000d7e <FLASH_MassErase+0x22>
  else if(Banks == FLASH_BANK_2)
 8000d76:	2902      	cmp	r1, #2
 8000d78:	d1fa      	bne.n	8000d70 <FLASH_MassErase+0x14>
    FLASH->CR |= FLASH_CR_MER2;
 8000d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER1;    
 8000d7e:	611a      	str	r2, [r3, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8000d80:	691a      	ldr	r2, [r3, #16]
 8000d82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d86:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000d8a:	6118      	str	r0, [r3, #16]
 8000d8c:	f3bf 8f4f 	dsb	sy
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000d98:	b139      	cbz	r1, 8000daa <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000d9a:	2901      	cmp	r1, #1
 8000d9c:	d021      	beq.n	8000de2 <FLASH_Erase_Sector+0x4a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000d9e:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000da0:	bf0c      	ite	eq
 8000da2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000da6:	f44f 7140 	movne.w	r1, #768	; 0x300
  {
    Sector += 4;
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <FLASH_Erase_Sector+0x50>)
  if(Sector > FLASH_SECTOR_11) 
 8000dac:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
 8000dae:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 8000db0:	bf88      	it	hi
 8000db2:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
 8000db4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000db8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	4311      	orrs	r1, r2
 8000dbe:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dc6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	f042 0202 	orr.w	r2, r2, #2
 8000dce:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000dd2:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	f3bf 8f4f 	dsb	sy
 8000de0:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de6:	e7e0      	b.n	8000daa <FLASH_Erase_Sector+0x12>
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_FLASHEx_Erase>:
{
 8000dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000df0:	4e24      	ldr	r6, [pc, #144]	; (8000e84 <HAL_FLASHEx_Erase+0x98>)
{
 8000df2:	4604      	mov	r4, r0
 8000df4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000df6:	7d33      	ldrb	r3, [r6, #20]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d040      	beq.n	8000e7e <HAL_FLASHEx_Erase+0x92>
 8000dfc:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dfe:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000e02:	7533      	strb	r3, [r6, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e04:	f7ff ff3e 	bl	8000c84 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000e08:	4605      	mov	r5, r0
 8000e0a:	b9b0      	cbnz	r0, 8000e3a <HAL_FLASHEx_Erase+0x4e>
    *SectorError = 0xFFFFFFFFU;
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d114      	bne.n	8000e44 <HAL_FLASHEx_Erase+0x58>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000e1a:	6861      	ldr	r1, [r4, #4]
 8000e1c:	7c20      	ldrb	r0, [r4, #16]
 8000e1e:	f7ff ff9d 	bl	8000d5c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e26:	f7ff ff2d 	bl	8000c84 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_FLASHEx_Erase+0x9c>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e2c:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000e2e:	6913      	ldr	r3, [r2, #16]
 8000e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e34:	f023 0304 	bic.w	r3, r3, #4
 8000e38:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	7533      	strb	r3, [r6, #20]
}
 8000e3e:	4628      	mov	r0, r5
 8000e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000e44:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000e46:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8000e88 <HAL_FLASHEx_Erase+0x9c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000e4a:	68e3      	ldr	r3, [r4, #12]
 8000e4c:	68a2      	ldr	r2, [r4, #8]
 8000e4e:	4413      	add	r3, r2
 8000e50:	429f      	cmp	r7, r3
 8000e52:	d2f2      	bcs.n	8000e3a <HAL_FLASHEx_Erase+0x4e>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000e54:	7c21      	ldrb	r1, [r4, #16]
 8000e56:	4638      	mov	r0, r7
 8000e58:	f7ff ff9e 	bl	8000d98 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e60:	f7ff ff10 	bl	8000c84 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000e64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000e68:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000e6c:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8000e70:	b118      	cbz	r0, 8000e7a <HAL_FLASHEx_Erase+0x8e>
          *SectorError = index;
 8000e72:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e76:	4605      	mov	r5, r0
          break;
 8000e78:	e7df      	b.n	8000e3a <HAL_FLASHEx_Erase+0x4e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000e7a:	3701      	adds	r7, #1
 8000e7c:	e7e5      	b.n	8000e4a <HAL_FLASHEx_Erase+0x5e>
  __HAL_LOCK(&pFlash);
 8000e7e:	2502      	movs	r5, #2
 8000e80:	e7dd      	b.n	8000e3e <HAL_FLASHEx_Erase+0x52>
 8000e82:	bf00      	nop
 8000e84:	2000009c 	.word	0x2000009c
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e90:	680b      	ldr	r3, [r1, #0]
{
 8000e92:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001058 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e98:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e9a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9c:	4a6c      	ldr	r2, [pc, #432]	; (8001050 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e9e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800105c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000ea2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000ea8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eac:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000eb0:	45b6      	cmp	lr, r6
 8000eb2:	f040 80b3 	bne.w	800101c <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	684c      	ldr	r4, [r1, #4]
 8000eb8:	f024 0710 	bic.w	r7, r4, #16
 8000ebc:	2f02      	cmp	r7, #2
 8000ebe:	d116      	bne.n	8000eee <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000ec0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ec4:	f003 0b07 	and.w	fp, r3, #7
 8000ec8:	f04f 0c0f 	mov.w	ip, #15
 8000ecc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000ed0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000ed4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ed8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000edc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ee0:	690d      	ldr	r5, [r1, #16]
 8000ee2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ee6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000eea:	f8ca 5020 	str.w	r5, [sl, #32]
 8000eee:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ef2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ef4:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ef8:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000efc:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f00:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f02:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f06:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f0a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f0e:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000f12:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f16:	d811      	bhi.n	8000f3c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000f18:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f1a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f1e:	68cf      	ldr	r7, [r1, #12]
 8000f20:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000f24:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000f28:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f2a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f2c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f30:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f34:	409f      	lsls	r7, r3
 8000f36:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f3a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f3c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f3e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f40:	688f      	ldr	r7, [r1, #8]
 8000f42:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f46:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f48:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4a:	00e5      	lsls	r5, r4, #3
 8000f4c:	d566      	bpl.n	800101c <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f52:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f56:	f003 0e03 	and.w	lr, r3, #3
 8000f5a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000f62:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f66:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000f6e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f72:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f76:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000f7a:	9503      	str	r5, [sp, #12]
 8000f7c:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f7e:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000f82:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f86:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f8a:	4d32      	ldr	r5, [pc, #200]	; (8001054 <HAL_GPIO_Init+0x1c8>)
 8000f8c:	42a8      	cmp	r0, r5
 8000f8e:	d04c      	beq.n	800102a <HAL_GPIO_Init+0x19e>
 8000f90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f94:	42a8      	cmp	r0, r5
 8000f96:	d04a      	beq.n	800102e <HAL_GPIO_Init+0x1a2>
 8000f98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f9c:	42a8      	cmp	r0, r5
 8000f9e:	d048      	beq.n	8001032 <HAL_GPIO_Init+0x1a6>
 8000fa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa4:	42a8      	cmp	r0, r5
 8000fa6:	d046      	beq.n	8001036 <HAL_GPIO_Init+0x1aa>
 8000fa8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fac:	42a8      	cmp	r0, r5
 8000fae:	d044      	beq.n	800103a <HAL_GPIO_Init+0x1ae>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d044      	beq.n	800103e <HAL_GPIO_Init+0x1b2>
 8000fb4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000fb8:	42a8      	cmp	r0, r5
 8000fba:	d042      	beq.n	8001042 <HAL_GPIO_Init+0x1b6>
 8000fbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fc0:	42a8      	cmp	r0, r5
 8000fc2:	d040      	beq.n	8001046 <HAL_GPIO_Init+0x1ba>
 8000fc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fc8:	42a8      	cmp	r0, r5
 8000fca:	d03e      	beq.n	800104a <HAL_GPIO_Init+0x1be>
 8000fcc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fd0:	42a8      	cmp	r0, r5
 8000fd2:	bf14      	ite	ne
 8000fd4:	250a      	movne	r5, #10
 8000fd6:	2509      	moveq	r5, #9
 8000fd8:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fdc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fe0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fe4:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000fea:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	bf0c      	ite	eq
 8000fee:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ff0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000ff6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000ff8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	bf0c      	ite	eq
 8000ffc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ffe:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001000:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001004:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001006:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001008:	bf0c      	ite	eq
 800100a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800100c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001010:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001012:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001014:	bf54      	ite	pl
 8001016:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001018:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800101a:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800101c:	3301      	adds	r3, #1
 800101e:	2b10      	cmp	r3, #16
 8001020:	f47f af3f 	bne.w	8000ea2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001024:	b005      	add	sp, #20
 8001026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800102a:	2500      	movs	r5, #0
 800102c:	e7d4      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 800102e:	2501      	movs	r5, #1
 8001030:	e7d2      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 8001032:	2502      	movs	r5, #2
 8001034:	e7d0      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 8001036:	2503      	movs	r5, #3
 8001038:	e7ce      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 800103a:	2504      	movs	r5, #4
 800103c:	e7cc      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 800103e:	2505      	movs	r5, #5
 8001040:	e7ca      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 8001042:	2506      	movs	r5, #6
 8001044:	e7c8      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 8001046:	2507      	movs	r5, #7
 8001048:	e7c6      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 800104a:	2508      	movs	r5, #8
 800104c:	e7c4      	b.n	8000fd8 <HAL_GPIO_Init+0x14c>
 800104e:	bf00      	nop
 8001050:	40013c00 	.word	0x40013c00
 8001054:	40020000 	.word	0x40020000
 8001058:	40023800 	.word	0x40023800
 800105c:	40021400 	.word	0x40021400

08001060 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001064:	2400      	movs	r4, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001066:	4e4c      	ldr	r6, [pc, #304]	; (8001198 <HAL_GPIO_DeInit+0x138>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001068:	f8df a134 	ldr.w	sl, [pc, #308]	; 80011a0 <HAL_GPIO_DeInit+0x140>
 800106c:	f8df b134 	ldr.w	fp, [pc, #308]	; 80011a4 <HAL_GPIO_DeInit+0x144>
    ioposition = ((uint32_t)0x01) << position;
 8001070:	f04f 0901 	mov.w	r9, #1
 8001074:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 8001078:	ea32 0301 	bics.w	r3, r2, r1
 800107c:	d174      	bne.n	8001168 <HAL_GPIO_DeInit+0x108>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800107e:	2303      	movs	r3, #3
 8001080:	fa04 f509 	lsl.w	r5, r4, r9
 8001084:	6807      	ldr	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001086:	f004 0e07 	and.w	lr, r4, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800108a:	fa03 f505 	lsl.w	r5, r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800108e:	fa24 fc03 	lsr.w	ip, r4, r3
 8001092:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001096:	43d2      	mvns	r2, r2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001098:	43ed      	mvns	r5, r5
 800109a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800109e:	402f      	ands	r7, r5
 80010a0:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010a2:	270f      	movs	r7, #15
 80010a4:	f8dc 8020 	ldr.w	r8, [ip, #32]
 80010a8:	fa07 fe0e 	lsl.w	lr, r7, lr
 80010ac:	ea28 0e0e 	bic.w	lr, r8, lr
 80010b0:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010b4:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80010b8:	ea05 0e0e 	and.w	lr, r5, lr
 80010bc:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80010c4:	ea02 0e0e 	and.w	lr, r2, lr
 80010c8:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010cc:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80010d0:	ea05 050e 	and.w	r5, r5, lr
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010d4:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80010d8:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010da:	60c5      	str	r5, [r0, #12]
 80010dc:	f024 0503 	bic.w	r5, r4, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80010e4:	4298      	cmp	r0, r3
 80010e6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010ea:	fa07 f70e 	lsl.w	r7, r7, lr
 80010ee:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp = SYSCFG->EXTICR[position >> 2];
 80010f2:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f6:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80010fa:	d03a      	beq.n	8001172 <HAL_GPIO_DeInit+0x112>
 80010fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001100:	4298      	cmp	r0, r3
 8001102:	d038      	beq.n	8001176 <HAL_GPIO_DeInit+0x116>
 8001104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001108:	4298      	cmp	r0, r3
 800110a:	d036      	beq.n	800117a <HAL_GPIO_DeInit+0x11a>
 800110c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001110:	4298      	cmp	r0, r3
 8001112:	d034      	beq.n	800117e <HAL_GPIO_DeInit+0x11e>
 8001114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001118:	4298      	cmp	r0, r3
 800111a:	d032      	beq.n	8001182 <HAL_GPIO_DeInit+0x122>
 800111c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001120:	4298      	cmp	r0, r3
 8001122:	d030      	beq.n	8001186 <HAL_GPIO_DeInit+0x126>
 8001124:	4550      	cmp	r0, sl
 8001126:	d030      	beq.n	800118a <HAL_GPIO_DeInit+0x12a>
 8001128:	4558      	cmp	r0, fp
 800112a:	d030      	beq.n	800118e <HAL_GPIO_DeInit+0x12e>
 800112c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001130:	4298      	cmp	r0, r3
 8001132:	d02e      	beq.n	8001192 <HAL_GPIO_DeInit+0x132>
 8001134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001138:	4298      	cmp	r0, r3
 800113a:	bf0c      	ite	eq
 800113c:	2309      	moveq	r3, #9
 800113e:	230a      	movne	r3, #10
 8001140:	fa03 f30e 	lsl.w	r3, r3, lr
 8001144:	459c      	cmp	ip, r3
 8001146:	d10f      	bne.n	8001168 <HAL_GPIO_DeInit+0x108>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001148:	68ab      	ldr	r3, [r5, #8]
 800114a:	ea23 0707 	bic.w	r7, r3, r7
 800114e:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001150:	6833      	ldr	r3, [r6, #0]
 8001152:	4013      	ands	r3, r2
 8001154:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001156:	6873      	ldr	r3, [r6, #4]
 8001158:	4013      	ands	r3, r2
 800115a:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800115c:	68b3      	ldr	r3, [r6, #8]
 800115e:	4013      	ands	r3, r2
 8001160:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001162:	68f3      	ldr	r3, [r6, #12]
 8001164:	401a      	ands	r2, r3
 8001166:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001168:	3401      	adds	r4, #1
 800116a:	2c10      	cmp	r4, #16
 800116c:	d180      	bne.n	8001070 <HAL_GPIO_DeInit+0x10>
	  }
    }
  }
}
 800116e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001172:	2300      	movs	r3, #0
 8001174:	e7e4      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 8001176:	464b      	mov	r3, r9
 8001178:	e7e2      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 800117a:	2302      	movs	r3, #2
 800117c:	e7e0      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 800117e:	2303      	movs	r3, #3
 8001180:	e7de      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 8001182:	2304      	movs	r3, #4
 8001184:	e7dc      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 8001186:	2305      	movs	r3, #5
 8001188:	e7da      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 800118a:	2306      	movs	r3, #6
 800118c:	e7d8      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 800118e:	2307      	movs	r3, #7
 8001190:	e7d6      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 8001192:	2308      	movs	r3, #8
 8001194:	e7d4      	b.n	8001140 <HAL_GPIO_DeInit+0xe0>
 8001196:	bf00      	nop
 8001198:	40013c00 	.word	0x40013c00
 800119c:	40020000 	.word	0x40020000
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40021c00 	.word	0x40021c00

080011a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	b10a      	cbz	r2, 80011ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011aa:	6181      	str	r1, [r0, #24]
 80011ac:	4770      	bx	lr
 80011ae:	0409      	lsls	r1, r1, #16
 80011b0:	e7fb      	b.n	80011aa <HAL_GPIO_WritePin+0x2>
	...

080011b4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_PWREx_EnableOverDrive+0x68>)
{
 80011b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011ba:	4c19      	ldr	r4, [pc, #100]	; (8001220 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011d4:	f7ff fc2e 	bl	8000a34 <HAL_GetTick>
 80011d8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	03da      	lsls	r2, r3, #15
 80011de:	d50c      	bpl.n	80011fa <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff fc24 	bl	8000a34 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011ec:	4c0c      	ldr	r4, [pc, #48]	; (8001220 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80011ee:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	039b      	lsls	r3, r3, #14
 80011f4:	d50a      	bpl.n	800120c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80011f6:	2000      	movs	r0, #0
 80011f8:	e006      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011fa:	f7ff fc1b 	bl	8000a34 <HAL_GetTick>
 80011fe:	1b40      	subs	r0, r0, r5
 8001200:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001204:	d9e9      	bls.n	80011da <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001206:	2003      	movs	r0, #3
}
 8001208:	b003      	add	sp, #12
 800120a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800120c:	f7ff fc12 	bl	8000a34 <HAL_GetTick>
 8001210:	1b40      	subs	r0, r0, r5
 8001212:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001216:	d9eb      	bls.n	80011f0 <HAL_PWREx_EnableOverDrive+0x3c>
 8001218:	e7f5      	b.n	8001206 <HAL_PWREx_EnableOverDrive+0x52>
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40007000 	.word	0x40007000

08001224 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001224:	b570      	push	{r4, r5, r6, lr}

  /* Get Start Tick */
  tickstart = HAL_GetTick();

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001226:	4c46      	ldr	r4, [pc, #280]	; (8001340 <HAL_RCC_DeInit+0x11c>)
  tickstart = HAL_GetTick();
 8001228:	f7ff fc04 	bl	8000a34 <HAL_GetTick>
 800122c:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	0798      	lsls	r0, r3, #30
 800123a:	d55c      	bpl.n	80012f6 <HAL_RCC_DeInit+0xd2>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800123c:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123e:	f241 3688 	movw	r6, #5000	; 0x1388
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001246:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001248:	f7ff fbf4 	bl	8000a34 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 800124c:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 800124e:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 8001250:	60a3      	str	r3, [r4, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001252:	4c3b      	ldr	r4, [pc, #236]	; (8001340 <HAL_RCC_DeInit+0x11c>)
 8001254:	68a3      	ldr	r3, [r4, #8]
 8001256:	f013 0f0c 	tst.w	r3, #12
 800125a:	d153      	bne.n	8001304 <HAL_RCC_DeInit+0xe0>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800125c:	f7ff fbea 	bl	8000a34 <HAL_GetTick>

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001260:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001262:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001264:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8001268:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800126a:	4c35      	ldr	r4, [pc, #212]	; (8001340 <HAL_RCC_DeInit+0x11c>)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	0399      	lsls	r1, r3, #14
 8001270:	d44e      	bmi.n	8001310 <HAL_RCC_DeInit+0xec>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001272:	f7ff fbdf 	bl	8000a34 <HAL_GetTick>

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001276:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001278:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800127a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800127e:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001280:	4c2f      	ldr	r4, [pc, #188]	; (8001340 <HAL_RCC_DeInit+0x11c>)
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	019a      	lsls	r2, r3, #6
 8001286:	d449      	bmi.n	800131c <HAL_RCC_DeInit+0xf8>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001288:	f7ff fbd4 	bl	8000a34 <HAL_GetTick>

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800128c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800128e:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001290:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001294:	6023      	str	r3, [r4, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001296:	4c2a      	ldr	r4, [pc, #168]	; (8001340 <HAL_RCC_DeInit+0x11c>)
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	d444      	bmi.n	8001328 <HAL_RCC_DeInit+0x104>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800129e:	f7ff fbc9 	bl	8000a34 <HAL_GetTick>

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80012a2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80012a4:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80012a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6023      	str	r3, [r4, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80012ac:	4c24      	ldr	r4, [pc, #144]	; (8001340 <HAL_RCC_DeInit+0x11c>)
 80012ae:	6820      	ldr	r0, [r4, #0]
 80012b0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80012b4:	d13e      	bne.n	8001334 <HAL_RCC_DeInit+0x110>
      return HAL_TIMEOUT;
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_RCC_DeInit+0x120>)

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <HAL_RCC_DeInit+0x124>)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80012ba:	6063      	str	r3, [r4, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80012bc:	3b10      	subs	r3, #16
 80012be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 80012c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 80012c6:	68e3      	ldr	r3, [r4, #12]
 80012c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80012cc:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 80012ce:	68e3      	ldr	r3, [r4, #12]
 80012d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80012d4:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80012d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6763      	str	r3, [r4, #116]	; 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80012de:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80012e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012e4:	6763      	str	r3, [r4, #116]	; 0x74
  SystemCoreClock = HSI_VALUE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_DeInit+0x128>)
 80012e8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ea:	f7ff fb67 	bl	80009bc <HAL_InitTick>
      return HAL_TIMEOUT;
 80012ee:	3000      	adds	r0, #0
 80012f0:	bf18      	it	ne
 80012f2:	2001      	movne	r0, #1
  }
  else
  {
    return HAL_OK;
  }
}
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fb9d 	bl	8000a34 <HAL_GetTick>
 80012fa:	1b40      	subs	r0, r0, r5
 80012fc:	2802      	cmp	r0, #2
 80012fe:	d99a      	bls.n	8001236 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8001300:	2003      	movs	r0, #3
 8001302:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff fb96 	bl	8000a34 <HAL_GetTick>
 8001308:	1b40      	subs	r0, r0, r5
 800130a:	42b0      	cmp	r0, r6
 800130c:	d9a2      	bls.n	8001254 <HAL_RCC_DeInit+0x30>
 800130e:	e7f7      	b.n	8001300 <HAL_RCC_DeInit+0xdc>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fb90 	bl	8000a34 <HAL_GetTick>
 8001314:	1b40      	subs	r0, r0, r5
 8001316:	2864      	cmp	r0, #100	; 0x64
 8001318:	d9a8      	bls.n	800126c <HAL_RCC_DeInit+0x48>
 800131a:	e7f1      	b.n	8001300 <HAL_RCC_DeInit+0xdc>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fb8a 	bl	8000a34 <HAL_GetTick>
 8001320:	1b40      	subs	r0, r0, r5
 8001322:	2802      	cmp	r0, #2
 8001324:	d9ad      	bls.n	8001282 <HAL_RCC_DeInit+0x5e>
 8001326:	e7eb      	b.n	8001300 <HAL_RCC_DeInit+0xdc>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001328:	f7ff fb84 	bl	8000a34 <HAL_GetTick>
 800132c:	1b40      	subs	r0, r0, r5
 800132e:	2864      	cmp	r0, #100	; 0x64
 8001330:	d9b2      	bls.n	8001298 <HAL_RCC_DeInit+0x74>
 8001332:	e7e5      	b.n	8001300 <HAL_RCC_DeInit+0xdc>
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001334:	f7ff fb7e 	bl	8000a34 <HAL_GetTick>
 8001338:	1b40      	subs	r0, r0, r5
 800133a:	2864      	cmp	r0, #100	; 0x64
 800133c:	d9b7      	bls.n	80012ae <HAL_RCC_DeInit+0x8a>
 800133e:	e7df      	b.n	8001300 <HAL_RCC_DeInit+0xdc>
 8001340:	40023800 	.word	0x40023800
 8001344:	24003010 	.word	0x24003010
 8001348:	00f42400 	.word	0x00f42400
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001354:	4604      	mov	r4, r0
 8001356:	b918      	cbnz	r0, 8001360 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800135a:	b002      	add	sp, #8
 800135c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001360:	6803      	ldr	r3, [r0, #0]
 8001362:	07d8      	lsls	r0, r3, #31
 8001364:	d410      	bmi.n	8001388 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	0799      	lsls	r1, r3, #30
 800136a:	d45e      	bmi.n	800142a <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	0719      	lsls	r1, r3, #28
 8001370:	f100 80a3 	bmi.w	80014ba <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	075a      	lsls	r2, r3, #29
 8001378:	f100 80c4 	bmi.w	8001504 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137c:	69a2      	ldr	r2, [r4, #24]
 800137e:	2a00      	cmp	r2, #0
 8001380:	f040 812e 	bne.w	80015e0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001384:	2000      	movs	r0, #0
 8001386:	e7e8      	b.n	800135a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001388:	4b93      	ldr	r3, [pc, #588]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	f002 020c 	and.w	r2, r2, #12
 8001390:	2a04      	cmp	r2, #4
 8001392:	d007      	beq.n	80013a4 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	f002 020c 	and.w	r2, r2, #12
 800139a:	2a08      	cmp	r2, #8
 800139c:	d10a      	bne.n	80013b4 <HAL_RCC_OscConfig+0x64>
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	025a      	lsls	r2, r3, #9
 80013a2:	d507      	bpl.n	80013b4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	4b8c      	ldr	r3, [pc, #560]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	039b      	lsls	r3, r3, #14
 80013aa:	d5dc      	bpl.n	8001366 <HAL_RCC_OscConfig+0x16>
 80013ac:	6863      	ldr	r3, [r4, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1d9      	bne.n	8001366 <HAL_RCC_OscConfig+0x16>
 80013b2:	e7d1      	b.n	8001358 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	6863      	ldr	r3, [r4, #4]
 80013b6:	4d88      	ldr	r5, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d111      	bne.n	80013e2 <HAL_RCC_OscConfig+0x92>
 80013be:	682b      	ldr	r3, [r5, #0]
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb35 	bl	8000a34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4d83      	ldr	r5, [pc, #524]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80013cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	039f      	lsls	r7, r3, #14
 80013d2:	d4c8      	bmi.n	8001366 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fb2e 	bl	8000a34 <HAL_GetTick>
 80013d8:	1b80      	subs	r0, r0, r6
 80013da:	2864      	cmp	r0, #100	; 0x64
 80013dc:	d9f7      	bls.n	80013ce <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80013de:	2003      	movs	r0, #3
 80013e0:	e7bb      	b.n	800135a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e2:	b99b      	cbnz	r3, 800140c <HAL_RCC_OscConfig+0xbc>
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	602b      	str	r3, [r5, #0]
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb1e 	bl	8000a34 <HAL_GetTick>
 80013f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	0398      	lsls	r0, r3, #14
 80013fe:	d5b2      	bpl.n	8001366 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fb18 	bl	8000a34 <HAL_GetTick>
 8001404:	1b80      	subs	r0, r0, r6
 8001406:	2864      	cmp	r0, #100	; 0x64
 8001408:	d9f7      	bls.n	80013fa <HAL_RCC_OscConfig+0xaa>
 800140a:	e7e8      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	d103      	bne.n	800141c <HAL_RCC_OscConfig+0xcc>
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	602b      	str	r3, [r5, #0]
 800141a:	e7d0      	b.n	80013be <HAL_RCC_OscConfig+0x6e>
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	602b      	str	r3, [r5, #0]
 8001422:	682b      	ldr	r3, [r5, #0]
 8001424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001428:	e7cc      	b.n	80013c4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142a:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	f012 0f0c 	tst.w	r2, #12
 8001432:	d007      	beq.n	8001444 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	f002 020c 	and.w	r2, r2, #12
 800143a:	2a08      	cmp	r2, #8
 800143c:	d111      	bne.n	8001462 <HAL_RCC_OscConfig+0x112>
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	0259      	lsls	r1, r3, #9
 8001442:	d40e      	bmi.n	8001462 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001444:	4b64      	ldr	r3, [pc, #400]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	0792      	lsls	r2, r2, #30
 800144a:	d502      	bpl.n	8001452 <HAL_RCC_OscConfig+0x102>
 800144c:	68e2      	ldr	r2, [r4, #12]
 800144e:	2a01      	cmp	r2, #1
 8001450:	d182      	bne.n	8001358 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	6921      	ldr	r1, [r4, #16]
 8001456:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800145a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800145e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001460:	e784      	b.n	800136c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001462:	68e3      	ldr	r3, [r4, #12]
 8001464:	4d5c      	ldr	r5, [pc, #368]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 8001466:	b1bb      	cbz	r3, 8001498 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001468:	682b      	ldr	r3, [r5, #0]
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001470:	f7ff fae0 	bl	8000a34 <HAL_GetTick>
 8001474:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	079f      	lsls	r7, r3, #30
 800147a:	d507      	bpl.n	800148c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	6922      	ldr	r2, [r4, #16]
 8001480:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001484:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001488:	602b      	str	r3, [r5, #0]
 800148a:	e76f      	b.n	800136c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fad2 	bl	8000a34 <HAL_GetTick>
 8001490:	1b80      	subs	r0, r0, r6
 8001492:	2802      	cmp	r0, #2
 8001494:	d9ef      	bls.n	8001476 <HAL_RCC_OscConfig+0x126>
 8001496:	e7a2      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014a0:	f7ff fac8 	bl	8000a34 <HAL_GetTick>
 80014a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	0798      	lsls	r0, r3, #30
 80014aa:	f57f af5f 	bpl.w	800136c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fac1 	bl	8000a34 <HAL_GetTick>
 80014b2:	1b80      	subs	r0, r0, r6
 80014b4:	2802      	cmp	r0, #2
 80014b6:	d9f6      	bls.n	80014a6 <HAL_RCC_OscConfig+0x156>
 80014b8:	e791      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ba:	6963      	ldr	r3, [r4, #20]
 80014bc:	4d46      	ldr	r5, [pc, #280]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 80014be:	b183      	cbz	r3, 80014e2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80014c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80014c8:	f7ff fab4 	bl	8000a34 <HAL_GetTick>
 80014cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014d0:	079b      	lsls	r3, r3, #30
 80014d2:	f53f af4f 	bmi.w	8001374 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff faad 	bl	8000a34 <HAL_GetTick>
 80014da:	1b80      	subs	r0, r0, r6
 80014dc:	2802      	cmp	r0, #2
 80014de:	d9f6      	bls.n	80014ce <HAL_RCC_OscConfig+0x17e>
 80014e0:	e77d      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80014e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80014ea:	f7ff faa3 	bl	8000a34 <HAL_GetTick>
 80014ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014f2:	079f      	lsls	r7, r3, #30
 80014f4:	f57f af3e 	bpl.w	8001374 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fa9c 	bl	8000a34 <HAL_GetTick>
 80014fc:	1b80      	subs	r0, r0, r6
 80014fe:	2802      	cmp	r0, #2
 8001500:	d9f6      	bls.n	80014f0 <HAL_RCC_OscConfig+0x1a0>
 8001502:	e76c      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001504:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 8001506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001508:	00d0      	lsls	r0, r2, #3
 800150a:	d427      	bmi.n	800155c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800150e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001510:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001520:	4d2e      	ldr	r5, [pc, #184]	; (80015dc <HAL_RCC_OscConfig+0x28c>)
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	05d9      	lsls	r1, r3, #23
 8001526:	d51b      	bpl.n	8001560 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	68a3      	ldr	r3, [r4, #8]
 800152a:	4d2b      	ldr	r5, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 800152c:	2b01      	cmp	r3, #1
 800152e:	d127      	bne.n	8001580 <HAL_RCC_OscConfig+0x230>
 8001530:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800153c:	f7ff fa7a 	bl	8000a34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	4f25      	ldr	r7, [pc, #148]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001542:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001546:	079b      	lsls	r3, r3, #30
 8001548:	d53f      	bpl.n	80015ca <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800154a:	2e00      	cmp	r6, #0
 800154c:	f43f af16 	beq.w	800137c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x288>)
 8001552:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	e70f      	b.n	800137c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800155c:	2600      	movs	r6, #0
 800155e:	e7df      	b.n	8001520 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001560:	682b      	ldr	r3, [r5, #0]
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001568:	f7ff fa64 	bl	8000a34 <HAL_GetTick>
 800156c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156e:	682b      	ldr	r3, [r5, #0]
 8001570:	05da      	lsls	r2, r3, #23
 8001572:	d4d9      	bmi.n	8001528 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff fa5e 	bl	8000a34 <HAL_GetTick>
 8001578:	1bc0      	subs	r0, r0, r7
 800157a:	2864      	cmp	r0, #100	; 0x64
 800157c:	d9f7      	bls.n	800156e <HAL_RCC_OscConfig+0x21e>
 800157e:	e72e      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	b9ab      	cbnz	r3, 80015ae <HAL_RCC_OscConfig+0x25e>
 8001582:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	672b      	str	r3, [r5, #112]	; 0x70
 800158e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001596:	f7ff fa4d 	bl	8000a34 <HAL_GetTick>
 800159a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800159e:	0798      	lsls	r0, r3, #30
 80015a0:	d5d3      	bpl.n	800154a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fa47 	bl	8000a34 <HAL_GetTick>
 80015a6:	1bc0      	subs	r0, r0, r7
 80015a8:	4540      	cmp	r0, r8
 80015aa:	d9f7      	bls.n	800159c <HAL_RCC_OscConfig+0x24c>
 80015ac:	e717      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015b2:	d103      	bne.n	80015bc <HAL_RCC_OscConfig+0x26c>
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	672b      	str	r3, [r5, #112]	; 0x70
 80015ba:	e7b9      	b.n	8001530 <HAL_RCC_OscConfig+0x1e0>
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	672b      	str	r3, [r5, #112]	; 0x70
 80015c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	e7b5      	b.n	8001536 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff fa33 	bl	8000a34 <HAL_GetTick>
 80015ce:	eba0 0008 	sub.w	r0, r0, r8
 80015d2:	42a8      	cmp	r0, r5
 80015d4:	d9b6      	bls.n	8001544 <HAL_RCC_OscConfig+0x1f4>
 80015d6:	e702      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e0:	4d24      	ldr	r5, [pc, #144]	; (8001674 <HAL_RCC_OscConfig+0x324>)
 80015e2:	68ab      	ldr	r3, [r5, #8]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	f43f aeb5 	beq.w	8001358 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80015ee:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80015f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f8:	d12f      	bne.n	800165a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80015fa:	f7ff fa1b 	bl	8000a34 <HAL_GetTick>
 80015fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	0199      	lsls	r1, r3, #6
 8001604:	d423      	bmi.n	800164e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001606:	6a22      	ldr	r2, [r4, #32]
 8001608:	69e3      	ldr	r3, [r4, #28]
 800160a:	4313      	orrs	r3, r2
 800160c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800160e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001612:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001614:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001618:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800161a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800161e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001620:	4c14      	ldr	r4, [pc, #80]	; (8001674 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001622:	0852      	lsrs	r2, r2, #1
 8001624:	3a01      	subs	r2, #1
 8001626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800162a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001632:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001634:	f7ff f9fe 	bl	8000a34 <HAL_GetTick>
 8001638:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	019a      	lsls	r2, r3, #6
 800163e:	f53f aea1 	bmi.w	8001384 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff f9f7 	bl	8000a34 <HAL_GetTick>
 8001646:	1b40      	subs	r0, r0, r5
 8001648:	2802      	cmp	r0, #2
 800164a:	d9f6      	bls.n	800163a <HAL_RCC_OscConfig+0x2ea>
 800164c:	e6c7      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff f9f1 	bl	8000a34 <HAL_GetTick>
 8001652:	1b80      	subs	r0, r0, r6
 8001654:	2802      	cmp	r0, #2
 8001656:	d9d3      	bls.n	8001600 <HAL_RCC_OscConfig+0x2b0>
 8001658:	e6c1      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800165a:	f7ff f9eb 	bl	8000a34 <HAL_GetTick>
 800165e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	019b      	lsls	r3, r3, #6
 8001664:	f57f ae8e 	bpl.w	8001384 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f9e4 	bl	8000a34 <HAL_GetTick>
 800166c:	1b00      	subs	r0, r0, r4
 800166e:	2802      	cmp	r0, #2
 8001670:	d9f6      	bls.n	8001660 <HAL_RCC_OscConfig+0x310>
 8001672:	e6b4      	b.n	80013de <HAL_RCC_OscConfig+0x8e>
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001678:	4913      	ldr	r1, [pc, #76]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800167a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167c:	688b      	ldr	r3, [r1, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b04      	cmp	r3, #4
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x16>
 8001686:	2b08      	cmp	r3, #8
 8001688:	d003      	beq.n	8001692 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800168a:	4810      	ldr	r0, [pc, #64]	; (80016cc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800168c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800168e:	4810      	ldr	r0, [pc, #64]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001690:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001692:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001694:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001696:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001698:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800169c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016a4:	bf1a      	itte	ne
 80016a6:	480a      	ldrne	r0, [pc, #40]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x58>)
 80016a8:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016aa:	4808      	ldreq	r0, [pc, #32]	; (80016cc <HAL_RCC_GetSysClockFreq+0x54>)
 80016ac:	fba1 0100 	umull	r0, r1, r1, r0
 80016b0:	f7fe fe16 	bl	80002e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x50>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016bc:	3301      	adds	r3, #1
 80016be:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80016c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80016c4:	bd08      	pop	{r3, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	00f42400 	.word	0x00f42400
 80016d0:	017d7840 	.word	0x017d7840

080016d4 <HAL_RCC_ClockConfig>:
{
 80016d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80016da:	4604      	mov	r4, r0
 80016dc:	b910      	cbnz	r0, 80016e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80016de:	2001      	movs	r0, #1
 80016e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4a46      	ldr	r2, [pc, #280]	; (8001800 <HAL_RCC_ClockConfig+0x12c>)
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d328      	bcc.n	8001742 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	6821      	ldr	r1, [r4, #0]
 80016f2:	078f      	lsls	r7, r1, #30
 80016f4:	d430      	bmi.n	8001758 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	07c8      	lsls	r0, r1, #31
 80016f8:	d443      	bmi.n	8001782 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016fa:	4a41      	ldr	r2, [pc, #260]	; (8001800 <HAL_RCC_ClockConfig+0x12c>)
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	429d      	cmp	r5, r3
 8001704:	d367      	bcc.n	80017d6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001706:	6822      	ldr	r2, [r4, #0]
 8001708:	0751      	lsls	r1, r2, #29
 800170a:	d470      	bmi.n	80017ee <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	0713      	lsls	r3, r2, #28
 800170e:	d507      	bpl.n	8001720 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001710:	4a3c      	ldr	r2, [pc, #240]	; (8001804 <HAL_RCC_ClockConfig+0x130>)
 8001712:	6921      	ldr	r1, [r4, #16]
 8001714:	6893      	ldr	r3, [r2, #8]
 8001716:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800171a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800171e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001720:	f7ff ffaa 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_RCC_ClockConfig+0x130>)
 8001726:	4a38      	ldr	r2, [pc, #224]	; (8001808 <HAL_RCC_ClockConfig+0x134>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	40d8      	lsrs	r0, r3
 8001732:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_RCC_ClockConfig+0x138>)
 8001734:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff f940 	bl	80009bc <HAL_InitTick>
  return HAL_OK;
 800173c:	2000      	movs	r0, #0
 800173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	f023 030f 	bic.w	r3, r3, #15
 8001748:	430b      	orrs	r3, r1
 800174a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174c:	6813      	ldr	r3, [r2, #0]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	4299      	cmp	r1, r3
 8001754:	d1c3      	bne.n	80016de <HAL_RCC_ClockConfig+0xa>
 8001756:	e7cb      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	f011 0f04 	tst.w	r1, #4
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_RCC_ClockConfig+0x130>)
 800175e:	d003      	beq.n	8001768 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001766:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	070e      	lsls	r6, r1, #28
 800176a:	d503      	bpl.n	8001774 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001772:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	68a0      	ldr	r0, [r4, #8]
 8001778:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800177c:	4302      	orrs	r2, r0
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e7b9      	b.n	80016f6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001782:	6861      	ldr	r1, [r4, #4]
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <HAL_RCC_ClockConfig+0x130>)
 8001786:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001788:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	d11c      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	d0a5      	beq.n	80016de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001792:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001798:	4e1a      	ldr	r6, [pc, #104]	; (8001804 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	f022 0203 	bic.w	r2, r2, #3
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80017a2:	f7ff f947 	bl	8000a34 <HAL_GetTick>
 80017a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a8:	68b3      	ldr	r3, [r6, #8]
 80017aa:	6862      	ldr	r2, [r4, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017b4:	d0a1      	beq.n	80016fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff f93d 	bl	8000a34 <HAL_GetTick>
 80017ba:	1bc0      	subs	r0, r0, r7
 80017bc:	4540      	cmp	r0, r8
 80017be:	d9f3      	bls.n	80017a8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80017c0:	2003      	movs	r0, #3
}
 80017c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c6:	2902      	cmp	r1, #2
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017ce:	e7df      	b.n	8001790 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	f012 0f02 	tst.w	r2, #2
 80017d4:	e7dc      	b.n	8001790 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	f023 030f 	bic.w	r3, r3, #15
 80017dc:	432b      	orrs	r3, r5
 80017de:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e0:	6813      	ldr	r3, [r2, #0]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	429d      	cmp	r5, r3
 80017e8:	f47f af79 	bne.w	80016de <HAL_RCC_ClockConfig+0xa>
 80017ec:	e78b      	b.n	8001706 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ee:	4905      	ldr	r1, [pc, #20]	; (8001804 <HAL_RCC_ClockConfig+0x130>)
 80017f0:	68e0      	ldr	r0, [r4, #12]
 80017f2:	688b      	ldr	r3, [r1, #8]
 80017f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017f8:	4303      	orrs	r3, r0
 80017fa:	608b      	str	r3, [r1, #8]
 80017fc:	e786      	b.n	800170c <HAL_RCC_ClockConfig+0x38>
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40023800 	.word	0x40023800
 8001808:	08003b38 	.word	0x08003b38
 800180c:	20000008 	.word	0x20000008

08001810 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <HAL_RCC_GetHCLKFreq+0x8>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x14>)
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800182a:	6810      	ldr	r0, [r2, #0]
}
 800182c:	40d8      	lsrs	r0, r3
 800182e:	4770      	bx	lr
 8001830:	40023800 	.word	0x40023800
 8001834:	08003b48 	.word	0x08003b48
 8001838:	20000008 	.word	0x20000008

0800183c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x14>)
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800184a:	6810      	ldr	r0, [r2, #0]
}
 800184c:	40d8      	lsrs	r0, r3
 800184e:	4770      	bx	lr
 8001850:	40023800 	.word	0x40023800
 8001854:	08003b48 	.word	0x08003b48
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800185c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001860:	6802      	ldr	r2, [r0, #0]
{
 8001862:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001864:	f012 0601 	ands.w	r6, r2, #1
 8001868:	d00b      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800186a:	4bba      	ldr	r3, [pc, #744]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800186c:	6899      	ldr	r1, [r3, #8]
 800186e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001872:	6099      	str	r1, [r3, #8]
 8001874:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800187a:	fab6 f686 	clz	r6, r6
 800187e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001880:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001882:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001886:	d012      	beq.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001888:	49b2      	ldr	r1, [pc, #712]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800188a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800188c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001890:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001894:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8001898:	bf08      	it	eq
 800189a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800189c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018a0:	bf16      	itet	ne
 80018a2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80018a6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018a8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018ae:	02d7      	lsls	r7, r2, #11
 80018b0:	d510      	bpl.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018b2:	48a8      	ldr	r0, [pc, #672]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80018b6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018ba:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018c2:	ea43 0301 	orr.w	r3, r3, r1
 80018c6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018ca:	f000 81a9 	beq.w	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 80018ce:	2900      	cmp	r1, #0
 80018d0:	bf08      	it	eq
 80018d2:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80018d4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80018d8:	bf18      	it	ne
 80018da:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018dc:	0690      	lsls	r0, r2, #26
 80018de:	d531      	bpl.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018e0:	4b9c      	ldr	r3, [pc, #624]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018e2:	4f9d      	ldr	r7, [pc, #628]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018fe:	f7ff f899 	bl	8000a34 <HAL_GetTick>
 8001902:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	05d9      	lsls	r1, r3, #23
 8001908:	f140 818c 	bpl.w	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800190c:	4f91      	ldr	r7, [pc, #580]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800190e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001910:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001914:	f040 8191 	bne.w	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001918:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800191a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800191e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001922:	4a8c      	ldr	r2, [pc, #560]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001924:	f040 81af 	bne.w	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001928:	6891      	ldr	r1, [r2, #8]
 800192a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800192e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001932:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001936:	4301      	orrs	r1, r0
 8001938:	6091      	str	r1, [r2, #8]
 800193a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001940:	430b      	orrs	r3, r1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	06df      	lsls	r7, r3, #27
 8001948:	d50c      	bpl.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800194a:	4a82      	ldr	r2, [pc, #520]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800194c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001950:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001954:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001958:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800195c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800195e:	4301      	orrs	r1, r0
 8001960:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001964:	0458      	lsls	r0, r3, #17
 8001966:	d508      	bpl.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001968:	497a      	ldr	r1, [pc, #488]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800196a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800196c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001970:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001974:	4302      	orrs	r2, r0
 8001976:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800197a:	0419      	lsls	r1, r3, #16
 800197c:	d508      	bpl.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800197e:	4975      	ldr	r1, [pc, #468]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001980:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001982:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001986:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800198a:	4302      	orrs	r2, r0
 800198c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001990:	03da      	lsls	r2, r3, #15
 8001992:	d508      	bpl.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001994:	496f      	ldr	r1, [pc, #444]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001996:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001998:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800199c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80019a0:	4302      	orrs	r2, r0
 80019a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019a6:	039f      	lsls	r7, r3, #14
 80019a8:	d508      	bpl.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019aa:	496a      	ldr	r1, [pc, #424]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019ac:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80019ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019b2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80019b6:	4302      	orrs	r2, r0
 80019b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019bc:	0658      	lsls	r0, r3, #25
 80019be:	d508      	bpl.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019c0:	4964      	ldr	r1, [pc, #400]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80019c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019c8:	f022 0203 	bic.w	r2, r2, #3
 80019cc:	4302      	orrs	r2, r0
 80019ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019d2:	0619      	lsls	r1, r3, #24
 80019d4:	d508      	bpl.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019d6:	495f      	ldr	r1, [pc, #380]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80019da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019de:	f022 020c 	bic.w	r2, r2, #12
 80019e2:	4302      	orrs	r2, r0
 80019e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019e8:	05da      	lsls	r2, r3, #23
 80019ea:	d508      	bpl.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019ec:	4959      	ldr	r1, [pc, #356]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80019f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80019f8:	4302      	orrs	r2, r0
 80019fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019fe:	059f      	lsls	r7, r3, #22
 8001a00:	d508      	bpl.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a02:	4954      	ldr	r1, [pc, #336]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a04:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001a06:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001a0e:	4302      	orrs	r2, r0
 8001a10:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a14:	0558      	lsls	r0, r3, #21
 8001a16:	d508      	bpl.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a18:	494e      	ldr	r1, [pc, #312]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a24:	4302      	orrs	r2, r0
 8001a26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001a2a:	0519      	lsls	r1, r3, #20
 8001a2c:	d508      	bpl.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a2e:	4949      	ldr	r1, [pc, #292]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001a3a:	4302      	orrs	r2, r0
 8001a3c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a40:	04da      	lsls	r2, r3, #19
 8001a42:	d508      	bpl.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a44:	4943      	ldr	r1, [pc, #268]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a46:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001a48:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a4c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a50:	4302      	orrs	r2, r0
 8001a52:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a56:	049f      	lsls	r7, r3, #18
 8001a58:	d508      	bpl.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a5a:	493e      	ldr	r1, [pc, #248]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a5c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a5e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a62:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a66:	4302      	orrs	r2, r0
 8001a68:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a6c:	0258      	lsls	r0, r3, #9
 8001a6e:	d508      	bpl.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a70:	4938      	ldr	r1, [pc, #224]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a72:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001a74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a78:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001a7c:	4302      	orrs	r2, r0
 8001a7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a82:	0299      	lsls	r1, r3, #10
 8001a84:	d50c      	bpl.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a86:	4833      	ldr	r0, [pc, #204]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a88:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a8a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a8e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a92:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8001a96:	bf08      	it	eq
 8001a98:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001aa0:	f013 0f08 	tst.w	r3, #8
 8001aa4:	bf18      	it	ne
 8001aa6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001aa8:	035a      	lsls	r2, r3, #13
 8001aaa:	d508      	bpl.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aac:	4929      	ldr	r1, [pc, #164]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001aae:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001ab0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ab4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001abe:	021f      	lsls	r7, r3, #8
 8001ac0:	d509      	bpl.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ac2:	4924      	ldr	r1, [pc, #144]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ac4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001ac8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001acc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ad0:	4302      	orrs	r2, r0
 8001ad2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ad6:	0158      	lsls	r0, r3, #5
 8001ad8:	d509      	bpl.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001ada:	491e      	ldr	r1, [pc, #120]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001adc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001ae0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ae4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001aee:	0119      	lsls	r1, r3, #4
 8001af0:	d509      	bpl.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001af2:	4918      	ldr	r1, [pc, #96]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001af4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001af8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001afc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001b00:	4302      	orrs	r2, r0
 8001b02:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001b06:	00da      	lsls	r2, r3, #3
 8001b08:	d509      	bpl.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001b0a:	4912      	ldr	r1, [pc, #72]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b0c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001b10:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001b14:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001b18:	4302      	orrs	r2, r0
 8001b1a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b1e:	2e01      	cmp	r6, #1
 8001b20:	f000 80b5 	beq.w	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b28:	f000 80b1 	beq.w	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001b2c:	2d01      	cmp	r5, #1
 8001b2e:	d175      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001b30:	4d08      	ldr	r5, [pc, #32]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b38:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3a:	f7fe ff7b 	bl	8000a34 <HAL_GetTick>
 8001b3e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	009f      	lsls	r7, r3, #2
 8001b44:	f100 8127 	bmi.w	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001b48:	6821      	ldr	r1, [r4, #0]
 8001b4a:	030e      	lsls	r6, r1, #12
 8001b4c:	d506      	bpl.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001b4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b50:	b143      	cbz	r3, 8001b64 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001b52:	e003      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	02cd      	lsls	r5, r1, #11
 8001b5e:	d51d      	bpl.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b62:	b9db      	cbnz	r3, 8001b9c <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b64:	4a93      	ldr	r2, [pc, #588]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b6a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b72:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b76:	4303      	orrs	r3, r0
 8001b78:	6960      	ldr	r0, [r4, #20]
 8001b7a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b7e:	69a0      	ldr	r0, [r4, #24]
 8001b80:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b88:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b8e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b92:	3801      	subs	r0, #1
 8001b94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001b98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001b9c:	0288      	lsls	r0, r1, #10
 8001b9e:	d515      	bpl.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001ba0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ba6:	d111      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ba8:	4a82      	ldr	r2, [pc, #520]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001baa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001bae:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001bb2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001bb6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	6960      	ldr	r0, [r4, #20]
 8001bbe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001bc2:	6a20      	ldr	r0, [r4, #32]
 8001bc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001bcc:	070a      	lsls	r2, r1, #28
 8001bce:	d519      	bpl.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001bd0:	4978      	ldr	r1, [pc, #480]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001bd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001bd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001bda:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be2:	4313      	orrs	r3, r2
 8001be4:	6962      	ldr	r2, [r4, #20]
 8001be6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001bea:	69e2      	ldr	r2, [r4, #28]
 8001bec:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001bf4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001bf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bfa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c04:	4c6b      	ldr	r4, [pc, #428]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c0e:	f7fe ff11 	bl	8000a34 <HAL_GetTick>
 8001c12:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	f140 80c4 	bpl.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	e009      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1; 
 8001c20:	2601      	movs	r6, #1
 8001c22:	e657      	b.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c24:	f7fe ff06 	bl	8000a34 <HAL_GetTick>
 8001c28:	eba0 0008 	sub.w	r0, r0, r8
 8001c2c:	2864      	cmp	r0, #100	; 0x64
 8001c2e:	f67f ae69 	bls.w	8001904 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
}
 8001c34:	b003      	add	sp, #12
 8001c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c40:	4293      	cmp	r3, r2
 8001c42:	f43f ae69 	beq.w	8001918 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c52:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c5a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001c5c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c60:	07da      	lsls	r2, r3, #31
 8001c62:	f57f ae59 	bpl.w	8001918 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001c66:	f7fe fee5 	bl	8000a34 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c6e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	079b      	lsls	r3, r3, #30
 8001c74:	f53f ae50 	bmi.w	8001918 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7fe fedc 	bl	8000a34 <HAL_GetTick>
 8001c7c:	eba0 0008 	sub.w	r0, r0, r8
 8001c80:	4548      	cmp	r0, r9
 8001c82:	d9f5      	bls.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001c84:	e7d5      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c86:	6891      	ldr	r1, [r2, #8]
 8001c88:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c8c:	e654      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8001c8e:	4e49      	ldr	r6, [pc, #292]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001c90:	6833      	ldr	r3, [r6, #0]
 8001c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c96:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001c98:	f7fe fecc 	bl	8000a34 <HAL_GetTick>
 8001c9c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c9e:	6833      	ldr	r3, [r6, #0]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	d472      	bmi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ca4:	6822      	ldr	r2, [r4, #0]
 8001ca6:	07d7      	lsls	r7, r2, #31
 8001ca8:	d512      	bpl.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cac:	b983      	cbnz	r3, 8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cae:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cb2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cba:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	6861      	ldr	r1, [r4, #4]
 8001cc2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001cc6:	68a1      	ldr	r1, [r4, #8]
 8001cc8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ccc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cd0:	0316      	lsls	r6, r2, #12
 8001cd2:	d503      	bpl.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001cd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001cdc:	02d0      	lsls	r0, r2, #11
 8001cde:	d51e      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ce6:	d11a      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ce8:	4932      	ldr	r1, [pc, #200]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001cea:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cee:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001cfa:	4303      	orrs	r3, r0
 8001cfc:	6860      	ldr	r0, [r4, #4]
 8001cfe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d02:	68e0      	ldr	r0, [r4, #12]
 8001d04:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001d0c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d12:	f020 001f 	bic.w	r0, r0, #31
 8001d16:	3b01      	subs	r3, #1
 8001d18:	4303      	orrs	r3, r0
 8001d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d1e:	01d1      	lsls	r1, r2, #7
 8001d20:	d511      	bpl.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d22:	4924      	ldr	r1, [pc, #144]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d24:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d28:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d2c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001d30:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001d34:	4303      	orrs	r3, r0
 8001d36:	6860      	ldr	r0, [r4, #4]
 8001d38:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d3c:	6920      	ldr	r0, [r4, #16]
 8001d3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001d42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d46:	0192      	lsls	r2, r2, #6
 8001d48:	d50d      	bpl.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d4a:	6923      	ldr	r3, [r4, #16]
 8001d4c:	6862      	ldr	r2, [r4, #4]
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d54:	68e2      	ldr	r2, [r4, #12]
 8001d56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d5a:	68a2      	ldr	r2, [r4, #8]
 8001d5c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d66:	4e13      	ldr	r6, [pc, #76]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d68:	6833      	ldr	r3, [r6, #0]
 8001d6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d6e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001d70:	f7fe fe60 	bl	8000a34 <HAL_GetTick>
 8001d74:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d76:	6833      	ldr	r3, [r6, #0]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	f53f aed7 	bmi.w	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d7e:	f7fe fe59 	bl	8000a34 <HAL_GetTick>
 8001d82:	1bc0      	subs	r0, r0, r7
 8001d84:	2864      	cmp	r0, #100	; 0x64
 8001d86:	d9f6      	bls.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001d88:	e753      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d8a:	f7fe fe53 	bl	8000a34 <HAL_GetTick>
 8001d8e:	1bc0      	subs	r0, r0, r7
 8001d90:	2864      	cmp	r0, #100	; 0x64
 8001d92:	d984      	bls.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001d94:	e74d      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d96:	f7fe fe4d 	bl	8000a34 <HAL_GetTick>
 8001d9a:	1b80      	subs	r0, r0, r6
 8001d9c:	2864      	cmp	r0, #100	; 0x64
 8001d9e:	f67f aecf 	bls.w	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001da2:	e746      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001da4:	f7fe fe46 	bl	8000a34 <HAL_GetTick>
 8001da8:	1b40      	subs	r0, r0, r5
 8001daa:	2864      	cmp	r0, #100	; 0x64
 8001dac:	f67f af32 	bls.w	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001db0:	e73f      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_UART_DeInit>:
  * @brief DeInitializes the UART peripheral
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001db8:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001dba:	4605      	mov	r5, r0
 8001dbc:	b1b0      	cbz	r0, 8001dec <HAL_UART_DeInit+0x34>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001dbe:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8001dc0:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8001dc2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001dc6:	6803      	ldr	r3, [r0, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8001dd0:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8001dd2:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8001dd4:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001dd6:	f7fe fcab 	bl	8000730 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dda:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
  huart->RxState   = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8001ddc:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68

  return HAL_OK;
 8001de0:	4620      	mov	r0, r4
  huart->gState    = HAL_UART_STATE_RESET;
 8001de2:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8001de6:	f885 406a 	strb.w	r4, [r5, #106]	; 0x6a
  return HAL_OK;
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001dec:	2001      	movs	r0, #1
}
 8001dee:	bd38      	pop	{r3, r4, r5, pc}

08001df0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df4:	9d06      	ldr	r5, [sp, #24]
 8001df6:	4604      	mov	r4, r0
 8001df8:	460f      	mov	r7, r1
 8001dfa:	4616      	mov	r6, r2
 8001dfc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dfe:	6821      	ldr	r1, [r4, #0]
 8001e00:	69ca      	ldr	r2, [r1, #28]
 8001e02:	ea37 0302 	bics.w	r3, r7, r2
 8001e06:	bf0c      	ite	eq
 8001e08:	2201      	moveq	r2, #1
 8001e0a:	2200      	movne	r2, #0
 8001e0c:	42b2      	cmp	r2, r6
 8001e0e:	d002      	beq.n	8001e16 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e10:	2000      	movs	r0, #0
}
 8001e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e16:	1c6b      	adds	r3, r5, #1
 8001e18:	d0f2      	beq.n	8001e00 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001e1a:	b99d      	cbnz	r5, 8001e44 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e1c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001e1e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001e30:	2320      	movs	r3, #32
 8001e32:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001e36:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001e44:	f7fe fdf6 	bl	8000a34 <HAL_GetTick>
 8001e48:	eba0 0008 	sub.w	r0, r0, r8
 8001e4c:	4285      	cmp	r5, r0
 8001e4e:	d8d6      	bhi.n	8001dfe <UART_WaitOnFlagUntilTimeout+0xe>
 8001e50:	e7e4      	b.n	8001e1c <UART_WaitOnFlagUntilTimeout+0x2c>

08001e52 <HAL_UART_Transmit>:
{
 8001e52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001e56:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001e58:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8001e60:	2b20      	cmp	r3, #32
{
 8001e62:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001e64:	d14c      	bne.n	8001f00 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001e66:	2900      	cmp	r1, #0
 8001e68:	d048      	beq.n	8001efc <HAL_UART_Transmit+0xaa>
 8001e6a:	2a00      	cmp	r2, #0
 8001e6c:	d046      	beq.n	8001efc <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001e6e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d044      	beq.n	8001f00 <HAL_UART_Transmit+0xae>
 8001e76:	2301      	movs	r3, #1
 8001e78:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e80:	2321      	movs	r3, #33	; 0x21
 8001e82:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001e86:	f7fe fdd5 	bl	8000a34 <HAL_GetTick>
 8001e8a:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001e8c:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001e90:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001e94:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001e98:	b292      	uxth	r2, r2
 8001e9a:	b962      	cbnz	r2, 8001eb6 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e9c:	9700      	str	r7, [sp, #0]
 8001e9e:	4633      	mov	r3, r6
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff ffa4 	bl	8001df0 <UART_WaitOnFlagUntilTimeout>
 8001ea8:	b998      	cbnz	r0, 8001ed2 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001eaa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001eac:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001eb0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8001eb4:	e00e      	b.n	8001ed4 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001eb6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	9700      	str	r7, [sp, #0]
 8001ebe:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8001ec0:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec2:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eca:	4633      	mov	r3, r6
 8001ecc:	f7ff ff90 	bl	8001df0 <UART_WaitOnFlagUntilTimeout>
 8001ed0:	b118      	cbz	r0, 8001eda <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
}
 8001ed4:	b002      	add	sp, #8
 8001ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eda:	68a3      	ldr	r3, [r4, #8]
 8001edc:	6822      	ldr	r2, [r4, #0]
 8001ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee2:	d107      	bne.n	8001ef4 <HAL_UART_Transmit+0xa2>
 8001ee4:	6923      	ldr	r3, [r4, #16]
 8001ee6:	b92b      	cbnz	r3, 8001ef4 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001ee8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef0:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8001ef2:	e7cf      	b.n	8001e94 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001ef4:	782b      	ldrb	r3, [r5, #0]
 8001ef6:	3501      	adds	r5, #1
 8001ef8:	6293      	str	r3, [r2, #40]	; 0x28
 8001efa:	e7cb      	b.n	8001e94 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001efc:	2001      	movs	r0, #1
 8001efe:	e7e9      	b.n	8001ed4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001f00:	2002      	movs	r0, #2
 8001f02:	e7e7      	b.n	8001ed4 <HAL_UART_Transmit+0x82>

08001f04 <HAL_UART_Receive>:
{
 8001f04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f08:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f0a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 8001f0e:	4604      	mov	r4, r0
 8001f10:	460d      	mov	r5, r1
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f12:	2b20      	cmp	r3, #32
{
 8001f14:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f16:	d161      	bne.n	8001fdc <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 8001f18:	2900      	cmp	r1, #0
 8001f1a:	d05d      	beq.n	8001fd8 <HAL_UART_Receive+0xd4>
 8001f1c:	2a00      	cmp	r2, #0
 8001f1e:	d05b      	beq.n	8001fd8 <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 8001f20:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d059      	beq.n	8001fdc <HAL_UART_Receive+0xd8>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f32:	2322      	movs	r3, #34	; 0x22
 8001f34:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8001f38:	f7fe fd7c 	bl	8000a34 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8001f3c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001f3e:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8001f40:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8001f48:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001f4c:	d115      	bne.n	8001f7a <HAL_UART_Receive+0x76>
 8001f4e:	6923      	ldr	r3, [r4, #16]
 8001f50:	b98b      	cbnz	r3, 8001f76 <HAL_UART_Receive+0x72>
 8001f52:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001f56:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001f5a:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8001f5e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001f62:	b280      	uxth	r0, r0
 8001f64:	b9b8      	cbnz	r0, 8001f96 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8001f66:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001f68:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8001f6c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8001f70:	b002      	add	sp, #8
 8001f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001f76:	23ff      	movs	r3, #255	; 0xff
 8001f78:	e7ed      	b.n	8001f56 <HAL_UART_Receive+0x52>
 8001f7a:	b923      	cbnz	r3, 8001f86 <HAL_UART_Receive+0x82>
 8001f7c:	6923      	ldr	r3, [r4, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f9      	beq.n	8001f76 <HAL_UART_Receive+0x72>
 8001f82:	237f      	movs	r3, #127	; 0x7f
 8001f84:	e7e7      	b.n	8001f56 <HAL_UART_Receive+0x52>
 8001f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f8a:	d1e6      	bne.n	8001f5a <HAL_UART_Receive+0x56>
 8001f8c:	6923      	ldr	r3, [r4, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f7      	beq.n	8001f82 <HAL_UART_Receive+0x7e>
 8001f92:	233f      	movs	r3, #63	; 0x3f
 8001f94:	e7df      	b.n	8001f56 <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8001f96:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8cd 8000 	str.w	r8, [sp]
 8001fa0:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8001fa2:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fa4:	4620      	mov	r0, r4
      huart->RxXferCount--;
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fac:	463b      	mov	r3, r7
 8001fae:	f7ff ff1f 	bl	8001df0 <UART_WaitOnFlagUntilTimeout>
 8001fb2:	b9a8      	cbnz	r0, 8001fe0 <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb4:	68a3      	ldr	r3, [r4, #8]
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	d106      	bne.n	8001fcc <HAL_UART_Receive+0xc8>
 8001fbe:	6922      	ldr	r2, [r4, #16]
 8001fc0:	b922      	cbnz	r2, 8001fcc <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	4033      	ands	r3, r6
 8001fc6:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8001fca:	e7c8      	b.n	8001f5e <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	3501      	adds	r5, #1
 8001fd0:	4033      	ands	r3, r6
 8001fd2:	f805 3c01 	strb.w	r3, [r5, #-1]
 8001fd6:	e7c2      	b.n	8001f5e <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
 8001fda:	e7c9      	b.n	8001f70 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8001fdc:	2002      	movs	r0, #2
 8001fde:	e7c7      	b.n	8001f70 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	e7c5      	b.n	8001f70 <HAL_UART_Receive+0x6c>

08001fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fe8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fea:	69c3      	ldr	r3, [r0, #28]
 8001fec:	6921      	ldr	r1, [r4, #16]
 8001fee:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ff0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	6961      	ldr	r1, [r4, #20]
 8001ff6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ff8:	4993      	ldr	r1, [pc, #588]	; (8002248 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ffa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ffc:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ffe:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002000:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002002:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002004:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002006:	686a      	ldr	r2, [r5, #4]
 8002008:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800200c:	430a      	orrs	r2, r1
 800200e:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002010:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002012:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002014:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002016:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800201a:	430a      	orrs	r2, r1
 800201c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800201e:	4a8b      	ldr	r2, [pc, #556]	; (800224c <UART_SetConfig+0x268>)
 8002020:	4295      	cmp	r5, r2
 8002022:	d119      	bne.n	8002058 <UART_SetConfig+0x74>
 8002024:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002028:	4989      	ldr	r1, [pc, #548]	; (8002250 <UART_SetConfig+0x26c>)
 800202a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800202e:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002036:	5c8a      	ldrb	r2, [r1, r2]
 8002038:	f040 80b3 	bne.w	80021a2 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 800203c:	2a08      	cmp	r2, #8
 800203e:	f200 80ad 	bhi.w	800219c <UART_SetConfig+0x1b8>
 8002042:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002046:	0026      	.short	0x0026
 8002048:	00e9007b 	.word	0x00e9007b
 800204c:	00f500ab 	.word	0x00f500ab
 8002050:	00ab00ab 	.word	0x00ab00ab
 8002054:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002058:	4a7e      	ldr	r2, [pc, #504]	; (8002254 <UART_SetConfig+0x270>)
 800205a:	4295      	cmp	r5, r2
 800205c:	d107      	bne.n	800206e <UART_SetConfig+0x8a>
 800205e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002062:	497d      	ldr	r1, [pc, #500]	; (8002258 <UART_SetConfig+0x274>)
 8002064:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002068:	f002 020c 	and.w	r2, r2, #12
 800206c:	e7e1      	b.n	8002032 <UART_SetConfig+0x4e>
 800206e:	4a7b      	ldr	r2, [pc, #492]	; (800225c <UART_SetConfig+0x278>)
 8002070:	4295      	cmp	r5, r2
 8002072:	d12b      	bne.n	80020cc <UART_SetConfig+0xe8>
 8002074:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002078:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800207c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002080:	2a10      	cmp	r2, #16
 8002082:	f000 80d2 	beq.w	800222a <UART_SetConfig+0x246>
 8002086:	d816      	bhi.n	80020b6 <UART_SetConfig+0xd2>
 8002088:	b9da      	cbnz	r2, 80020c2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800208a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800208e:	f040 809f 	bne.w	80021d0 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002092:	f7ff fbc3 	bl	800181c <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002096:	6861      	ldr	r1, [r4, #4]
 8002098:	084a      	lsrs	r2, r1, #1
 800209a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80020a4:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80020a6:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020aa:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80020ae:	6821      	ldr	r1, [r4, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
 80020b4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	f000 80ab 	beq.w	8002212 <UART_SetConfig+0x22e>
 80020bc:	2a30      	cmp	r2, #48	; 0x30
 80020be:	f000 80ba 	beq.w	8002236 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c6:	d069      	beq.n	800219c <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80020c8:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80020ca:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020cc:	4a64      	ldr	r2, [pc, #400]	; (8002260 <UART_SetConfig+0x27c>)
 80020ce:	4295      	cmp	r5, r2
 80020d0:	d10e      	bne.n	80020f0 <UART_SetConfig+0x10c>
 80020d2:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80020d6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80020da:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80020de:	2a40      	cmp	r2, #64	; 0x40
 80020e0:	f000 80a3 	beq.w	800222a <UART_SetConfig+0x246>
 80020e4:	d9d0      	bls.n	8002088 <UART_SetConfig+0xa4>
 80020e6:	2a80      	cmp	r2, #128	; 0x80
 80020e8:	f000 8093 	beq.w	8002212 <UART_SetConfig+0x22e>
 80020ec:	2ac0      	cmp	r2, #192	; 0xc0
 80020ee:	e7e6      	b.n	80020be <UART_SetConfig+0xda>
 80020f0:	4a5c      	ldr	r2, [pc, #368]	; (8002264 <UART_SetConfig+0x280>)
 80020f2:	4295      	cmp	r5, r2
 80020f4:	d110      	bne.n	8002118 <UART_SetConfig+0x134>
 80020f6:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80020fa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80020fe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002102:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002106:	f000 8090 	beq.w	800222a <UART_SetConfig+0x246>
 800210a:	d9bd      	bls.n	8002088 <UART_SetConfig+0xa4>
 800210c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002110:	d07f      	beq.n	8002212 <UART_SetConfig+0x22e>
 8002112:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002116:	e7d2      	b.n	80020be <UART_SetConfig+0xda>
 8002118:	4a53      	ldr	r2, [pc, #332]	; (8002268 <UART_SetConfig+0x284>)
 800211a:	4295      	cmp	r5, r2
 800211c:	d117      	bne.n	800214e <UART_SetConfig+0x16a>
 800211e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002122:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002126:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800212a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800212e:	d07c      	beq.n	800222a <UART_SetConfig+0x246>
 8002130:	d807      	bhi.n	8002142 <UART_SetConfig+0x15e>
 8002132:	2a00      	cmp	r2, #0
 8002134:	d1c5      	bne.n	80020c2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213a:	d154      	bne.n	80021e6 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800213c:	f7ff fb7e 	bl	800183c <HAL_RCC_GetPCLK2Freq>
 8002140:	e7a9      	b.n	8002096 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002142:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002146:	d064      	beq.n	8002212 <UART_SetConfig+0x22e>
 8002148:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800214c:	e7b7      	b.n	80020be <UART_SetConfig+0xda>
 800214e:	4a47      	ldr	r2, [pc, #284]	; (800226c <UART_SetConfig+0x288>)
 8002150:	4295      	cmp	r5, r2
 8002152:	d10f      	bne.n	8002174 <UART_SetConfig+0x190>
 8002154:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002158:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800215c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002160:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002164:	d061      	beq.n	800222a <UART_SetConfig+0x246>
 8002166:	d98f      	bls.n	8002088 <UART_SetConfig+0xa4>
 8002168:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800216c:	d051      	beq.n	8002212 <UART_SetConfig+0x22e>
 800216e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002172:	e7a4      	b.n	80020be <UART_SetConfig+0xda>
 8002174:	4a3e      	ldr	r2, [pc, #248]	; (8002270 <UART_SetConfig+0x28c>)
 8002176:	4295      	cmp	r5, r2
 8002178:	d1a3      	bne.n	80020c2 <UART_SetConfig+0xde>
 800217a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800217e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002182:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002186:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800218a:	d04e      	beq.n	800222a <UART_SetConfig+0x246>
 800218c:	f67f af7c 	bls.w	8002088 <UART_SetConfig+0xa4>
 8002190:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002194:	d03d      	beq.n	8002212 <UART_SetConfig+0x22e>
 8002196:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800219a:	e790      	b.n	80020be <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 800219c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800219e:	2300      	movs	r3, #0
 80021a0:	e781      	b.n	80020a6 <UART_SetConfig+0xc2>
    switch (clocksource)
 80021a2:	2a08      	cmp	r2, #8
 80021a4:	d890      	bhi.n	80020c8 <UART_SetConfig+0xe4>
 80021a6:	a301      	add	r3, pc, #4	; (adr r3, 80021ac <UART_SetConfig+0x1c8>)
 80021a8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80021ac:	080021d1 	.word	0x080021d1
 80021b0:	080021e7 	.word	0x080021e7
 80021b4:	080021ed 	.word	0x080021ed
 80021b8:	080020c9 	.word	0x080020c9
 80021bc:	08002203 	.word	0x08002203
 80021c0:	080020c9 	.word	0x080020c9
 80021c4:	080020c9 	.word	0x080020c9
 80021c8:	080020c9 	.word	0x080020c9
 80021cc:	08002209 	.word	0x08002209
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80021d0:	f7ff fb24 	bl	800181c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80021da:	fbb0 f0f3 	udiv	r0, r0, r3
 80021de:	b280      	uxth	r0, r0
 80021e0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80021e2:	2000      	movs	r0, #0
      break;
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80021e6:	f7ff fb29 	bl	800183c <HAL_RCC_GetPCLK2Freq>
 80021ea:	e7f3      	b.n	80021d4 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80021ec:	6862      	ldr	r2, [r4, #4]
 80021ee:	0853      	lsrs	r3, r2, #1
 80021f0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80021f4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	60eb      	str	r3, [r5, #12]
 8002200:	e7ef      	b.n	80021e2 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002202:	f7ff fa39 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8002206:	e7e5      	b.n	80021d4 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002208:	6862      	ldr	r2, [r4, #4]
 800220a:	0853      	lsrs	r3, r2, #1
 800220c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002210:	e7f2      	b.n	80021f8 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002216:	d1e9      	bne.n	80021ec <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002218:	6860      	ldr	r0, [r4, #4]
 800221a:	0843      	lsrs	r3, r0, #1
 800221c:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002220:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002224:	fbb3 f3f0 	udiv	r3, r3, r0
 8002228:	e73b      	b.n	80020a2 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800222a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800222e:	d1e8      	bne.n	8002202 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002230:	f7ff fa22 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8002234:	e72f      	b.n	8002096 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800223a:	d1e5      	bne.n	8002208 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800223c:	6860      	ldr	r0, [r4, #4]
 800223e:	0843      	lsrs	r3, r0, #1
 8002240:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002244:	e7ee      	b.n	8002224 <UART_SetConfig+0x240>
 8002246:	bf00      	nop
 8002248:	efff69f3 	.word	0xefff69f3
 800224c:	40011000 	.word	0x40011000
 8002250:	080039ba 	.word	0x080039ba
 8002254:	40004400 	.word	0x40004400
 8002258:	080039be 	.word	0x080039be
 800225c:	40004800 	.word	0x40004800
 8002260:	40004c00 	.word	0x40004c00
 8002264:	40005000 	.word	0x40005000
 8002268:	40011400 	.word	0x40011400
 800226c:	40007800 	.word	0x40007800
 8002270:	40007c00 	.word	0x40007c00

08002274 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002274:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002276:	07da      	lsls	r2, r3, #31
{
 8002278:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800227a:	d506      	bpl.n	800228a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800227c:	6801      	ldr	r1, [r0, #0]
 800227e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002280:	684a      	ldr	r2, [r1, #4]
 8002282:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002286:	4322      	orrs	r2, r4
 8002288:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800228a:	079c      	lsls	r4, r3, #30
 800228c:	d506      	bpl.n	800229c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800228e:	6801      	ldr	r1, [r0, #0]
 8002290:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002292:	684a      	ldr	r2, [r1, #4]
 8002294:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002298:	4322      	orrs	r2, r4
 800229a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800229c:	0759      	lsls	r1, r3, #29
 800229e:	d506      	bpl.n	80022ae <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022a0:	6801      	ldr	r1, [r0, #0]
 80022a2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80022a4:	684a      	ldr	r2, [r1, #4]
 80022a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022aa:	4322      	orrs	r2, r4
 80022ac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022ae:	071a      	lsls	r2, r3, #28
 80022b0:	d506      	bpl.n	80022c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022b2:	6801      	ldr	r1, [r0, #0]
 80022b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80022b6:	684a      	ldr	r2, [r1, #4]
 80022b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022bc:	4322      	orrs	r2, r4
 80022be:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022c0:	06dc      	lsls	r4, r3, #27
 80022c2:	d506      	bpl.n	80022d2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022c4:	6801      	ldr	r1, [r0, #0]
 80022c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80022c8:	688a      	ldr	r2, [r1, #8]
 80022ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ce:	4322      	orrs	r2, r4
 80022d0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022d2:	0699      	lsls	r1, r3, #26
 80022d4:	d506      	bpl.n	80022e4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022d6:	6801      	ldr	r1, [r0, #0]
 80022d8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80022da:	688a      	ldr	r2, [r1, #8]
 80022dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022e0:	4322      	orrs	r2, r4
 80022e2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022e4:	065a      	lsls	r2, r3, #25
 80022e6:	d510      	bpl.n	800230a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022e8:	6801      	ldr	r1, [r0, #0]
 80022ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80022ec:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022ee:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022f2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80022f6:	ea42 0204 	orr.w	r2, r2, r4
 80022fa:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022fc:	d105      	bne.n	800230a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022fe:	684a      	ldr	r2, [r1, #4]
 8002300:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002302:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002306:	4322      	orrs	r2, r4
 8002308:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	d506      	bpl.n	800231c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800230e:	6802      	ldr	r2, [r0, #0]
 8002310:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002312:	6853      	ldr	r3, [r2, #4]
 8002314:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002318:	430b      	orrs	r3, r1
 800231a:	6053      	str	r3, [r2, #4]
 800231c:	bd10      	pop	{r4, pc}

0800231e <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800231e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002320:	2500      	movs	r5, #0
{
 8002322:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002326:	f7fe fb85 	bl	8000a34 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800232a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800232c:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	0712      	lsls	r2, r2, #28
 8002332:	d409      	bmi.n	8002348 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002334:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002336:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002338:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800233c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002340:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002344:	b003      	add	sp, #12
 8002346:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002348:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800234c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002350:	4620      	mov	r0, r4
 8002352:	9200      	str	r2, [sp, #0]
 8002354:	462a      	mov	r2, r5
 8002356:	f7ff fd4b 	bl	8001df0 <UART_WaitOnFlagUntilTimeout>
 800235a:	2800      	cmp	r0, #0
 800235c:	d0ea      	beq.n	8002334 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800235e:	2003      	movs	r0, #3
 8002360:	e7f0      	b.n	8002344 <UART_CheckIdleState+0x26>

08002362 <HAL_UART_Init>:
{
 8002362:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002364:	4604      	mov	r4, r0
 8002366:	b360      	cbz	r0, 80023c2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002368:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800236c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002370:	b91b      	cbnz	r3, 800237a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002372:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002376:	f7fe f96b 	bl	8000650 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800237a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800237c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800237e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800238c:	f7ff fe2a 	bl	8001fe4 <UART_SetConfig>
 8002390:	2801      	cmp	r0, #1
 8002392:	d016      	beq.n	80023c2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002396:	b113      	cbz	r3, 800239e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff ff6b 	bl	8002274 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80023a0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
}
 80023b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80023bc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80023be:	f7ff bfae 	b.w	800231e <UART_CheckIdleState>
}
 80023c2:	2001      	movs	r0, #1
 80023c4:	bd10      	pop	{r4, pc}
	...

080023c8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 80023ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d0:	f042 0201 	orr.w	r2, r2, #1
{
 80023d4:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
{
 80023d8:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 80023dc:	4c15      	ldr	r4, [pc, #84]	; (8002434 <MX_GPIO_Init+0x6c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	f002 0201 	and.w	r2, r2, #1
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 80023e2:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	9200      	str	r2, [sp, #0]
 80023e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
 80023f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80023f6:	9201      	str	r2, [sp, #4]
 80023f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 800240e:	f7fe fecb 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PJ13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002416:	a903      	add	r1, sp, #12
 8002418:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800241a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	2301      	movs	r3, #1
 800241e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002428:	f7fe fd30 	bl	8000e8c <HAL_GPIO_Init>

}
 800242c:	b008      	add	sp, #32
 800242e:	bd10      	pop	{r4, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	40022400 	.word	0x40022400

08002438 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8002438:	b507      	push	{r0, r1, r2, lr}
 800243a:	a902      	add	r1, sp, #8
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&UartDebugHandle, (uint8_t *)&ch, 1, 0xFFFF);
 800243c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002440:	2201      	movs	r2, #1
{
 8002442:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&UartDebugHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <__io_putchar+0x1c>)
 8002448:	f7ff fd03 	bl	8001e52 <HAL_UART_Transmit>

	return ch;
}
 800244c:	9801      	ldr	r0, [sp, #4]
 800244e:	b003      	add	sp, #12
 8002450:	f85d fb04 	ldr.w	pc, [sp], #4
 8002454:	200000bc 	.word	0x200000bc

08002458 <_write>:

int _write(int file, char *ptr, int len)
{
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	460e      	mov	r6, r1
 800245c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	460c      	mov	r4, r1
 8002460:	1ba3      	subs	r3, r4, r6
 8002462:	429d      	cmp	r5, r3
 8002464:	dc01      	bgt.n	800246a <_write+0x12>
	{
		__io_putchar( *ptr++ );
	}
	return len;
}
 8002466:	4628      	mov	r0, r5
 8002468:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar( *ptr++ );
 800246a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800246e:	f7ff ffe3 	bl	8002438 <__io_putchar>
 8002472:	e7f5      	b.n	8002460 <_write+0x8>

08002474 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8002474:	4605      	mov	r5, r0
 8002476:	460e      	mov	r6, r1
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
	{
		printf("\r\nError file %s line %d",file,line);
 8002478:	4c03      	ldr	r4, [pc, #12]	; (8002488 <_Error_Handler+0x14>)
{
 800247a:	b508      	push	{r3, lr}
		printf("\r\nError file %s line %d",file,line);
 800247c:	4632      	mov	r2, r6
 800247e:	4629      	mov	r1, r5
 8002480:	4620      	mov	r0, r4
 8002482:	f000 fb43 	bl	8002b0c <iprintf>
 8002486:	e7f9      	b.n	800247c <_Error_Handler+0x8>
 8002488:	080039d9 	.word	0x080039d9

0800248c <SystemClock_Config>:
	__HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <SystemClock_Config+0xb4>)
 800248e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002490:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8002494:	b510      	push	{r4, lr}
	__HAL_RCC_PWR_CLK_ENABLE();
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
{
 8002498:	b094      	sub	sp, #80	; 0x50
	__HAL_RCC_PWR_CLK_ENABLE();
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800249c:	2402      	movs	r4, #2
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249e:	a807      	add	r0, sp, #28
	__HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	9b00      	ldr	r3, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <SystemClock_Config+0xb8>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b4:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ba:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80024bc:	9412      	str	r4, [sp, #72]	; 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ca:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024d0:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80024d2:	2319      	movs	r3, #25
 80024d4:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 432;
 80024d6:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80024da:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024dc:	f7fe ff38 	bl	8001350 <HAL_RCC_OscConfig>
 80024e0:	b118      	cbz	r0, 80024ea <SystemClock_Config+0x5e>
		_Error_Handler(__FILE__, __LINE__);
 80024e2:	21a6      	movs	r1, #166	; 0xa6
		_Error_Handler(__FILE__, __LINE__);
 80024e4:	4818      	ldr	r0, [pc, #96]	; (8002548 <SystemClock_Config+0xbc>)
 80024e6:	f7ff ffc5 	bl	8002474 <_Error_Handler>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024ea:	f7fe fe63 	bl	80011b4 <HAL_PWREx_EnableOverDrive>
 80024ee:	b108      	cbz	r0, 80024f4 <SystemClock_Config+0x68>
		_Error_Handler(__FILE__, __LINE__);
 80024f0:	21ad      	movs	r1, #173	; 0xad
 80024f2:	e7f7      	b.n	80024e4 <SystemClock_Config+0x58>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f4:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f6:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80024f8:	2107      	movs	r1, #7
 80024fa:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fc:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002502:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002504:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250a:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800250c:	f7ff f8e2 	bl	80016d4 <HAL_RCC_ClockConfig>
 8002510:	4604      	mov	r4, r0
 8002512:	b108      	cbz	r0, 8002518 <SystemClock_Config+0x8c>
		_Error_Handler(__FILE__, __LINE__);
 8002514:	21bb      	movs	r1, #187	; 0xbb
 8002516:	e7e5      	b.n	80024e4 <SystemClock_Config+0x58>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002518:	f7ff f97a 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 800251c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002520:	fbb0 f0f3 	udiv	r0, r0, r3
 8002524:	f7fe fae8 	bl	8000af8 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002528:	2004      	movs	r0, #4
 800252a:	f7fe fafb 	bl	8000b24 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800252e:	4622      	mov	r2, r4
 8002530:	4621      	mov	r1, r4
 8002532:	f04f 30ff 	mov.w	r0, #4294967295
 8002536:	f7fe faa7 	bl	8000a88 <HAL_NVIC_SetPriority>
}
 800253a:	b014      	add	sp, #80	; 0x50
 800253c:	bd10      	pop	{r4, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000
 8002548:	080039cb 	.word	0x080039cb

0800254c <main>:
{
 800254c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
	HAL_Init();
 800254e:	f7fe fa59 	bl	8000a04 <HAL_Init>
	UART_Buffer = (uint8_t*) malloc(sizeof(uint8_t) * (MAX_LENGTH_OF_DATA + MAX_OPTION_BYTE));
 8002552:	4ca6      	ldr	r4, [pc, #664]	; (80027ec <main+0x2a0>)
	SystemClock_Config();
 8002554:	f7ff ff9a 	bl	800248c <SystemClock_Config>
	MX_GPIO_Init();
 8002558:	f7ff ff36 	bl	80023c8 <MX_GPIO_Init>
	DebugUartInit();
 800255c:	f7fe f860 	bl	8000620 <DebugUartInit>
	BootUartInit();
 8002560:	f7fe f846 	bl	80005f0 <BootUartInit>
	setbuf(stdout, NULL);	//Options to print immediately
 8002564:	4ba2      	ldr	r3, [pc, #648]	; (80027f0 <main+0x2a4>)
 8002566:	2100      	movs	r1, #0
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6898      	ldr	r0, [r3, #8]
 800256c:	f000 faf6 	bl	8002b5c <setbuf>
	DebugPrintf("\r\nBoot Loader Start !!!");
 8002570:	48a0      	ldr	r0, [pc, #640]	; (80027f4 <main+0x2a8>)
 8002572:	f000 facb 	bl	8002b0c <iprintf>
	UART_Buffer = (uint8_t*) malloc(sizeof(uint8_t) * (MAX_LENGTH_OF_DATA + MAX_OPTION_BYTE));
 8002576:	f640 000f 	movw	r0, #2063	; 0x80f
 800257a:	f000 fa0b 	bl	8002994 <malloc>
 800257e:	6020      	str	r0, [r4, #0]
	if(UART_Buffer != NULL)
 8002580:	2800      	cmp	r0, #0
 8002582:	f000 812e 	beq.w	80027e2 <main+0x296>
	if(HAL_UART_Receive(&UartBootHandle,(uint8_t* )UART_Buffer,1,PING_TIMEOUT) == HAL_OK)
 8002586:	4d9c      	ldr	r5, [pc, #624]	; (80027f8 <main+0x2ac>)
		DebugPrintf("\r\nMalloc OK ");
 8002588:	489c      	ldr	r0, [pc, #624]	; (80027fc <main+0x2b0>)
 800258a:	f000 fabf 	bl	8002b0c <iprintf>
	if(HAL_UART_Receive(&UartBootHandle,(uint8_t* )UART_Buffer,1,PING_TIMEOUT) == HAL_OK)
 800258e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002592:	2201      	movs	r2, #1
 8002594:	6821      	ldr	r1, [r4, #0]
 8002596:	4628      	mov	r0, r5
 8002598:	f7ff fcb4 	bl	8001f04 <HAL_UART_Receive>
 800259c:	2800      	cmp	r0, #0
 800259e:	f040 811a 	bne.w	80027d6 <main+0x28a>
		if(*UART_Buffer == ACK_VALUE)
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	7818      	ldrb	r0, [r3, #0]
 80025a6:	28ff      	cmp	r0, #255	; 0xff
 80025a8:	f040 8108 	bne.w	80027bc <main+0x270>
			BootLoaderSendACK(ACK_VALUE);
 80025ac:	f7fe f9de 	bl	800096c <BootLoaderSendACK>
			DebugPrintf("\r\nACK PING!");
 80025b0:	4893      	ldr	r0, [pc, #588]	; (8002800 <main+0x2b4>)
 80025b2:	f000 faab 	bl	8002b0c <iprintf>
			HAL_Delay(100);
 80025b6:	2064      	movs	r0, #100	; 0x64
 80025b8:	f7fe fa42 	bl	8000a40 <HAL_Delay>
			if(__HAL_USART_GET_FLAG(&UartBootHandle,USART_FLAG_RXNE))
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	0692      	lsls	r2, r2, #26
 80025c2:	d503      	bpl.n	80025cc <main+0x80>
				__HAL_USART_SEND_REQ(&UartBootHandle,USART_RXDATA_FLUSH_REQUEST);
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	f042 0208 	orr.w	r2, r2, #8
 80025ca:	619a      	str	r2, [r3, #24]
			HAL_UART_Receive(&UartBootHandle,(uint8_t* )UART_Buffer,PACKET_LENGTH_OF_FILE,UART_TIMEOUT);
 80025cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80025d0:	6821      	ldr	r1, [r4, #0]
 80025d2:	220f      	movs	r2, #15
 80025d4:	4888      	ldr	r0, [pc, #544]	; (80027f8 <main+0x2ac>)
 80025d6:	f7ff fc95 	bl	8001f04 <HAL_UART_Receive>
			if(*UART_Buffer == '*')
 80025da:	6821      	ldr	r1, [r4, #0]
 80025dc:	780b      	ldrb	r3, [r1, #0]
 80025de:	2b2a      	cmp	r3, #42	; 0x2a
 80025e0:	f040 80ec 	bne.w	80027bc <main+0x270>
				lengthOfFile = (UART_Buffer[1] << 16) | (UART_Buffer[2] << 8) | (UART_Buffer[3]);
 80025e4:	788b      	ldrb	r3, [r1, #2]
 80025e6:	784a      	ldrb	r2, [r1, #1]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025ee:	78ca      	ldrb	r2, [r1, #3]
 80025f0:	4313      	orrs	r3, r2
				NlengthOfFile = (UART_Buffer[4] << 16) | (UART_Buffer[5] << 8) | (UART_Buffer[6]);
 80025f2:	790a      	ldrb	r2, [r1, #4]
				lengthOfFile = (UART_Buffer[1] << 16) | (UART_Buffer[2] << 8) | (UART_Buffer[3]);
 80025f4:	9301      	str	r3, [sp, #4]
				NlengthOfFile = (UART_Buffer[4] << 16) | (UART_Buffer[5] << 8) | (UART_Buffer[6]);
 80025f6:	794b      	ldrb	r3, [r1, #5]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025fe:	798a      	ldrb	r2, [r1, #6]
 8002600:	4313      	orrs	r3, r2
 8002602:	9302      	str	r3, [sp, #8]
				if(lengthOfFile == (NlengthOfFile ^ 0xffffff)) //3Bytes length of file
 8002604:	9b02      	ldr	r3, [sp, #8]
 8002606:	9a01      	ldr	r2, [sp, #4]
 8002608:	f083 13ff 	eor.w	r3, r3, #16711935	; 0xff00ff
 800260c:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8002610:	4293      	cmp	r3, r2
 8002612:	f040 80d3 	bne.w	80027bc <main+0x270>
					CRC32 = (UART_Buffer[7] << 24) | (UART_Buffer[8] << 16) | (UART_Buffer[9] <<8) | (UART_Buffer[10]);
 8002616:	7a0b      	ldrb	r3, [r1, #8]
 8002618:	79ca      	ldrb	r2, [r1, #7]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002620:	7a8a      	ldrb	r2, [r1, #10]
 8002622:	4313      	orrs	r3, r2
 8002624:	7a4a      	ldrb	r2, [r1, #9]
 8002626:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					NCRC32 = (UART_Buffer[11] << 24) | (UART_Buffer[12] << 16) | (UART_Buffer[13] <<8) | (UART_Buffer[14]);
 800262a:	7aca      	ldrb	r2, [r1, #11]
					CRC32 = (UART_Buffer[7] << 24) | (UART_Buffer[8] << 16) | (UART_Buffer[9] <<8) | (UART_Buffer[10]);
 800262c:	9303      	str	r3, [sp, #12]
					NCRC32 = (UART_Buffer[11] << 24) | (UART_Buffer[12] << 16) | (UART_Buffer[13] <<8) | (UART_Buffer[14]);
 800262e:	7b0b      	ldrb	r3, [r1, #12]
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002636:	7b8a      	ldrb	r2, [r1, #14]
 8002638:	4313      	orrs	r3, r2
 800263a:	7b4a      	ldrb	r2, [r1, #13]
 800263c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002640:	9304      	str	r3, [sp, #16]
					if(CRC32 == (NCRC32 ^ 0xffffffff))
 8002642:	9b04      	ldr	r3, [sp, #16]
 8002644:	9a03      	ldr	r2, [sp, #12]
 8002646:	43db      	mvns	r3, r3
 8002648:	4293      	cmp	r3, r2
 800264a:	f040 80b7 	bne.w	80027bc <main+0x270>
						if(CalculateCRCBuffer(CRC32INIT_VALUE,(uint8_t*) (UART_Buffer + 1), 6) == CRC32)
 800264e:	2206      	movs	r2, #6
 8002650:	3101      	adds	r1, #1
 8002652:	f04f 30ff 	mov.w	r0, #4294967295
 8002656:	f7fe f975 	bl	8000944 <CalculateCRCBuffer>
 800265a:	9b03      	ldr	r3, [sp, #12]
 800265c:	4298      	cmp	r0, r3
 800265e:	f040 80b6 	bne.w	80027ce <main+0x282>
							DebugPrintf("\r\nData Length Packet CRC is Correct [%lu] bytes",lengthOfFile);
 8002662:	9901      	ldr	r1, [sp, #4]
 8002664:	4867      	ldr	r0, [pc, #412]	; (8002804 <main+0x2b8>)
 8002666:	f000 fa51 	bl	8002b0c <iprintf>
							BootLoader_EraseApplicationFlash(lengthOfFile);
 800266a:	9801      	ldr	r0, [sp, #4]
 800266c:	f7fe f8e8 	bl	8000840 <BootLoader_EraseApplicationFlash>
							DebugPrintf("\r\nErase flash done");
 8002670:	4865      	ldr	r0, [pc, #404]	; (8002808 <main+0x2bc>)
 8002672:	f000 fa4b 	bl	8002b0c <iprintf>
							BootLoaderSendACK(ACK_VALUE);
 8002676:	20ff      	movs	r0, #255	; 0xff
 8002678:	f7fe f978 	bl	800096c <BootLoaderSendACK>
							DebugPrintf("\r\nACK PACKET LENGTH OF FILE!");
 800267c:	4863      	ldr	r0, [pc, #396]	; (800280c <main+0x2c0>)
 800267e:	f000 fa45 	bl	8002b0c <iprintf>
								HAL_UART_Receive(&UartBootHandle,(uint8_t* )UART_Buffer,PACKET_DATA,UART_TIMEOUT);
 8002682:	4d5d      	ldr	r5, [pc, #372]	; (80027f8 <main+0x2ac>)
							volatile uint32_t countData = 0;
 8002684:	2300      	movs	r3, #0
												DebugPrintf("\r\nCRC Data is NOT correct");
 8002686:	4e62      	ldr	r6, [pc, #392]	; (8002810 <main+0x2c4>)
													DebugPrintf("\r\nWrite Flash Error code = %d",resultValue);
 8002688:	4f62      	ldr	r7, [pc, #392]	; (8002814 <main+0x2c8>)
							volatile uint32_t countData = 0;
 800268a:	9305      	str	r3, [sp, #20]
							while(countData != lengthOfFile)
 800268c:	9a05      	ldr	r2, [sp, #20]
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	f000 8091 	beq.w	80027b8 <main+0x26c>
								HAL_UART_Receive(&UartBootHandle,(uint8_t* )UART_Buffer,PACKET_DATA,UART_TIMEOUT);
 8002696:	f242 7310 	movw	r3, #10000	; 0x2710
 800269a:	6821      	ldr	r1, [r4, #0]
 800269c:	f640 020d 	movw	r2, #2061	; 0x80d
 80026a0:	4628      	mov	r0, r5
 80026a2:	f7ff fc2f 	bl	8001f04 <HAL_UART_Receive>
								if(*UART_Buffer == '!')
 80026a6:	6821      	ldr	r1, [r4, #0]
 80026a8:	780b      	ldrb	r3, [r1, #0]
 80026aa:	2b21      	cmp	r3, #33	; 0x21
 80026ac:	d1ee      	bne.n	800268c <main+0x140>
									volatile uint16_t datalength = (UART_Buffer[1] << 8) | (UART_Buffer[2]);
 80026ae:	784a      	ldrb	r2, [r1, #1]
 80026b0:	788b      	ldrb	r3, [r1, #2]
 80026b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
									volatile uint16_t Ndatalength = (UART_Buffer[3] << 8) | (UART_Buffer[4]);
 80026b6:	78ca      	ldrb	r2, [r1, #3]
									volatile uint16_t datalength = (UART_Buffer[1] << 8) | (UART_Buffer[2]);
 80026b8:	f8ad 3000 	strh.w	r3, [sp]
									volatile uint16_t Ndatalength = (UART_Buffer[3] << 8) | (UART_Buffer[4]);
 80026bc:	790b      	ldrb	r3, [r1, #4]
 80026be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026c2:	f8ad 3002 	strh.w	r3, [sp, #2]
									if(datalength == (Ndatalength ^ 0xffff))
 80026c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80026ca:	f8bd 2000 	ldrh.w	r2, [sp]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	b292      	uxth	r2, r2
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d1d9      	bne.n	800268c <main+0x140>
										CRC32 = 	(UART_Buffer[5 + datalength] << 24)	|
 80026d8:	f8bd 3000 	ldrh.w	r3, [sp]
												(UART_Buffer[5 + datalength +1] << 16) 	|
 80026dc:	f8bd e000 	ldrh.w	lr, [sp]
										CRC32 = 	(UART_Buffer[5 + datalength] << 24)	|
 80026e0:	fa11 f383 	uxtah	r3, r1, r3
												(UART_Buffer[5 + datalength + 2] <<8) 	|
 80026e4:	f8bd 2000 	ldrh.w	r2, [sp]
												(UART_Buffer[5 + datalength +1] << 16) 	|
 80026e8:	fa11 fe8e 	uxtah	lr, r1, lr
												(UART_Buffer[5 + datalength + 3]);
 80026ec:	f8bd 0000 	ldrh.w	r0, [sp]
										CRC32 = 	(UART_Buffer[5 + datalength] << 24)	|
 80026f0:	f893 c005 	ldrb.w	ip, [r3, #5]
												(UART_Buffer[5 + datalength + 2] <<8) 	|
 80026f4:	fa11 f282 	uxtah	r2, r1, r2
												(UART_Buffer[5 + datalength +1] << 16) 	|
 80026f8:	f89e 3006 	ldrb.w	r3, [lr, #6]
												(UART_Buffer[5 + datalength + 3]);
 80026fc:	fa11 f080 	uxtah	r0, r1, r0
												(UART_Buffer[5 + datalength + 2] <<8) 	|
 8002700:	79d2      	ldrb	r2, [r2, #7]
												(UART_Buffer[5 + datalength +1] << 16) 	|
 8002702:	041b      	lsls	r3, r3, #16
												(UART_Buffer[5 + datalength + 3]);
 8002704:	7a00      	ldrb	r0, [r0, #8]
												(UART_Buffer[5 + datalength + 2] <<8) 	|
 8002706:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800270a:	4303      	orrs	r3, r0
 800270c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
										CRC32 = 	(UART_Buffer[5 + datalength] << 24)	|
 8002710:	9303      	str	r3, [sp, #12]
										NCRC32 = 	(UART_Buffer[5 + datalength + 4] << 24) |
 8002712:	f8bd 3000 	ldrh.w	r3, [sp]
												(UART_Buffer[5 + datalength + 5] << 16) |
 8002716:	f8bd e000 	ldrh.w	lr, [sp]
										NCRC32 = 	(UART_Buffer[5 + datalength + 4] << 24) |
 800271a:	fa11 f383 	uxtah	r3, r1, r3
												(UART_Buffer[5 + datalength + 6] <<8) 	|
 800271e:	f8bd 2000 	ldrh.w	r2, [sp]
												(UART_Buffer[5 + datalength + 5] << 16) |
 8002722:	fa11 fe8e 	uxtah	lr, r1, lr
												(UART_Buffer[5 + datalength + 7]);
 8002726:	f8bd 0000 	ldrh.w	r0, [sp]
										NCRC32 = 	(UART_Buffer[5 + datalength + 4] << 24) |
 800272a:	f893 c009 	ldrb.w	ip, [r3, #9]
												(UART_Buffer[5 + datalength + 6] <<8) 	|
 800272e:	fa11 f282 	uxtah	r2, r1, r2
												(UART_Buffer[5 + datalength + 5] << 16) |
 8002732:	f89e 300a 	ldrb.w	r3, [lr, #10]
												(UART_Buffer[5 + datalength + 7]);
 8002736:	fa11 f080 	uxtah	r0, r1, r0
												(UART_Buffer[5 + datalength + 6] <<8) 	|
 800273a:	7ad2      	ldrb	r2, [r2, #11]
												(UART_Buffer[5 + datalength + 5] << 16) |
 800273c:	041b      	lsls	r3, r3, #16
												(UART_Buffer[5 + datalength + 7]);
 800273e:	7b00      	ldrb	r0, [r0, #12]
										NCRC32 = 	(UART_Buffer[5 + datalength + 4] << 24) |
 8002740:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
												(UART_Buffer[5 + datalength + 6] <<8) 	|
 8002744:	4303      	orrs	r3, r0
 8002746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
										NCRC32 = 	(UART_Buffer[5 + datalength + 4] << 24) |
 800274a:	9304      	str	r3, [sp, #16]
										if(CRC32 == (NCRC32 ^ 0xffffffff))
 800274c:	9b04      	ldr	r3, [sp, #16]
 800274e:	9a03      	ldr	r2, [sp, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	4293      	cmp	r3, r2
 8002754:	d19a      	bne.n	800268c <main+0x140>
											if(CalculateCRCBuffer(CRC32INIT_VALUE,(uint8_t*)UART_Buffer+1, datalength + 4) == CRC32)
 8002756:	f8bd 2000 	ldrh.w	r2, [sp]
 800275a:	3101      	adds	r1, #1
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	b292      	uxth	r2, r2
 8002762:	3204      	adds	r2, #4
 8002764:	f7fe f8ee 	bl	8000944 <CalculateCRCBuffer>
 8002768:	9b03      	ldr	r3, [sp, #12]
 800276a:	4298      	cmp	r0, r3
 800276c:	d12b      	bne.n	80027c6 <main+0x27a>
												uint8_t resultValue = BootLoader_WriteFlash(FLASH_USER_START_ADDR + countData, (uint8_t*)(UART_Buffer+5), datalength);
 800276e:	9805      	ldr	r0, [sp, #20]
 8002770:	6821      	ldr	r1, [r4, #0]
 8002772:	f8bd 2000 	ldrh.w	r2, [sp]
 8002776:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 800277a:	3105      	adds	r1, #5
 800277c:	b292      	uxth	r2, r2
 800277e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002782:	f7fe f8b7 	bl	80008f4 <BootLoader_WriteFlash>
												if( resultValue == 0)
 8002786:	b2c1      	uxtb	r1, r0
 8002788:	b9c9      	cbnz	r1, 80027be <main+0x272>
													DebugPrintf("\r\nACK PACKET DATA [%d] bytes",datalength);
 800278a:	f8bd 1000 	ldrh.w	r1, [sp]
 800278e:	4822      	ldr	r0, [pc, #136]	; (8002818 <main+0x2cc>)
 8002790:	b289      	uxth	r1, r1
 8002792:	f000 f9bb 	bl	8002b0c <iprintf>
													countData += datalength;
 8002796:	f8bd 3000 	ldrh.w	r3, [sp]
 800279a:	9a05      	ldr	r2, [sp, #20]
													BootLoaderSendACK(ACK_VALUE);
 800279c:	20ff      	movs	r0, #255	; 0xff
													countData += datalength;
 800279e:	fa12 f383 	uxtah	r3, r2, r3
 80027a2:	9305      	str	r3, [sp, #20]
													BootLoaderSendACK(ACK_VALUE);
 80027a4:	f7fe f8e2 	bl	800096c <BootLoaderSendACK>
													if(countData == lengthOfFile)
 80027a8:	9a05      	ldr	r2, [sp, #20]
 80027aa:	9b01      	ldr	r3, [sp, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f47f af6d 	bne.w	800268c <main+0x140>
														DebugPrintf("\r\nProgram Success");
 80027b2:	481a      	ldr	r0, [pc, #104]	; (800281c <main+0x2d0>)
 80027b4:	f000 f9aa 	bl	8002b0c <iprintf>
							BootLoader_JumpToApp();
 80027b8:	f7fe f826 	bl	8000808 <BootLoader_JumpToApp>
 80027bc:	e7fe      	b.n	80027bc <main+0x270>
													DebugPrintf("\r\nWrite Flash Error code = %d",resultValue);
 80027be:	4638      	mov	r0, r7
 80027c0:	f000 f9a4 	bl	8002b0c <iprintf>
 80027c4:	e762      	b.n	800268c <main+0x140>
												DebugPrintf("\r\nCRC Data is NOT correct");
 80027c6:	4630      	mov	r0, r6
 80027c8:	f000 f9a0 	bl	8002b0c <iprintf>
 80027cc:	e75e      	b.n	800268c <main+0x140>
							DebugPrintf("\r\nData Length Packet CRC is NOT Correct");
 80027ce:	4814      	ldr	r0, [pc, #80]	; (8002820 <main+0x2d4>)
 80027d0:	f000 f99c 	bl	8002b0c <iprintf>
 80027d4:	e7f2      	b.n	80027bc <main+0x270>
		DebugPrintf("\r\nBootLoader Timeout !!!");
 80027d6:	4813      	ldr	r0, [pc, #76]	; (8002824 <main+0x2d8>)
 80027d8:	f000 f998 	bl	8002b0c <iprintf>
		BootLoader_JumpToApp();
 80027dc:	f7fe f814 	bl	8000808 <BootLoader_JumpToApp>
 80027e0:	e7ec      	b.n	80027bc <main+0x270>
		DebugPrintf("\r\nMalloc Fail");
 80027e2:	4811      	ldr	r0, [pc, #68]	; (8002828 <main+0x2dc>)
 80027e4:	f000 f992 	bl	8002b0c <iprintf>
 80027e8:	e7e8      	b.n	80027bc <main+0x270>
 80027ea:	bf00      	nop
 80027ec:	200000b8 	.word	0x200000b8
 80027f0:	2000000c 	.word	0x2000000c
 80027f4:	080039f1 	.word	0x080039f1
 80027f8:	2000012c 	.word	0x2000012c
 80027fc:	08003a09 	.word	0x08003a09
 8002800:	08003a16 	.word	0x08003a16
 8002804:	08003a22 	.word	0x08003a22
 8002808:	08003a52 	.word	0x08003a52
 800280c:	08003a65 	.word	0x08003a65
 8002810:	08003acf 	.word	0x08003acf
 8002814:	08003ab1 	.word	0x08003ab1
 8002818:	08003a82 	.word	0x08003a82
 800281c:	08003a9f 	.word	0x08003a9f
 8002820:	08003ae9 	.word	0x08003ae9
 8002824:	08003b11 	.word	0x08003b11
 8002828:	08003b2a 	.word	0x08003b2a

0800282c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800282c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282e:	2003      	movs	r0, #3
 8002830:	f7fe f918 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	f06f 000b 	mvn.w	r0, #11
 800283a:	4611      	mov	r1, r2
 800283c:	f7fe f924 	bl	8000a88 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	f06f 000a 	mvn.w	r0, #10
 8002846:	4611      	mov	r1, r2
 8002848:	f7fe f91e 	bl	8000a88 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	f06f 0009 	mvn.w	r0, #9
 8002852:	4611      	mov	r1, r2
 8002854:	f7fe f918 	bl	8000a88 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	f06f 0004 	mvn.w	r0, #4
 800285e:	4611      	mov	r1, r2
 8002860:	f7fe f912 	bl	8000a88 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	f06f 0003 	mvn.w	r0, #3
 800286a:	4611      	mov	r1, r2
 800286c:	f7fe f90c 	bl	8000a88 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	f06f 0001 	mvn.w	r0, #1
 8002876:	4611      	mov	r1, r2
 8002878:	f7fe f906 	bl	8000a88 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	f04f 30ff 	mov.w	r0, #4294967295
 8002882:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002888:	f7fe b8fe 	b.w	8000a88 <HAL_NVIC_SetPriority>

0800288c <NMI_Handler>:
 800288c:	4770      	bx	lr

0800288e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800288e:	e7fe      	b.n	800288e <HardFault_Handler>

08002890 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002890:	e7fe      	b.n	8002890 <MemManage_Handler>

08002892 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002892:	e7fe      	b.n	8002892 <BusFault_Handler>

08002894 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002894:	e7fe      	b.n	8002894 <UsageFault_Handler>

08002896 <SVC_Handler>:
 8002896:	4770      	bx	lr

08002898 <DebugMon_Handler>:
 8002898:	4770      	bx	lr

0800289a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800289a:	4770      	bx	lr

0800289c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800289c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800289e:	f7fe f8bd 	bl	8000a1c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80028a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 80028a6:	f7fe b94a 	b.w	8000b3e <HAL_SYSTICK_IRQHandler>
	...

080028ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ac:	490f      	ldr	r1, [pc, #60]	; (80028ec <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028ae:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <SystemInit+0x44>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80028c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <SystemInit+0x48>)
 80028d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80028e0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028e6:	608b      	str	r3, [r1, #8]
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	24003010 	.word	0x24003010

080028f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002930 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028fe:	e003      	b.n	8002908 <LoopCopyDataInit>

08002900 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002902:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002904:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002906:	3104      	adds	r1, #4

08002908 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002908:	480b      	ldr	r0, [pc, #44]	; (8002938 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800290c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800290e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002910:	d3f6      	bcc.n	8002900 <CopyDataInit>
  ldr  r2, =_sbss
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002914:	e002      	b.n	800291c <LoopFillZerobss>

08002916 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002916:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002918:	f842 3b04 	str.w	r3, [r2], #4

0800291c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800291e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002920:	d3f9      	bcc.n	8002916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002922:	f7ff ffc3 	bl	80028ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002926:	f000 f811 	bl	800294c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292a:	f7ff fe0f 	bl	800254c <main>
  bx  lr    
 800292e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002930:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002934:	08003bf8 	.word	0x08003bf8
  ldr  r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800293c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002940:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002944:	200001a0 	.word	0x200001a0

08002948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <ADC_IRQHandler>
	...

0800294c <__libc_init_array>:
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	4e0d      	ldr	r6, [pc, #52]	; (8002984 <__libc_init_array+0x38>)
 8002950:	4c0d      	ldr	r4, [pc, #52]	; (8002988 <__libc_init_array+0x3c>)
 8002952:	1ba4      	subs	r4, r4, r6
 8002954:	10a4      	asrs	r4, r4, #2
 8002956:	2500      	movs	r5, #0
 8002958:	42a5      	cmp	r5, r4
 800295a:	d109      	bne.n	8002970 <__libc_init_array+0x24>
 800295c:	4e0b      	ldr	r6, [pc, #44]	; (800298c <__libc_init_array+0x40>)
 800295e:	4c0c      	ldr	r4, [pc, #48]	; (8002990 <__libc_init_array+0x44>)
 8002960:	f001 f814 	bl	800398c <_init>
 8002964:	1ba4      	subs	r4, r4, r6
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	2500      	movs	r5, #0
 800296a:	42a5      	cmp	r5, r4
 800296c:	d105      	bne.n	800297a <__libc_init_array+0x2e>
 800296e:	bd70      	pop	{r4, r5, r6, pc}
 8002970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002974:	4798      	blx	r3
 8002976:	3501      	adds	r5, #1
 8002978:	e7ee      	b.n	8002958 <__libc_init_array+0xc>
 800297a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800297e:	4798      	blx	r3
 8002980:	3501      	adds	r5, #1
 8002982:	e7f2      	b.n	800296a <__libc_init_array+0x1e>
 8002984:	08003bf0 	.word	0x08003bf0
 8002988:	08003bf0 	.word	0x08003bf0
 800298c:	08003bf0 	.word	0x08003bf0
 8002990:	08003bf4 	.word	0x08003bf4

08002994 <malloc>:
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <malloc+0xc>)
 8002996:	4601      	mov	r1, r0
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	f000 b859 	b.w	8002a50 <_malloc_r>
 800299e:	bf00      	nop
 80029a0:	2000000c 	.word	0x2000000c

080029a4 <free>:
 80029a4:	4b02      	ldr	r3, [pc, #8]	; (80029b0 <free+0xc>)
 80029a6:	4601      	mov	r1, r0
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	f000 b803 	b.w	80029b4 <_free_r>
 80029ae:	bf00      	nop
 80029b0:	2000000c 	.word	0x2000000c

080029b4 <_free_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4605      	mov	r5, r0
 80029b8:	2900      	cmp	r1, #0
 80029ba:	d045      	beq.n	8002a48 <_free_r+0x94>
 80029bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c0:	1f0c      	subs	r4, r1, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bfb8      	it	lt
 80029c6:	18e4      	addlt	r4, r4, r3
 80029c8:	f000 fb66 	bl	8003098 <__malloc_lock>
 80029cc:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <_free_r+0x98>)
 80029ce:	6813      	ldr	r3, [r2, #0]
 80029d0:	4610      	mov	r0, r2
 80029d2:	b933      	cbnz	r3, 80029e2 <_free_r+0x2e>
 80029d4:	6063      	str	r3, [r4, #4]
 80029d6:	6014      	str	r4, [r2, #0]
 80029d8:	4628      	mov	r0, r5
 80029da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029de:	f000 bb5c 	b.w	800309a <__malloc_unlock>
 80029e2:	42a3      	cmp	r3, r4
 80029e4:	d90c      	bls.n	8002a00 <_free_r+0x4c>
 80029e6:	6821      	ldr	r1, [r4, #0]
 80029e8:	1862      	adds	r2, r4, r1
 80029ea:	4293      	cmp	r3, r2
 80029ec:	bf04      	itt	eq
 80029ee:	681a      	ldreq	r2, [r3, #0]
 80029f0:	685b      	ldreq	r3, [r3, #4]
 80029f2:	6063      	str	r3, [r4, #4]
 80029f4:	bf04      	itt	eq
 80029f6:	1852      	addeq	r2, r2, r1
 80029f8:	6022      	streq	r2, [r4, #0]
 80029fa:	6004      	str	r4, [r0, #0]
 80029fc:	e7ec      	b.n	80029d8 <_free_r+0x24>
 80029fe:	4613      	mov	r3, r2
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	b10a      	cbz	r2, 8002a08 <_free_r+0x54>
 8002a04:	42a2      	cmp	r2, r4
 8002a06:	d9fa      	bls.n	80029fe <_free_r+0x4a>
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	1858      	adds	r0, r3, r1
 8002a0c:	42a0      	cmp	r0, r4
 8002a0e:	d10b      	bne.n	8002a28 <_free_r+0x74>
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	4401      	add	r1, r0
 8002a14:	1858      	adds	r0, r3, r1
 8002a16:	4282      	cmp	r2, r0
 8002a18:	6019      	str	r1, [r3, #0]
 8002a1a:	d1dd      	bne.n	80029d8 <_free_r+0x24>
 8002a1c:	6810      	ldr	r0, [r2, #0]
 8002a1e:	6852      	ldr	r2, [r2, #4]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	4401      	add	r1, r0
 8002a24:	6019      	str	r1, [r3, #0]
 8002a26:	e7d7      	b.n	80029d8 <_free_r+0x24>
 8002a28:	d902      	bls.n	8002a30 <_free_r+0x7c>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	602b      	str	r3, [r5, #0]
 8002a2e:	e7d3      	b.n	80029d8 <_free_r+0x24>
 8002a30:	6820      	ldr	r0, [r4, #0]
 8002a32:	1821      	adds	r1, r4, r0
 8002a34:	428a      	cmp	r2, r1
 8002a36:	bf04      	itt	eq
 8002a38:	6811      	ldreq	r1, [r2, #0]
 8002a3a:	6852      	ldreq	r2, [r2, #4]
 8002a3c:	6062      	str	r2, [r4, #4]
 8002a3e:	bf04      	itt	eq
 8002a40:	1809      	addeq	r1, r1, r0
 8002a42:	6021      	streq	r1, [r4, #0]
 8002a44:	605c      	str	r4, [r3, #4]
 8002a46:	e7c7      	b.n	80029d8 <_free_r+0x24>
 8002a48:	bd38      	pop	{r3, r4, r5, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000008c 	.word	0x2000008c

08002a50 <_malloc_r>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	1ccd      	adds	r5, r1, #3
 8002a54:	f025 0503 	bic.w	r5, r5, #3
 8002a58:	3508      	adds	r5, #8
 8002a5a:	2d0c      	cmp	r5, #12
 8002a5c:	bf38      	it	cc
 8002a5e:	250c      	movcc	r5, #12
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	4606      	mov	r6, r0
 8002a64:	db01      	blt.n	8002a6a <_malloc_r+0x1a>
 8002a66:	42a9      	cmp	r1, r5
 8002a68:	d903      	bls.n	8002a72 <_malloc_r+0x22>
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	6033      	str	r3, [r6, #0]
 8002a6e:	2000      	movs	r0, #0
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
 8002a72:	f000 fb11 	bl	8003098 <__malloc_lock>
 8002a76:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <_malloc_r+0xb4>)
 8002a78:	6814      	ldr	r4, [r2, #0]
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	b991      	cbnz	r1, 8002aa4 <_malloc_r+0x54>
 8002a7e:	4c22      	ldr	r4, [pc, #136]	; (8002b08 <_malloc_r+0xb8>)
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	b91b      	cbnz	r3, 8002a8c <_malloc_r+0x3c>
 8002a84:	4630      	mov	r0, r6
 8002a86:	f000 f859 	bl	8002b3c <_sbrk_r>
 8002a8a:	6020      	str	r0, [r4, #0]
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f000 f854 	bl	8002b3c <_sbrk_r>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	d126      	bne.n	8002ae6 <_malloc_r+0x96>
 8002a98:	230c      	movs	r3, #12
 8002a9a:	6033      	str	r3, [r6, #0]
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	f000 fafc 	bl	800309a <__malloc_unlock>
 8002aa2:	e7e4      	b.n	8002a6e <_malloc_r+0x1e>
 8002aa4:	680b      	ldr	r3, [r1, #0]
 8002aa6:	1b5b      	subs	r3, r3, r5
 8002aa8:	d41a      	bmi.n	8002ae0 <_malloc_r+0x90>
 8002aaa:	2b0b      	cmp	r3, #11
 8002aac:	d90f      	bls.n	8002ace <_malloc_r+0x7e>
 8002aae:	600b      	str	r3, [r1, #0]
 8002ab0:	50cd      	str	r5, [r1, r3]
 8002ab2:	18cc      	adds	r4, r1, r3
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	f000 faf0 	bl	800309a <__malloc_unlock>
 8002aba:	f104 000b 	add.w	r0, r4, #11
 8002abe:	1d23      	adds	r3, r4, #4
 8002ac0:	f020 0007 	bic.w	r0, r0, #7
 8002ac4:	1ac3      	subs	r3, r0, r3
 8002ac6:	d01b      	beq.n	8002b00 <_malloc_r+0xb0>
 8002ac8:	425a      	negs	r2, r3
 8002aca:	50e2      	str	r2, [r4, r3]
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
 8002ace:	428c      	cmp	r4, r1
 8002ad0:	bf0d      	iteet	eq
 8002ad2:	6863      	ldreq	r3, [r4, #4]
 8002ad4:	684b      	ldrne	r3, [r1, #4]
 8002ad6:	6063      	strne	r3, [r4, #4]
 8002ad8:	6013      	streq	r3, [r2, #0]
 8002ada:	bf18      	it	ne
 8002adc:	460c      	movne	r4, r1
 8002ade:	e7e9      	b.n	8002ab4 <_malloc_r+0x64>
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	6849      	ldr	r1, [r1, #4]
 8002ae4:	e7ca      	b.n	8002a7c <_malloc_r+0x2c>
 8002ae6:	1cc4      	adds	r4, r0, #3
 8002ae8:	f024 0403 	bic.w	r4, r4, #3
 8002aec:	42a0      	cmp	r0, r4
 8002aee:	d005      	beq.n	8002afc <_malloc_r+0xac>
 8002af0:	1a21      	subs	r1, r4, r0
 8002af2:	4630      	mov	r0, r6
 8002af4:	f000 f822 	bl	8002b3c <_sbrk_r>
 8002af8:	3001      	adds	r0, #1
 8002afa:	d0cd      	beq.n	8002a98 <_malloc_r+0x48>
 8002afc:	6025      	str	r5, [r4, #0]
 8002afe:	e7d9      	b.n	8002ab4 <_malloc_r+0x64>
 8002b00:	bd70      	pop	{r4, r5, r6, pc}
 8002b02:	bf00      	nop
 8002b04:	2000008c 	.word	0x2000008c
 8002b08:	20000090 	.word	0x20000090

08002b0c <iprintf>:
 8002b0c:	b40f      	push	{r0, r1, r2, r3}
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <iprintf+0x2c>)
 8002b10:	b513      	push	{r0, r1, r4, lr}
 8002b12:	681c      	ldr	r4, [r3, #0]
 8002b14:	b124      	cbz	r4, 8002b20 <iprintf+0x14>
 8002b16:	69a3      	ldr	r3, [r4, #24]
 8002b18:	b913      	cbnz	r3, 8002b20 <iprintf+0x14>
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f000 f9c6 	bl	8002eac <__sinit>
 8002b20:	ab05      	add	r3, sp, #20
 8002b22:	9a04      	ldr	r2, [sp, #16]
 8002b24:	68a1      	ldr	r1, [r4, #8]
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 fae1 	bl	80030f0 <_vfiprintf_r>
 8002b2e:	b002      	add	sp, #8
 8002b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b34:	b004      	add	sp, #16
 8002b36:	4770      	bx	lr
 8002b38:	2000000c 	.word	0x2000000c

08002b3c <_sbrk_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	4c06      	ldr	r4, [pc, #24]	; (8002b58 <_sbrk_r+0x1c>)
 8002b40:	2300      	movs	r3, #0
 8002b42:	4605      	mov	r5, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	6023      	str	r3, [r4, #0]
 8002b48:	f000 ff12 	bl	8003970 <_sbrk>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d102      	bne.n	8002b56 <_sbrk_r+0x1a>
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	b103      	cbz	r3, 8002b56 <_sbrk_r+0x1a>
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
 8002b58:	2000019c 	.word	0x2000019c

08002b5c <setbuf>:
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b62:	bf0c      	ite	eq
 8002b64:	2202      	moveq	r2, #2
 8002b66:	2200      	movne	r2, #0
 8002b68:	f000 b800 	b.w	8002b6c <setvbuf>

08002b6c <setvbuf>:
 8002b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b70:	461d      	mov	r5, r3
 8002b72:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <setvbuf+0x14c>)
 8002b74:	681e      	ldr	r6, [r3, #0]
 8002b76:	4604      	mov	r4, r0
 8002b78:	460f      	mov	r7, r1
 8002b7a:	4690      	mov	r8, r2
 8002b7c:	b126      	cbz	r6, 8002b88 <setvbuf+0x1c>
 8002b7e:	69b3      	ldr	r3, [r6, #24]
 8002b80:	b913      	cbnz	r3, 8002b88 <setvbuf+0x1c>
 8002b82:	4630      	mov	r0, r6
 8002b84:	f000 f992 	bl	8002eac <__sinit>
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <setvbuf+0x150>)
 8002b8a:	429c      	cmp	r4, r3
 8002b8c:	d152      	bne.n	8002c34 <setvbuf+0xc8>
 8002b8e:	6874      	ldr	r4, [r6, #4]
 8002b90:	f1b8 0f02 	cmp.w	r8, #2
 8002b94:	d006      	beq.n	8002ba4 <setvbuf+0x38>
 8002b96:	f1b8 0f01 	cmp.w	r8, #1
 8002b9a:	f200 8089 	bhi.w	8002cb0 <setvbuf+0x144>
 8002b9e:	2d00      	cmp	r5, #0
 8002ba0:	f2c0 8086 	blt.w	8002cb0 <setvbuf+0x144>
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	f000 f916 	bl	8002dd8 <_fflush_r>
 8002bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bae:	b141      	cbz	r1, 8002bc2 <setvbuf+0x56>
 8002bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bb4:	4299      	cmp	r1, r3
 8002bb6:	d002      	beq.n	8002bbe <setvbuf+0x52>
 8002bb8:	4630      	mov	r0, r6
 8002bba:	f7ff fefb 	bl	80029b4 <_free_r>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61a3      	str	r3, [r4, #24]
 8002bc6:	6063      	str	r3, [r4, #4]
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	061b      	lsls	r3, r3, #24
 8002bcc:	d503      	bpl.n	8002bd6 <setvbuf+0x6a>
 8002bce:	6921      	ldr	r1, [r4, #16]
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f7ff feef 	bl	80029b4 <_free_r>
 8002bd6:	89a3      	ldrh	r3, [r4, #12]
 8002bd8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002bdc:	f023 0303 	bic.w	r3, r3, #3
 8002be0:	f1b8 0f02 	cmp.w	r8, #2
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	d05d      	beq.n	8002ca4 <setvbuf+0x138>
 8002be8:	ab01      	add	r3, sp, #4
 8002bea:	466a      	mov	r2, sp
 8002bec:	4621      	mov	r1, r4
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f000 f9e6 	bl	8002fc0 <__swhatbuf_r>
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	4318      	orrs	r0, r3
 8002bf8:	81a0      	strh	r0, [r4, #12]
 8002bfa:	bb2d      	cbnz	r5, 8002c48 <setvbuf+0xdc>
 8002bfc:	9d00      	ldr	r5, [sp, #0]
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f7ff fec8 	bl	8002994 <malloc>
 8002c04:	4607      	mov	r7, r0
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d14e      	bne.n	8002ca8 <setvbuf+0x13c>
 8002c0a:	f8dd 9000 	ldr.w	r9, [sp]
 8002c0e:	45a9      	cmp	r9, r5
 8002c10:	d13c      	bne.n	8002c8c <setvbuf+0x120>
 8002c12:	f04f 30ff 	mov.w	r0, #4294967295
 8002c16:	89a3      	ldrh	r3, [r4, #12]
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60a3      	str	r3, [r4, #8]
 8002c22:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	6123      	str	r3, [r4, #16]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	6163      	str	r3, [r4, #20]
 8002c2e:	b003      	add	sp, #12
 8002c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c34:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <setvbuf+0x154>)
 8002c36:	429c      	cmp	r4, r3
 8002c38:	d101      	bne.n	8002c3e <setvbuf+0xd2>
 8002c3a:	68b4      	ldr	r4, [r6, #8]
 8002c3c:	e7a8      	b.n	8002b90 <setvbuf+0x24>
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <setvbuf+0x158>)
 8002c40:	429c      	cmp	r4, r3
 8002c42:	bf08      	it	eq
 8002c44:	68f4      	ldreq	r4, [r6, #12]
 8002c46:	e7a3      	b.n	8002b90 <setvbuf+0x24>
 8002c48:	2f00      	cmp	r7, #0
 8002c4a:	d0d8      	beq.n	8002bfe <setvbuf+0x92>
 8002c4c:	69b3      	ldr	r3, [r6, #24]
 8002c4e:	b913      	cbnz	r3, 8002c56 <setvbuf+0xea>
 8002c50:	4630      	mov	r0, r6
 8002c52:	f000 f92b 	bl	8002eac <__sinit>
 8002c56:	f1b8 0f01 	cmp.w	r8, #1
 8002c5a:	bf08      	it	eq
 8002c5c:	89a3      	ldrheq	r3, [r4, #12]
 8002c5e:	6027      	str	r7, [r4, #0]
 8002c60:	bf04      	itt	eq
 8002c62:	f043 0301 	orreq.w	r3, r3, #1
 8002c66:	81a3      	strheq	r3, [r4, #12]
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	6127      	str	r7, [r4, #16]
 8002c6c:	f013 0008 	ands.w	r0, r3, #8
 8002c70:	6165      	str	r5, [r4, #20]
 8002c72:	d01b      	beq.n	8002cac <setvbuf+0x140>
 8002c74:	f013 0001 	ands.w	r0, r3, #1
 8002c78:	bf18      	it	ne
 8002c7a:	426d      	negne	r5, r5
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	bf1d      	ittte	ne
 8002c82:	60a3      	strne	r3, [r4, #8]
 8002c84:	61a5      	strne	r5, [r4, #24]
 8002c86:	4618      	movne	r0, r3
 8002c88:	60a5      	streq	r5, [r4, #8]
 8002c8a:	e7d0      	b.n	8002c2e <setvbuf+0xc2>
 8002c8c:	4648      	mov	r0, r9
 8002c8e:	f7ff fe81 	bl	8002994 <malloc>
 8002c92:	4607      	mov	r7, r0
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d0bc      	beq.n	8002c12 <setvbuf+0xa6>
 8002c98:	89a3      	ldrh	r3, [r4, #12]
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9e:	81a3      	strh	r3, [r4, #12]
 8002ca0:	464d      	mov	r5, r9
 8002ca2:	e7d3      	b.n	8002c4c <setvbuf+0xe0>
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e7b6      	b.n	8002c16 <setvbuf+0xaa>
 8002ca8:	46a9      	mov	r9, r5
 8002caa:	e7f5      	b.n	8002c98 <setvbuf+0x12c>
 8002cac:	60a0      	str	r0, [r4, #8]
 8002cae:	e7be      	b.n	8002c2e <setvbuf+0xc2>
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	e7bb      	b.n	8002c2e <setvbuf+0xc2>
 8002cb6:	bf00      	nop
 8002cb8:	2000000c 	.word	0x2000000c
 8002cbc:	08003b74 	.word	0x08003b74
 8002cc0:	08003b94 	.word	0x08003b94
 8002cc4:	08003b54 	.word	0x08003b54

08002cc8 <__sflush_r>:
 8002cc8:	898a      	ldrh	r2, [r1, #12]
 8002cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cce:	4605      	mov	r5, r0
 8002cd0:	0710      	lsls	r0, r2, #28
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	d45a      	bmi.n	8002d8c <__sflush_r+0xc4>
 8002cd6:	684b      	ldr	r3, [r1, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dc05      	bgt.n	8002ce8 <__sflush_r+0x20>
 8002cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	dc02      	bgt.n	8002ce8 <__sflush_r+0x20>
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cea:	2e00      	cmp	r6, #0
 8002cec:	d0f9      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cf4:	682f      	ldr	r7, [r5, #0]
 8002cf6:	602b      	str	r3, [r5, #0]
 8002cf8:	d033      	beq.n	8002d62 <__sflush_r+0x9a>
 8002cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cfc:	89a3      	ldrh	r3, [r4, #12]
 8002cfe:	075a      	lsls	r2, r3, #29
 8002d00:	d505      	bpl.n	8002d0e <__sflush_r+0x46>
 8002d02:	6863      	ldr	r3, [r4, #4]
 8002d04:	1ac0      	subs	r0, r0, r3
 8002d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d08:	b10b      	cbz	r3, 8002d0e <__sflush_r+0x46>
 8002d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d0c:	1ac0      	subs	r0, r0, r3
 8002d0e:	2300      	movs	r3, #0
 8002d10:	4602      	mov	r2, r0
 8002d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d14:	6a21      	ldr	r1, [r4, #32]
 8002d16:	4628      	mov	r0, r5
 8002d18:	47b0      	blx	r6
 8002d1a:	1c43      	adds	r3, r0, #1
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	d106      	bne.n	8002d2e <__sflush_r+0x66>
 8002d20:	6829      	ldr	r1, [r5, #0]
 8002d22:	291d      	cmp	r1, #29
 8002d24:	d84b      	bhi.n	8002dbe <__sflush_r+0xf6>
 8002d26:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <__sflush_r+0x10c>)
 8002d28:	40ca      	lsrs	r2, r1
 8002d2a:	07d6      	lsls	r6, r2, #31
 8002d2c:	d547      	bpl.n	8002dbe <__sflush_r+0xf6>
 8002d2e:	2200      	movs	r2, #0
 8002d30:	6062      	str	r2, [r4, #4]
 8002d32:	04d9      	lsls	r1, r3, #19
 8002d34:	6922      	ldr	r2, [r4, #16]
 8002d36:	6022      	str	r2, [r4, #0]
 8002d38:	d504      	bpl.n	8002d44 <__sflush_r+0x7c>
 8002d3a:	1c42      	adds	r2, r0, #1
 8002d3c:	d101      	bne.n	8002d42 <__sflush_r+0x7a>
 8002d3e:	682b      	ldr	r3, [r5, #0]
 8002d40:	b903      	cbnz	r3, 8002d44 <__sflush_r+0x7c>
 8002d42:	6560      	str	r0, [r4, #84]	; 0x54
 8002d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d46:	602f      	str	r7, [r5, #0]
 8002d48:	2900      	cmp	r1, #0
 8002d4a:	d0ca      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d50:	4299      	cmp	r1, r3
 8002d52:	d002      	beq.n	8002d5a <__sflush_r+0x92>
 8002d54:	4628      	mov	r0, r5
 8002d56:	f7ff fe2d 	bl	80029b4 <_free_r>
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8002d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d62:	6a21      	ldr	r1, [r4, #32]
 8002d64:	2301      	movs	r3, #1
 8002d66:	4628      	mov	r0, r5
 8002d68:	47b0      	blx	r6
 8002d6a:	1c41      	adds	r1, r0, #1
 8002d6c:	d1c6      	bne.n	8002cfc <__sflush_r+0x34>
 8002d6e:	682b      	ldr	r3, [r5, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0c3      	beq.n	8002cfc <__sflush_r+0x34>
 8002d74:	2b1d      	cmp	r3, #29
 8002d76:	d001      	beq.n	8002d7c <__sflush_r+0xb4>
 8002d78:	2b16      	cmp	r3, #22
 8002d7a:	d101      	bne.n	8002d80 <__sflush_r+0xb8>
 8002d7c:	602f      	str	r7, [r5, #0]
 8002d7e:	e7b0      	b.n	8002ce2 <__sflush_r+0x1a>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d86:	81a3      	strh	r3, [r4, #12]
 8002d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d8c:	690f      	ldr	r7, [r1, #16]
 8002d8e:	2f00      	cmp	r7, #0
 8002d90:	d0a7      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002d92:	0793      	lsls	r3, r2, #30
 8002d94:	680e      	ldr	r6, [r1, #0]
 8002d96:	bf08      	it	eq
 8002d98:	694b      	ldreq	r3, [r1, #20]
 8002d9a:	600f      	str	r7, [r1, #0]
 8002d9c:	bf18      	it	ne
 8002d9e:	2300      	movne	r3, #0
 8002da0:	eba6 0807 	sub.w	r8, r6, r7
 8002da4:	608b      	str	r3, [r1, #8]
 8002da6:	f1b8 0f00 	cmp.w	r8, #0
 8002daa:	dd9a      	ble.n	8002ce2 <__sflush_r+0x1a>
 8002dac:	4643      	mov	r3, r8
 8002dae:	463a      	mov	r2, r7
 8002db0:	6a21      	ldr	r1, [r4, #32]
 8002db2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002db4:	4628      	mov	r0, r5
 8002db6:	47b0      	blx	r6
 8002db8:	2800      	cmp	r0, #0
 8002dba:	dc07      	bgt.n	8002dcc <__sflush_r+0x104>
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc2:	81a3      	strh	r3, [r4, #12]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dcc:	4407      	add	r7, r0
 8002dce:	eba8 0800 	sub.w	r8, r8, r0
 8002dd2:	e7e8      	b.n	8002da6 <__sflush_r+0xde>
 8002dd4:	20400001 	.word	0x20400001

08002dd8 <_fflush_r>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	690b      	ldr	r3, [r1, #16]
 8002ddc:	4605      	mov	r5, r0
 8002dde:	460c      	mov	r4, r1
 8002de0:	b1db      	cbz	r3, 8002e1a <_fflush_r+0x42>
 8002de2:	b118      	cbz	r0, 8002dec <_fflush_r+0x14>
 8002de4:	6983      	ldr	r3, [r0, #24]
 8002de6:	b90b      	cbnz	r3, 8002dec <_fflush_r+0x14>
 8002de8:	f000 f860 	bl	8002eac <__sinit>
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <_fflush_r+0x48>)
 8002dee:	429c      	cmp	r4, r3
 8002df0:	d109      	bne.n	8002e06 <_fflush_r+0x2e>
 8002df2:	686c      	ldr	r4, [r5, #4]
 8002df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002df8:	b17b      	cbz	r3, 8002e1a <_fflush_r+0x42>
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e02:	f7ff bf61 	b.w	8002cc8 <__sflush_r>
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <_fflush_r+0x4c>)
 8002e08:	429c      	cmp	r4, r3
 8002e0a:	d101      	bne.n	8002e10 <_fflush_r+0x38>
 8002e0c:	68ac      	ldr	r4, [r5, #8]
 8002e0e:	e7f1      	b.n	8002df4 <_fflush_r+0x1c>
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <_fflush_r+0x50>)
 8002e12:	429c      	cmp	r4, r3
 8002e14:	bf08      	it	eq
 8002e16:	68ec      	ldreq	r4, [r5, #12]
 8002e18:	e7ec      	b.n	8002df4 <_fflush_r+0x1c>
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	bd38      	pop	{r3, r4, r5, pc}
 8002e1e:	bf00      	nop
 8002e20:	08003b74 	.word	0x08003b74
 8002e24:	08003b94 	.word	0x08003b94
 8002e28:	08003b54 	.word	0x08003b54

08002e2c <_cleanup_r>:
 8002e2c:	4901      	ldr	r1, [pc, #4]	; (8002e34 <_cleanup_r+0x8>)
 8002e2e:	f000 b8a9 	b.w	8002f84 <_fwalk_reent>
 8002e32:	bf00      	nop
 8002e34:	08002dd9 	.word	0x08002dd9

08002e38 <std.isra.0>:
 8002e38:	2300      	movs	r3, #0
 8002e3a:	b510      	push	{r4, lr}
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	6003      	str	r3, [r0, #0]
 8002e40:	6043      	str	r3, [r0, #4]
 8002e42:	6083      	str	r3, [r0, #8]
 8002e44:	8181      	strh	r1, [r0, #12]
 8002e46:	6643      	str	r3, [r0, #100]	; 0x64
 8002e48:	81c2      	strh	r2, [r0, #14]
 8002e4a:	6103      	str	r3, [r0, #16]
 8002e4c:	6143      	str	r3, [r0, #20]
 8002e4e:	6183      	str	r3, [r0, #24]
 8002e50:	4619      	mov	r1, r3
 8002e52:	2208      	movs	r2, #8
 8002e54:	305c      	adds	r0, #92	; 0x5c
 8002e56:	f000 f917 	bl	8003088 <memset>
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <std.isra.0+0x38>)
 8002e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <std.isra.0+0x3c>)
 8002e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <std.isra.0+0x40>)
 8002e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <std.isra.0+0x44>)
 8002e68:	6224      	str	r4, [r4, #32]
 8002e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8002e6c:	bd10      	pop	{r4, pc}
 8002e6e:	bf00      	nop
 8002e70:	08003649 	.word	0x08003649
 8002e74:	0800366b 	.word	0x0800366b
 8002e78:	080036a3 	.word	0x080036a3
 8002e7c:	080036c7 	.word	0x080036c7

08002e80 <__sfmoreglue>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	1e4a      	subs	r2, r1, #1
 8002e84:	2568      	movs	r5, #104	; 0x68
 8002e86:	4355      	muls	r5, r2
 8002e88:	460e      	mov	r6, r1
 8002e8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e8e:	f7ff fddf 	bl	8002a50 <_malloc_r>
 8002e92:	4604      	mov	r4, r0
 8002e94:	b140      	cbz	r0, 8002ea8 <__sfmoreglue+0x28>
 8002e96:	2100      	movs	r1, #0
 8002e98:	e880 0042 	stmia.w	r0, {r1, r6}
 8002e9c:	300c      	adds	r0, #12
 8002e9e:	60a0      	str	r0, [r4, #8]
 8002ea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ea4:	f000 f8f0 	bl	8003088 <memset>
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}

08002eac <__sinit>:
 8002eac:	6983      	ldr	r3, [r0, #24]
 8002eae:	b510      	push	{r4, lr}
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	bb33      	cbnz	r3, 8002f02 <__sinit+0x56>
 8002eb4:	6483      	str	r3, [r0, #72]	; 0x48
 8002eb6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002eb8:	6503      	str	r3, [r0, #80]	; 0x50
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <__sinit+0x58>)
 8002ebc:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <__sinit+0x5c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6282      	str	r2, [r0, #40]	; 0x28
 8002ec2:	4298      	cmp	r0, r3
 8002ec4:	bf04      	itt	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	6183      	streq	r3, [r0, #24]
 8002eca:	f000 f81f 	bl	8002f0c <__sfp>
 8002ece:	6060      	str	r0, [r4, #4]
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f000 f81b 	bl	8002f0c <__sfp>
 8002ed6:	60a0      	str	r0, [r4, #8]
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f000 f817 	bl	8002f0c <__sfp>
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60e0      	str	r0, [r4, #12]
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	6860      	ldr	r0, [r4, #4]
 8002ee6:	f7ff ffa7 	bl	8002e38 <std.isra.0>
 8002eea:	2201      	movs	r2, #1
 8002eec:	2109      	movs	r1, #9
 8002eee:	68a0      	ldr	r0, [r4, #8]
 8002ef0:	f7ff ffa2 	bl	8002e38 <std.isra.0>
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	2112      	movs	r1, #18
 8002ef8:	68e0      	ldr	r0, [r4, #12]
 8002efa:	f7ff ff9d 	bl	8002e38 <std.isra.0>
 8002efe:	2301      	movs	r3, #1
 8002f00:	61a3      	str	r3, [r4, #24]
 8002f02:	bd10      	pop	{r4, pc}
 8002f04:	08003b50 	.word	0x08003b50
 8002f08:	08002e2d 	.word	0x08002e2d

08002f0c <__sfp>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <__sfp+0x74>)
 8002f10:	681e      	ldr	r6, [r3, #0]
 8002f12:	69b3      	ldr	r3, [r6, #24]
 8002f14:	4607      	mov	r7, r0
 8002f16:	b913      	cbnz	r3, 8002f1e <__sfp+0x12>
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f7ff ffc7 	bl	8002eac <__sinit>
 8002f1e:	3648      	adds	r6, #72	; 0x48
 8002f20:	68b4      	ldr	r4, [r6, #8]
 8002f22:	6873      	ldr	r3, [r6, #4]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	d503      	bpl.n	8002f30 <__sfp+0x24>
 8002f28:	6833      	ldr	r3, [r6, #0]
 8002f2a:	b133      	cbz	r3, 8002f3a <__sfp+0x2e>
 8002f2c:	6836      	ldr	r6, [r6, #0]
 8002f2e:	e7f7      	b.n	8002f20 <__sfp+0x14>
 8002f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f34:	b16d      	cbz	r5, 8002f52 <__sfp+0x46>
 8002f36:	3468      	adds	r4, #104	; 0x68
 8002f38:	e7f4      	b.n	8002f24 <__sfp+0x18>
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	f7ff ff9f 	bl	8002e80 <__sfmoreglue>
 8002f42:	6030      	str	r0, [r6, #0]
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d1f1      	bne.n	8002f2c <__sfp+0x20>
 8002f48:	230c      	movs	r3, #12
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	4620      	mov	r0, r4
 8002f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f56:	81e3      	strh	r3, [r4, #14]
 8002f58:	2301      	movs	r3, #1
 8002f5a:	81a3      	strh	r3, [r4, #12]
 8002f5c:	6665      	str	r5, [r4, #100]	; 0x64
 8002f5e:	6025      	str	r5, [r4, #0]
 8002f60:	60a5      	str	r5, [r4, #8]
 8002f62:	6065      	str	r5, [r4, #4]
 8002f64:	6125      	str	r5, [r4, #16]
 8002f66:	6165      	str	r5, [r4, #20]
 8002f68:	61a5      	str	r5, [r4, #24]
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f72:	f000 f889 	bl	8003088 <memset>
 8002f76:	6365      	str	r5, [r4, #52]	; 0x34
 8002f78:	63a5      	str	r5, [r4, #56]	; 0x38
 8002f7a:	64a5      	str	r5, [r4, #72]	; 0x48
 8002f7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002f7e:	e7e6      	b.n	8002f4e <__sfp+0x42>
 8002f80:	08003b50 	.word	0x08003b50

08002f84 <_fwalk_reent>:
 8002f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f88:	4680      	mov	r8, r0
 8002f8a:	4689      	mov	r9, r1
 8002f8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f90:	2600      	movs	r6, #0
 8002f92:	b914      	cbnz	r4, 8002f9a <_fwalk_reent+0x16>
 8002f94:	4630      	mov	r0, r6
 8002f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f9a:	68a5      	ldr	r5, [r4, #8]
 8002f9c:	6867      	ldr	r7, [r4, #4]
 8002f9e:	3f01      	subs	r7, #1
 8002fa0:	d501      	bpl.n	8002fa6 <_fwalk_reent+0x22>
 8002fa2:	6824      	ldr	r4, [r4, #0]
 8002fa4:	e7f5      	b.n	8002f92 <_fwalk_reent+0xe>
 8002fa6:	89ab      	ldrh	r3, [r5, #12]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d907      	bls.n	8002fbc <_fwalk_reent+0x38>
 8002fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	d003      	beq.n	8002fbc <_fwalk_reent+0x38>
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	47c8      	blx	r9
 8002fba:	4306      	orrs	r6, r0
 8002fbc:	3568      	adds	r5, #104	; 0x68
 8002fbe:	e7ee      	b.n	8002f9e <_fwalk_reent+0x1a>

08002fc0 <__swhatbuf_r>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	460e      	mov	r6, r1
 8002fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc8:	2900      	cmp	r1, #0
 8002fca:	b090      	sub	sp, #64	; 0x40
 8002fcc:	4614      	mov	r4, r2
 8002fce:	461d      	mov	r5, r3
 8002fd0:	da07      	bge.n	8002fe2 <__swhatbuf_r+0x22>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	602b      	str	r3, [r5, #0]
 8002fd6:	89b3      	ldrh	r3, [r6, #12]
 8002fd8:	061a      	lsls	r2, r3, #24
 8002fda:	d410      	bmi.n	8002ffe <__swhatbuf_r+0x3e>
 8002fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe0:	e00e      	b.n	8003000 <__swhatbuf_r+0x40>
 8002fe2:	aa01      	add	r2, sp, #4
 8002fe4:	f000 fc56 	bl	8003894 <_fstat_r>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	dbf2      	blt.n	8002fd2 <__swhatbuf_r+0x12>
 8002fec:	9a02      	ldr	r2, [sp, #8]
 8002fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ff6:	425a      	negs	r2, r3
 8002ff8:	415a      	adcs	r2, r3
 8002ffa:	602a      	str	r2, [r5, #0]
 8002ffc:	e7ee      	b.n	8002fdc <__swhatbuf_r+0x1c>
 8002ffe:	2340      	movs	r3, #64	; 0x40
 8003000:	2000      	movs	r0, #0
 8003002:	6023      	str	r3, [r4, #0]
 8003004:	b010      	add	sp, #64	; 0x40
 8003006:	bd70      	pop	{r4, r5, r6, pc}

08003008 <__smakebuf_r>:
 8003008:	898b      	ldrh	r3, [r1, #12]
 800300a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800300c:	079d      	lsls	r5, r3, #30
 800300e:	4606      	mov	r6, r0
 8003010:	460c      	mov	r4, r1
 8003012:	d507      	bpl.n	8003024 <__smakebuf_r+0x1c>
 8003014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	6123      	str	r3, [r4, #16]
 800301c:	2301      	movs	r3, #1
 800301e:	6163      	str	r3, [r4, #20]
 8003020:	b002      	add	sp, #8
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	ab01      	add	r3, sp, #4
 8003026:	466a      	mov	r2, sp
 8003028:	f7ff ffca 	bl	8002fc0 <__swhatbuf_r>
 800302c:	9900      	ldr	r1, [sp, #0]
 800302e:	4605      	mov	r5, r0
 8003030:	4630      	mov	r0, r6
 8003032:	f7ff fd0d 	bl	8002a50 <_malloc_r>
 8003036:	b948      	cbnz	r0, 800304c <__smakebuf_r+0x44>
 8003038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800303c:	059a      	lsls	r2, r3, #22
 800303e:	d4ef      	bmi.n	8003020 <__smakebuf_r+0x18>
 8003040:	f023 0303 	bic.w	r3, r3, #3
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	81a3      	strh	r3, [r4, #12]
 800304a:	e7e3      	b.n	8003014 <__smakebuf_r+0xc>
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <__smakebuf_r+0x7c>)
 800304e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	6020      	str	r0, [r4, #0]
 8003054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	9b00      	ldr	r3, [sp, #0]
 800305c:	6163      	str	r3, [r4, #20]
 800305e:	9b01      	ldr	r3, [sp, #4]
 8003060:	6120      	str	r0, [r4, #16]
 8003062:	b15b      	cbz	r3, 800307c <__smakebuf_r+0x74>
 8003064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003068:	4630      	mov	r0, r6
 800306a:	f000 fc25 	bl	80038b8 <_isatty_r>
 800306e:	b128      	cbz	r0, 800307c <__smakebuf_r+0x74>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	431d      	orrs	r5, r3
 8003080:	81a5      	strh	r5, [r4, #12]
 8003082:	e7cd      	b.n	8003020 <__smakebuf_r+0x18>
 8003084:	08002e2d 	.word	0x08002e2d

08003088 <memset>:
 8003088:	4402      	add	r2, r0
 800308a:	4603      	mov	r3, r0
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	f803 1b01 	strb.w	r1, [r3], #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <__malloc_lock>:
 8003098:	4770      	bx	lr

0800309a <__malloc_unlock>:
 800309a:	4770      	bx	lr

0800309c <__sfputc_r>:
 800309c:	6893      	ldr	r3, [r2, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	b410      	push	{r4}
 80030a4:	6093      	str	r3, [r2, #8]
 80030a6:	da09      	bge.n	80030bc <__sfputc_r+0x20>
 80030a8:	6994      	ldr	r4, [r2, #24]
 80030aa:	42a3      	cmp	r3, r4
 80030ac:	db02      	blt.n	80030b4 <__sfputc_r+0x18>
 80030ae:	b2cb      	uxtb	r3, r1
 80030b0:	2b0a      	cmp	r3, #10
 80030b2:	d103      	bne.n	80030bc <__sfputc_r+0x20>
 80030b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030b8:	f000 bb0a 	b.w	80036d0 <__swbuf_r>
 80030bc:	6813      	ldr	r3, [r2, #0]
 80030be:	1c58      	adds	r0, r3, #1
 80030c0:	6010      	str	r0, [r2, #0]
 80030c2:	7019      	strb	r1, [r3, #0]
 80030c4:	b2c8      	uxtb	r0, r1
 80030c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <__sfputs_r>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	4606      	mov	r6, r0
 80030d0:	460f      	mov	r7, r1
 80030d2:	4614      	mov	r4, r2
 80030d4:	18d5      	adds	r5, r2, r3
 80030d6:	42ac      	cmp	r4, r5
 80030d8:	d101      	bne.n	80030de <__sfputs_r+0x12>
 80030da:	2000      	movs	r0, #0
 80030dc:	e007      	b.n	80030ee <__sfputs_r+0x22>
 80030de:	463a      	mov	r2, r7
 80030e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7ff ffd9 	bl	800309c <__sfputc_r>
 80030ea:	1c43      	adds	r3, r0, #1
 80030ec:	d1f3      	bne.n	80030d6 <__sfputs_r+0xa>
 80030ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030f0 <_vfiprintf_r>:
 80030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f4:	b09d      	sub	sp, #116	; 0x74
 80030f6:	460c      	mov	r4, r1
 80030f8:	4617      	mov	r7, r2
 80030fa:	9303      	str	r3, [sp, #12]
 80030fc:	4606      	mov	r6, r0
 80030fe:	b118      	cbz	r0, 8003108 <_vfiprintf_r+0x18>
 8003100:	6983      	ldr	r3, [r0, #24]
 8003102:	b90b      	cbnz	r3, 8003108 <_vfiprintf_r+0x18>
 8003104:	f7ff fed2 	bl	8002eac <__sinit>
 8003108:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <_vfiprintf_r+0x20c>)
 800310a:	429c      	cmp	r4, r3
 800310c:	d157      	bne.n	80031be <_vfiprintf_r+0xce>
 800310e:	6874      	ldr	r4, [r6, #4]
 8003110:	89a3      	ldrh	r3, [r4, #12]
 8003112:	0718      	lsls	r0, r3, #28
 8003114:	d55d      	bpl.n	80031d2 <_vfiprintf_r+0xe2>
 8003116:	6923      	ldr	r3, [r4, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05a      	beq.n	80031d2 <_vfiprintf_r+0xe2>
 800311c:	2300      	movs	r3, #0
 800311e:	9309      	str	r3, [sp, #36]	; 0x24
 8003120:	2320      	movs	r3, #32
 8003122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003126:	2330      	movs	r3, #48	; 0x30
 8003128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800312c:	f04f 0b01 	mov.w	fp, #1
 8003130:	46b8      	mov	r8, r7
 8003132:	4645      	mov	r5, r8
 8003134:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d155      	bne.n	80031e8 <_vfiprintf_r+0xf8>
 800313c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003140:	d00b      	beq.n	800315a <_vfiprintf_r+0x6a>
 8003142:	4653      	mov	r3, sl
 8003144:	463a      	mov	r2, r7
 8003146:	4621      	mov	r1, r4
 8003148:	4630      	mov	r0, r6
 800314a:	f7ff ffbf 	bl	80030cc <__sfputs_r>
 800314e:	3001      	adds	r0, #1
 8003150:	f000 80c4 	beq.w	80032dc <_vfiprintf_r+0x1ec>
 8003154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003156:	4453      	add	r3, sl
 8003158:	9309      	str	r3, [sp, #36]	; 0x24
 800315a:	f898 3000 	ldrb.w	r3, [r8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80bc 	beq.w	80032dc <_vfiprintf_r+0x1ec>
 8003164:	2300      	movs	r3, #0
 8003166:	f04f 32ff 	mov.w	r2, #4294967295
 800316a:	9304      	str	r3, [sp, #16]
 800316c:	9307      	str	r3, [sp, #28]
 800316e:	9205      	str	r2, [sp, #20]
 8003170:	9306      	str	r3, [sp, #24]
 8003172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003176:	931a      	str	r3, [sp, #104]	; 0x68
 8003178:	2205      	movs	r2, #5
 800317a:	7829      	ldrb	r1, [r5, #0]
 800317c:	4860      	ldr	r0, [pc, #384]	; (8003300 <_vfiprintf_r+0x210>)
 800317e:	f7fd f85f 	bl	8000240 <memchr>
 8003182:	f105 0801 	add.w	r8, r5, #1
 8003186:	9b04      	ldr	r3, [sp, #16]
 8003188:	2800      	cmp	r0, #0
 800318a:	d131      	bne.n	80031f0 <_vfiprintf_r+0x100>
 800318c:	06d9      	lsls	r1, r3, #27
 800318e:	bf44      	itt	mi
 8003190:	2220      	movmi	r2, #32
 8003192:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003196:	071a      	lsls	r2, r3, #28
 8003198:	bf44      	itt	mi
 800319a:	222b      	movmi	r2, #43	; 0x2b
 800319c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031a0:	782a      	ldrb	r2, [r5, #0]
 80031a2:	2a2a      	cmp	r2, #42	; 0x2a
 80031a4:	d02c      	beq.n	8003200 <_vfiprintf_r+0x110>
 80031a6:	9a07      	ldr	r2, [sp, #28]
 80031a8:	2100      	movs	r1, #0
 80031aa:	200a      	movs	r0, #10
 80031ac:	46a8      	mov	r8, r5
 80031ae:	3501      	adds	r5, #1
 80031b0:	f898 3000 	ldrb.w	r3, [r8]
 80031b4:	3b30      	subs	r3, #48	; 0x30
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	d96d      	bls.n	8003296 <_vfiprintf_r+0x1a6>
 80031ba:	b371      	cbz	r1, 800321a <_vfiprintf_r+0x12a>
 80031bc:	e026      	b.n	800320c <_vfiprintf_r+0x11c>
 80031be:	4b51      	ldr	r3, [pc, #324]	; (8003304 <_vfiprintf_r+0x214>)
 80031c0:	429c      	cmp	r4, r3
 80031c2:	d101      	bne.n	80031c8 <_vfiprintf_r+0xd8>
 80031c4:	68b4      	ldr	r4, [r6, #8]
 80031c6:	e7a3      	b.n	8003110 <_vfiprintf_r+0x20>
 80031c8:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <_vfiprintf_r+0x218>)
 80031ca:	429c      	cmp	r4, r3
 80031cc:	bf08      	it	eq
 80031ce:	68f4      	ldreq	r4, [r6, #12]
 80031d0:	e79e      	b.n	8003110 <_vfiprintf_r+0x20>
 80031d2:	4621      	mov	r1, r4
 80031d4:	4630      	mov	r0, r6
 80031d6:	f000 fadf 	bl	8003798 <__swsetup_r>
 80031da:	2800      	cmp	r0, #0
 80031dc:	d09e      	beq.n	800311c <_vfiprintf_r+0x2c>
 80031de:	f04f 30ff 	mov.w	r0, #4294967295
 80031e2:	b01d      	add	sp, #116	; 0x74
 80031e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031e8:	2b25      	cmp	r3, #37	; 0x25
 80031ea:	d0a7      	beq.n	800313c <_vfiprintf_r+0x4c>
 80031ec:	46a8      	mov	r8, r5
 80031ee:	e7a0      	b.n	8003132 <_vfiprintf_r+0x42>
 80031f0:	4a43      	ldr	r2, [pc, #268]	; (8003300 <_vfiprintf_r+0x210>)
 80031f2:	1a80      	subs	r0, r0, r2
 80031f4:	fa0b f000 	lsl.w	r0, fp, r0
 80031f8:	4318      	orrs	r0, r3
 80031fa:	9004      	str	r0, [sp, #16]
 80031fc:	4645      	mov	r5, r8
 80031fe:	e7bb      	b.n	8003178 <_vfiprintf_r+0x88>
 8003200:	9a03      	ldr	r2, [sp, #12]
 8003202:	1d11      	adds	r1, r2, #4
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	9103      	str	r1, [sp, #12]
 8003208:	2a00      	cmp	r2, #0
 800320a:	db01      	blt.n	8003210 <_vfiprintf_r+0x120>
 800320c:	9207      	str	r2, [sp, #28]
 800320e:	e004      	b.n	800321a <_vfiprintf_r+0x12a>
 8003210:	4252      	negs	r2, r2
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	9207      	str	r2, [sp, #28]
 8003218:	9304      	str	r3, [sp, #16]
 800321a:	f898 3000 	ldrb.w	r3, [r8]
 800321e:	2b2e      	cmp	r3, #46	; 0x2e
 8003220:	d110      	bne.n	8003244 <_vfiprintf_r+0x154>
 8003222:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003226:	2b2a      	cmp	r3, #42	; 0x2a
 8003228:	f108 0101 	add.w	r1, r8, #1
 800322c:	d137      	bne.n	800329e <_vfiprintf_r+0x1ae>
 800322e:	9b03      	ldr	r3, [sp, #12]
 8003230:	1d1a      	adds	r2, r3, #4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	9203      	str	r2, [sp, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	bfb8      	it	lt
 800323a:	f04f 33ff 	movlt.w	r3, #4294967295
 800323e:	f108 0802 	add.w	r8, r8, #2
 8003242:	9305      	str	r3, [sp, #20]
 8003244:	4d31      	ldr	r5, [pc, #196]	; (800330c <_vfiprintf_r+0x21c>)
 8003246:	f898 1000 	ldrb.w	r1, [r8]
 800324a:	2203      	movs	r2, #3
 800324c:	4628      	mov	r0, r5
 800324e:	f7fc fff7 	bl	8000240 <memchr>
 8003252:	b140      	cbz	r0, 8003266 <_vfiprintf_r+0x176>
 8003254:	2340      	movs	r3, #64	; 0x40
 8003256:	1b40      	subs	r0, r0, r5
 8003258:	fa03 f000 	lsl.w	r0, r3, r0
 800325c:	9b04      	ldr	r3, [sp, #16]
 800325e:	4303      	orrs	r3, r0
 8003260:	9304      	str	r3, [sp, #16]
 8003262:	f108 0801 	add.w	r8, r8, #1
 8003266:	f898 1000 	ldrb.w	r1, [r8]
 800326a:	4829      	ldr	r0, [pc, #164]	; (8003310 <_vfiprintf_r+0x220>)
 800326c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003270:	2206      	movs	r2, #6
 8003272:	f108 0701 	add.w	r7, r8, #1
 8003276:	f7fc ffe3 	bl	8000240 <memchr>
 800327a:	2800      	cmp	r0, #0
 800327c:	d034      	beq.n	80032e8 <_vfiprintf_r+0x1f8>
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <_vfiprintf_r+0x224>)
 8003280:	bb03      	cbnz	r3, 80032c4 <_vfiprintf_r+0x1d4>
 8003282:	9b03      	ldr	r3, [sp, #12]
 8003284:	3307      	adds	r3, #7
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	3308      	adds	r3, #8
 800328c:	9303      	str	r3, [sp, #12]
 800328e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003290:	444b      	add	r3, r9
 8003292:	9309      	str	r3, [sp, #36]	; 0x24
 8003294:	e74c      	b.n	8003130 <_vfiprintf_r+0x40>
 8003296:	fb00 3202 	mla	r2, r0, r2, r3
 800329a:	2101      	movs	r1, #1
 800329c:	e786      	b.n	80031ac <_vfiprintf_r+0xbc>
 800329e:	2300      	movs	r3, #0
 80032a0:	9305      	str	r3, [sp, #20]
 80032a2:	4618      	mov	r0, r3
 80032a4:	250a      	movs	r5, #10
 80032a6:	4688      	mov	r8, r1
 80032a8:	3101      	adds	r1, #1
 80032aa:	f898 2000 	ldrb.w	r2, [r8]
 80032ae:	3a30      	subs	r2, #48	; 0x30
 80032b0:	2a09      	cmp	r2, #9
 80032b2:	d903      	bls.n	80032bc <_vfiprintf_r+0x1cc>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0c5      	beq.n	8003244 <_vfiprintf_r+0x154>
 80032b8:	9005      	str	r0, [sp, #20]
 80032ba:	e7c3      	b.n	8003244 <_vfiprintf_r+0x154>
 80032bc:	fb05 2000 	mla	r0, r5, r0, r2
 80032c0:	2301      	movs	r3, #1
 80032c2:	e7f0      	b.n	80032a6 <_vfiprintf_r+0x1b6>
 80032c4:	ab03      	add	r3, sp, #12
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	4622      	mov	r2, r4
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <_vfiprintf_r+0x228>)
 80032cc:	a904      	add	r1, sp, #16
 80032ce:	4630      	mov	r0, r6
 80032d0:	f3af 8000 	nop.w
 80032d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032d8:	4681      	mov	r9, r0
 80032da:	d1d8      	bne.n	800328e <_vfiprintf_r+0x19e>
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	065b      	lsls	r3, r3, #25
 80032e0:	f53f af7d 	bmi.w	80031de <_vfiprintf_r+0xee>
 80032e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032e6:	e77c      	b.n	80031e2 <_vfiprintf_r+0xf2>
 80032e8:	ab03      	add	r3, sp, #12
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4622      	mov	r2, r4
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <_vfiprintf_r+0x228>)
 80032f0:	a904      	add	r1, sp, #16
 80032f2:	4630      	mov	r0, r6
 80032f4:	f000 f888 	bl	8003408 <_printf_i>
 80032f8:	e7ec      	b.n	80032d4 <_vfiprintf_r+0x1e4>
 80032fa:	bf00      	nop
 80032fc:	08003b74 	.word	0x08003b74
 8003300:	08003bb4 	.word	0x08003bb4
 8003304:	08003b94 	.word	0x08003b94
 8003308:	08003b54 	.word	0x08003b54
 800330c:	08003bba 	.word	0x08003bba
 8003310:	08003bbe 	.word	0x08003bbe
 8003314:	00000000 	.word	0x00000000
 8003318:	080030cd 	.word	0x080030cd

0800331c <_printf_common>:
 800331c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003320:	4691      	mov	r9, r2
 8003322:	461f      	mov	r7, r3
 8003324:	688a      	ldr	r2, [r1, #8]
 8003326:	690b      	ldr	r3, [r1, #16]
 8003328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800332c:	4293      	cmp	r3, r2
 800332e:	bfb8      	it	lt
 8003330:	4613      	movlt	r3, r2
 8003332:	f8c9 3000 	str.w	r3, [r9]
 8003336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800333a:	4606      	mov	r6, r0
 800333c:	460c      	mov	r4, r1
 800333e:	b112      	cbz	r2, 8003346 <_printf_common+0x2a>
 8003340:	3301      	adds	r3, #1
 8003342:	f8c9 3000 	str.w	r3, [r9]
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	0699      	lsls	r1, r3, #26
 800334a:	bf42      	ittt	mi
 800334c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003350:	3302      	addmi	r3, #2
 8003352:	f8c9 3000 	strmi.w	r3, [r9]
 8003356:	6825      	ldr	r5, [r4, #0]
 8003358:	f015 0506 	ands.w	r5, r5, #6
 800335c:	d107      	bne.n	800336e <_printf_common+0x52>
 800335e:	f104 0a19 	add.w	sl, r4, #25
 8003362:	68e3      	ldr	r3, [r4, #12]
 8003364:	f8d9 2000 	ldr.w	r2, [r9]
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	429d      	cmp	r5, r3
 800336c:	db29      	blt.n	80033c2 <_printf_common+0xa6>
 800336e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	3300      	adds	r3, #0
 8003376:	bf18      	it	ne
 8003378:	2301      	movne	r3, #1
 800337a:	0692      	lsls	r2, r2, #26
 800337c:	d42e      	bmi.n	80033dc <_printf_common+0xc0>
 800337e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003382:	4639      	mov	r1, r7
 8003384:	4630      	mov	r0, r6
 8003386:	47c0      	blx	r8
 8003388:	3001      	adds	r0, #1
 800338a:	d021      	beq.n	80033d0 <_printf_common+0xb4>
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	68e5      	ldr	r5, [r4, #12]
 8003390:	f8d9 2000 	ldr.w	r2, [r9]
 8003394:	f003 0306 	and.w	r3, r3, #6
 8003398:	2b04      	cmp	r3, #4
 800339a:	bf08      	it	eq
 800339c:	1aad      	subeq	r5, r5, r2
 800339e:	68a3      	ldr	r3, [r4, #8]
 80033a0:	6922      	ldr	r2, [r4, #16]
 80033a2:	bf0c      	ite	eq
 80033a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033a8:	2500      	movne	r5, #0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	bfc4      	itt	gt
 80033ae:	1a9b      	subgt	r3, r3, r2
 80033b0:	18ed      	addgt	r5, r5, r3
 80033b2:	f04f 0900 	mov.w	r9, #0
 80033b6:	341a      	adds	r4, #26
 80033b8:	454d      	cmp	r5, r9
 80033ba:	d11b      	bne.n	80033f4 <_printf_common+0xd8>
 80033bc:	2000      	movs	r0, #0
 80033be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c2:	2301      	movs	r3, #1
 80033c4:	4652      	mov	r2, sl
 80033c6:	4639      	mov	r1, r7
 80033c8:	4630      	mov	r0, r6
 80033ca:	47c0      	blx	r8
 80033cc:	3001      	adds	r0, #1
 80033ce:	d103      	bne.n	80033d8 <_printf_common+0xbc>
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d8:	3501      	adds	r5, #1
 80033da:	e7c2      	b.n	8003362 <_printf_common+0x46>
 80033dc:	18e1      	adds	r1, r4, r3
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	2030      	movs	r0, #48	; 0x30
 80033e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033e6:	4422      	add	r2, r4
 80033e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033f0:	3302      	adds	r3, #2
 80033f2:	e7c4      	b.n	800337e <_printf_common+0x62>
 80033f4:	2301      	movs	r3, #1
 80033f6:	4622      	mov	r2, r4
 80033f8:	4639      	mov	r1, r7
 80033fa:	4630      	mov	r0, r6
 80033fc:	47c0      	blx	r8
 80033fe:	3001      	adds	r0, #1
 8003400:	d0e6      	beq.n	80033d0 <_printf_common+0xb4>
 8003402:	f109 0901 	add.w	r9, r9, #1
 8003406:	e7d7      	b.n	80033b8 <_printf_common+0x9c>

08003408 <_printf_i>:
 8003408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800340c:	4617      	mov	r7, r2
 800340e:	7e0a      	ldrb	r2, [r1, #24]
 8003410:	b085      	sub	sp, #20
 8003412:	2a6e      	cmp	r2, #110	; 0x6e
 8003414:	4698      	mov	r8, r3
 8003416:	4606      	mov	r6, r0
 8003418:	460c      	mov	r4, r1
 800341a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800341c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003420:	f000 80bc 	beq.w	800359c <_printf_i+0x194>
 8003424:	d81a      	bhi.n	800345c <_printf_i+0x54>
 8003426:	2a63      	cmp	r2, #99	; 0x63
 8003428:	d02e      	beq.n	8003488 <_printf_i+0x80>
 800342a:	d80a      	bhi.n	8003442 <_printf_i+0x3a>
 800342c:	2a00      	cmp	r2, #0
 800342e:	f000 80c8 	beq.w	80035c2 <_printf_i+0x1ba>
 8003432:	2a58      	cmp	r2, #88	; 0x58
 8003434:	f000 808a 	beq.w	800354c <_printf_i+0x144>
 8003438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800343c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003440:	e02a      	b.n	8003498 <_printf_i+0x90>
 8003442:	2a64      	cmp	r2, #100	; 0x64
 8003444:	d001      	beq.n	800344a <_printf_i+0x42>
 8003446:	2a69      	cmp	r2, #105	; 0x69
 8003448:	d1f6      	bne.n	8003438 <_printf_i+0x30>
 800344a:	6821      	ldr	r1, [r4, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003452:	d023      	beq.n	800349c <_printf_i+0x94>
 8003454:	1d11      	adds	r1, r2, #4
 8003456:	6019      	str	r1, [r3, #0]
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	e027      	b.n	80034ac <_printf_i+0xa4>
 800345c:	2a73      	cmp	r2, #115	; 0x73
 800345e:	f000 80b4 	beq.w	80035ca <_printf_i+0x1c2>
 8003462:	d808      	bhi.n	8003476 <_printf_i+0x6e>
 8003464:	2a6f      	cmp	r2, #111	; 0x6f
 8003466:	d02a      	beq.n	80034be <_printf_i+0xb6>
 8003468:	2a70      	cmp	r2, #112	; 0x70
 800346a:	d1e5      	bne.n	8003438 <_printf_i+0x30>
 800346c:	680a      	ldr	r2, [r1, #0]
 800346e:	f042 0220 	orr.w	r2, r2, #32
 8003472:	600a      	str	r2, [r1, #0]
 8003474:	e003      	b.n	800347e <_printf_i+0x76>
 8003476:	2a75      	cmp	r2, #117	; 0x75
 8003478:	d021      	beq.n	80034be <_printf_i+0xb6>
 800347a:	2a78      	cmp	r2, #120	; 0x78
 800347c:	d1dc      	bne.n	8003438 <_printf_i+0x30>
 800347e:	2278      	movs	r2, #120	; 0x78
 8003480:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003484:	496e      	ldr	r1, [pc, #440]	; (8003640 <_printf_i+0x238>)
 8003486:	e064      	b.n	8003552 <_printf_i+0x14a>
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800348e:	1d11      	adds	r1, r2, #4
 8003490:	6019      	str	r1, [r3, #0]
 8003492:	6813      	ldr	r3, [r2, #0]
 8003494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003498:	2301      	movs	r3, #1
 800349a:	e0a3      	b.n	80035e4 <_printf_i+0x1dc>
 800349c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80034a0:	f102 0104 	add.w	r1, r2, #4
 80034a4:	6019      	str	r1, [r3, #0]
 80034a6:	d0d7      	beq.n	8003458 <_printf_i+0x50>
 80034a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	da03      	bge.n	80034b8 <_printf_i+0xb0>
 80034b0:	222d      	movs	r2, #45	; 0x2d
 80034b2:	425b      	negs	r3, r3
 80034b4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034b8:	4962      	ldr	r1, [pc, #392]	; (8003644 <_printf_i+0x23c>)
 80034ba:	220a      	movs	r2, #10
 80034bc:	e017      	b.n	80034ee <_printf_i+0xe6>
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80034c6:	d003      	beq.n	80034d0 <_printf_i+0xc8>
 80034c8:	1d08      	adds	r0, r1, #4
 80034ca:	6018      	str	r0, [r3, #0]
 80034cc:	680b      	ldr	r3, [r1, #0]
 80034ce:	e006      	b.n	80034de <_printf_i+0xd6>
 80034d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034d4:	f101 0004 	add.w	r0, r1, #4
 80034d8:	6018      	str	r0, [r3, #0]
 80034da:	d0f7      	beq.n	80034cc <_printf_i+0xc4>
 80034dc:	880b      	ldrh	r3, [r1, #0]
 80034de:	4959      	ldr	r1, [pc, #356]	; (8003644 <_printf_i+0x23c>)
 80034e0:	2a6f      	cmp	r2, #111	; 0x6f
 80034e2:	bf14      	ite	ne
 80034e4:	220a      	movne	r2, #10
 80034e6:	2208      	moveq	r2, #8
 80034e8:	2000      	movs	r0, #0
 80034ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80034ee:	6865      	ldr	r5, [r4, #4]
 80034f0:	60a5      	str	r5, [r4, #8]
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	f2c0 809c 	blt.w	8003630 <_printf_i+0x228>
 80034f8:	6820      	ldr	r0, [r4, #0]
 80034fa:	f020 0004 	bic.w	r0, r0, #4
 80034fe:	6020      	str	r0, [r4, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d13f      	bne.n	8003584 <_printf_i+0x17c>
 8003504:	2d00      	cmp	r5, #0
 8003506:	f040 8095 	bne.w	8003634 <_printf_i+0x22c>
 800350a:	4675      	mov	r5, lr
 800350c:	2a08      	cmp	r2, #8
 800350e:	d10b      	bne.n	8003528 <_printf_i+0x120>
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	07da      	lsls	r2, r3, #31
 8003514:	d508      	bpl.n	8003528 <_printf_i+0x120>
 8003516:	6923      	ldr	r3, [r4, #16]
 8003518:	6862      	ldr	r2, [r4, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	bfde      	ittt	le
 800351e:	2330      	movle	r3, #48	; 0x30
 8003520:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003524:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003528:	ebae 0305 	sub.w	r3, lr, r5
 800352c:	6123      	str	r3, [r4, #16]
 800352e:	f8cd 8000 	str.w	r8, [sp]
 8003532:	463b      	mov	r3, r7
 8003534:	aa03      	add	r2, sp, #12
 8003536:	4621      	mov	r1, r4
 8003538:	4630      	mov	r0, r6
 800353a:	f7ff feef 	bl	800331c <_printf_common>
 800353e:	3001      	adds	r0, #1
 8003540:	d155      	bne.n	80035ee <_printf_i+0x1e6>
 8003542:	f04f 30ff 	mov.w	r0, #4294967295
 8003546:	b005      	add	sp, #20
 8003548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800354c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003550:	493c      	ldr	r1, [pc, #240]	; (8003644 <_printf_i+0x23c>)
 8003552:	6822      	ldr	r2, [r4, #0]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f012 0f80 	tst.w	r2, #128	; 0x80
 800355a:	f100 0504 	add.w	r5, r0, #4
 800355e:	601d      	str	r5, [r3, #0]
 8003560:	d001      	beq.n	8003566 <_printf_i+0x15e>
 8003562:	6803      	ldr	r3, [r0, #0]
 8003564:	e002      	b.n	800356c <_printf_i+0x164>
 8003566:	0655      	lsls	r5, r2, #25
 8003568:	d5fb      	bpl.n	8003562 <_printf_i+0x15a>
 800356a:	8803      	ldrh	r3, [r0, #0]
 800356c:	07d0      	lsls	r0, r2, #31
 800356e:	bf44      	itt	mi
 8003570:	f042 0220 	orrmi.w	r2, r2, #32
 8003574:	6022      	strmi	r2, [r4, #0]
 8003576:	b91b      	cbnz	r3, 8003580 <_printf_i+0x178>
 8003578:	6822      	ldr	r2, [r4, #0]
 800357a:	f022 0220 	bic.w	r2, r2, #32
 800357e:	6022      	str	r2, [r4, #0]
 8003580:	2210      	movs	r2, #16
 8003582:	e7b1      	b.n	80034e8 <_printf_i+0xe0>
 8003584:	4675      	mov	r5, lr
 8003586:	fbb3 f0f2 	udiv	r0, r3, r2
 800358a:	fb02 3310 	mls	r3, r2, r0, r3
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003594:	4603      	mov	r3, r0
 8003596:	2800      	cmp	r0, #0
 8003598:	d1f5      	bne.n	8003586 <_printf_i+0x17e>
 800359a:	e7b7      	b.n	800350c <_printf_i+0x104>
 800359c:	6808      	ldr	r0, [r1, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	6949      	ldr	r1, [r1, #20]
 80035a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80035a6:	d004      	beq.n	80035b2 <_printf_i+0x1aa>
 80035a8:	1d10      	adds	r0, r2, #4
 80035aa:	6018      	str	r0, [r3, #0]
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	6019      	str	r1, [r3, #0]
 80035b0:	e007      	b.n	80035c2 <_printf_i+0x1ba>
 80035b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035b6:	f102 0004 	add.w	r0, r2, #4
 80035ba:	6018      	str	r0, [r3, #0]
 80035bc:	6813      	ldr	r3, [r2, #0]
 80035be:	d0f6      	beq.n	80035ae <_printf_i+0x1a6>
 80035c0:	8019      	strh	r1, [r3, #0]
 80035c2:	2300      	movs	r3, #0
 80035c4:	6123      	str	r3, [r4, #16]
 80035c6:	4675      	mov	r5, lr
 80035c8:	e7b1      	b.n	800352e <_printf_i+0x126>
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	1d11      	adds	r1, r2, #4
 80035ce:	6019      	str	r1, [r3, #0]
 80035d0:	6815      	ldr	r5, [r2, #0]
 80035d2:	6862      	ldr	r2, [r4, #4]
 80035d4:	2100      	movs	r1, #0
 80035d6:	4628      	mov	r0, r5
 80035d8:	f7fc fe32 	bl	8000240 <memchr>
 80035dc:	b108      	cbz	r0, 80035e2 <_printf_i+0x1da>
 80035de:	1b40      	subs	r0, r0, r5
 80035e0:	6060      	str	r0, [r4, #4]
 80035e2:	6863      	ldr	r3, [r4, #4]
 80035e4:	6123      	str	r3, [r4, #16]
 80035e6:	2300      	movs	r3, #0
 80035e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ec:	e79f      	b.n	800352e <_printf_i+0x126>
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	462a      	mov	r2, r5
 80035f2:	4639      	mov	r1, r7
 80035f4:	4630      	mov	r0, r6
 80035f6:	47c0      	blx	r8
 80035f8:	3001      	adds	r0, #1
 80035fa:	d0a2      	beq.n	8003542 <_printf_i+0x13a>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	079b      	lsls	r3, r3, #30
 8003600:	d507      	bpl.n	8003612 <_printf_i+0x20a>
 8003602:	2500      	movs	r5, #0
 8003604:	f104 0919 	add.w	r9, r4, #25
 8003608:	68e3      	ldr	r3, [r4, #12]
 800360a:	9a03      	ldr	r2, [sp, #12]
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	429d      	cmp	r5, r3
 8003610:	db05      	blt.n	800361e <_printf_i+0x216>
 8003612:	68e0      	ldr	r0, [r4, #12]
 8003614:	9b03      	ldr	r3, [sp, #12]
 8003616:	4298      	cmp	r0, r3
 8003618:	bfb8      	it	lt
 800361a:	4618      	movlt	r0, r3
 800361c:	e793      	b.n	8003546 <_printf_i+0x13e>
 800361e:	2301      	movs	r3, #1
 8003620:	464a      	mov	r2, r9
 8003622:	4639      	mov	r1, r7
 8003624:	4630      	mov	r0, r6
 8003626:	47c0      	blx	r8
 8003628:	3001      	adds	r0, #1
 800362a:	d08a      	beq.n	8003542 <_printf_i+0x13a>
 800362c:	3501      	adds	r5, #1
 800362e:	e7eb      	b.n	8003608 <_printf_i+0x200>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1a7      	bne.n	8003584 <_printf_i+0x17c>
 8003634:	780b      	ldrb	r3, [r1, #0]
 8003636:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800363a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800363e:	e765      	b.n	800350c <_printf_i+0x104>
 8003640:	08003bd6 	.word	0x08003bd6
 8003644:	08003bc5 	.word	0x08003bc5

08003648 <__sread>:
 8003648:	b510      	push	{r4, lr}
 800364a:	460c      	mov	r4, r1
 800364c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003650:	f000 f954 	bl	80038fc <_read_r>
 8003654:	2800      	cmp	r0, #0
 8003656:	bfab      	itete	ge
 8003658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800365a:	89a3      	ldrhlt	r3, [r4, #12]
 800365c:	181b      	addge	r3, r3, r0
 800365e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003662:	bfac      	ite	ge
 8003664:	6563      	strge	r3, [r4, #84]	; 0x54
 8003666:	81a3      	strhlt	r3, [r4, #12]
 8003668:	bd10      	pop	{r4, pc}

0800366a <__swrite>:
 800366a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366e:	461f      	mov	r7, r3
 8003670:	898b      	ldrh	r3, [r1, #12]
 8003672:	05db      	lsls	r3, r3, #23
 8003674:	4605      	mov	r5, r0
 8003676:	460c      	mov	r4, r1
 8003678:	4616      	mov	r6, r2
 800367a:	d505      	bpl.n	8003688 <__swrite+0x1e>
 800367c:	2302      	movs	r3, #2
 800367e:	2200      	movs	r2, #0
 8003680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003684:	f000 f928 	bl	80038d8 <_lseek_r>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800368e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	4632      	mov	r2, r6
 8003696:	463b      	mov	r3, r7
 8003698:	4628      	mov	r0, r5
 800369a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800369e:	f000 b869 	b.w	8003774 <_write_r>

080036a2 <__sseek>:
 80036a2:	b510      	push	{r4, lr}
 80036a4:	460c      	mov	r4, r1
 80036a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036aa:	f000 f915 	bl	80038d8 <_lseek_r>
 80036ae:	1c43      	adds	r3, r0, #1
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	bf15      	itete	ne
 80036b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80036b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036be:	81a3      	strheq	r3, [r4, #12]
 80036c0:	bf18      	it	ne
 80036c2:	81a3      	strhne	r3, [r4, #12]
 80036c4:	bd10      	pop	{r4, pc}

080036c6 <__sclose>:
 80036c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ca:	f000 b8d3 	b.w	8003874 <_close_r>
	...

080036d0 <__swbuf_r>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	460e      	mov	r6, r1
 80036d4:	4614      	mov	r4, r2
 80036d6:	4605      	mov	r5, r0
 80036d8:	b118      	cbz	r0, 80036e2 <__swbuf_r+0x12>
 80036da:	6983      	ldr	r3, [r0, #24]
 80036dc:	b90b      	cbnz	r3, 80036e2 <__swbuf_r+0x12>
 80036de:	f7ff fbe5 	bl	8002eac <__sinit>
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <__swbuf_r+0x98>)
 80036e4:	429c      	cmp	r4, r3
 80036e6:	d12a      	bne.n	800373e <__swbuf_r+0x6e>
 80036e8:	686c      	ldr	r4, [r5, #4]
 80036ea:	69a3      	ldr	r3, [r4, #24]
 80036ec:	60a3      	str	r3, [r4, #8]
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	071a      	lsls	r2, r3, #28
 80036f2:	d52e      	bpl.n	8003752 <__swbuf_r+0x82>
 80036f4:	6923      	ldr	r3, [r4, #16]
 80036f6:	b363      	cbz	r3, 8003752 <__swbuf_r+0x82>
 80036f8:	6923      	ldr	r3, [r4, #16]
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	1ac0      	subs	r0, r0, r3
 80036fe:	6963      	ldr	r3, [r4, #20]
 8003700:	b2f6      	uxtb	r6, r6
 8003702:	4298      	cmp	r0, r3
 8003704:	4637      	mov	r7, r6
 8003706:	db04      	blt.n	8003712 <__swbuf_r+0x42>
 8003708:	4621      	mov	r1, r4
 800370a:	4628      	mov	r0, r5
 800370c:	f7ff fb64 	bl	8002dd8 <_fflush_r>
 8003710:	bb28      	cbnz	r0, 800375e <__swbuf_r+0x8e>
 8003712:	68a3      	ldr	r3, [r4, #8]
 8003714:	3b01      	subs	r3, #1
 8003716:	60a3      	str	r3, [r4, #8]
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	6022      	str	r2, [r4, #0]
 800371e:	701e      	strb	r6, [r3, #0]
 8003720:	6963      	ldr	r3, [r4, #20]
 8003722:	3001      	adds	r0, #1
 8003724:	4298      	cmp	r0, r3
 8003726:	d004      	beq.n	8003732 <__swbuf_r+0x62>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	07db      	lsls	r3, r3, #31
 800372c:	d519      	bpl.n	8003762 <__swbuf_r+0x92>
 800372e:	2e0a      	cmp	r6, #10
 8003730:	d117      	bne.n	8003762 <__swbuf_r+0x92>
 8003732:	4621      	mov	r1, r4
 8003734:	4628      	mov	r0, r5
 8003736:	f7ff fb4f 	bl	8002dd8 <_fflush_r>
 800373a:	b190      	cbz	r0, 8003762 <__swbuf_r+0x92>
 800373c:	e00f      	b.n	800375e <__swbuf_r+0x8e>
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <__swbuf_r+0x9c>)
 8003740:	429c      	cmp	r4, r3
 8003742:	d101      	bne.n	8003748 <__swbuf_r+0x78>
 8003744:	68ac      	ldr	r4, [r5, #8]
 8003746:	e7d0      	b.n	80036ea <__swbuf_r+0x1a>
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <__swbuf_r+0xa0>)
 800374a:	429c      	cmp	r4, r3
 800374c:	bf08      	it	eq
 800374e:	68ec      	ldreq	r4, [r5, #12]
 8003750:	e7cb      	b.n	80036ea <__swbuf_r+0x1a>
 8003752:	4621      	mov	r1, r4
 8003754:	4628      	mov	r0, r5
 8003756:	f000 f81f 	bl	8003798 <__swsetup_r>
 800375a:	2800      	cmp	r0, #0
 800375c:	d0cc      	beq.n	80036f8 <__swbuf_r+0x28>
 800375e:	f04f 37ff 	mov.w	r7, #4294967295
 8003762:	4638      	mov	r0, r7
 8003764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003766:	bf00      	nop
 8003768:	08003b74 	.word	0x08003b74
 800376c:	08003b94 	.word	0x08003b94
 8003770:	08003b54 	.word	0x08003b54

08003774 <_write_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4c07      	ldr	r4, [pc, #28]	; (8003794 <_write_r+0x20>)
 8003778:	4605      	mov	r5, r0
 800377a:	4608      	mov	r0, r1
 800377c:	4611      	mov	r1, r2
 800377e:	2200      	movs	r2, #0
 8003780:	6022      	str	r2, [r4, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f7fe fe68 	bl	8002458 <_write>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_write_r+0x1e>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	b103      	cbz	r3, 8003792 <_write_r+0x1e>
 8003790:	602b      	str	r3, [r5, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	2000019c 	.word	0x2000019c

08003798 <__swsetup_r>:
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <__swsetup_r+0xcc>)
 800379a:	b570      	push	{r4, r5, r6, lr}
 800379c:	681d      	ldr	r5, [r3, #0]
 800379e:	4606      	mov	r6, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	b125      	cbz	r5, 80037ae <__swsetup_r+0x16>
 80037a4:	69ab      	ldr	r3, [r5, #24]
 80037a6:	b913      	cbnz	r3, 80037ae <__swsetup_r+0x16>
 80037a8:	4628      	mov	r0, r5
 80037aa:	f7ff fb7f 	bl	8002eac <__sinit>
 80037ae:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <__swsetup_r+0xd0>)
 80037b0:	429c      	cmp	r4, r3
 80037b2:	d10f      	bne.n	80037d4 <__swsetup_r+0x3c>
 80037b4:	686c      	ldr	r4, [r5, #4]
 80037b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	0715      	lsls	r5, r2, #28
 80037be:	d42c      	bmi.n	800381a <__swsetup_r+0x82>
 80037c0:	06d0      	lsls	r0, r2, #27
 80037c2:	d411      	bmi.n	80037e8 <__swsetup_r+0x50>
 80037c4:	2209      	movs	r2, #9
 80037c6:	6032      	str	r2, [r6, #0]
 80037c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	f04f 30ff 	mov.w	r0, #4294967295
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <__swsetup_r+0xd4>)
 80037d6:	429c      	cmp	r4, r3
 80037d8:	d101      	bne.n	80037de <__swsetup_r+0x46>
 80037da:	68ac      	ldr	r4, [r5, #8]
 80037dc:	e7eb      	b.n	80037b6 <__swsetup_r+0x1e>
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <__swsetup_r+0xd8>)
 80037e0:	429c      	cmp	r4, r3
 80037e2:	bf08      	it	eq
 80037e4:	68ec      	ldreq	r4, [r5, #12]
 80037e6:	e7e6      	b.n	80037b6 <__swsetup_r+0x1e>
 80037e8:	0751      	lsls	r1, r2, #29
 80037ea:	d512      	bpl.n	8003812 <__swsetup_r+0x7a>
 80037ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037ee:	b141      	cbz	r1, 8003802 <__swsetup_r+0x6a>
 80037f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037f4:	4299      	cmp	r1, r3
 80037f6:	d002      	beq.n	80037fe <__swsetup_r+0x66>
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7ff f8db 	bl	80029b4 <_free_r>
 80037fe:	2300      	movs	r3, #0
 8003800:	6363      	str	r3, [r4, #52]	; 0x34
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003808:	81a3      	strh	r3, [r4, #12]
 800380a:	2300      	movs	r3, #0
 800380c:	6063      	str	r3, [r4, #4]
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	6923      	ldr	r3, [r4, #16]
 800381c:	b94b      	cbnz	r3, 8003832 <__swsetup_r+0x9a>
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d003      	beq.n	8003832 <__swsetup_r+0x9a>
 800382a:	4621      	mov	r1, r4
 800382c:	4630      	mov	r0, r6
 800382e:	f7ff fbeb 	bl	8003008 <__smakebuf_r>
 8003832:	89a2      	ldrh	r2, [r4, #12]
 8003834:	f012 0301 	ands.w	r3, r2, #1
 8003838:	d00c      	beq.n	8003854 <__swsetup_r+0xbc>
 800383a:	2300      	movs	r3, #0
 800383c:	60a3      	str	r3, [r4, #8]
 800383e:	6963      	ldr	r3, [r4, #20]
 8003840:	425b      	negs	r3, r3
 8003842:	61a3      	str	r3, [r4, #24]
 8003844:	6923      	ldr	r3, [r4, #16]
 8003846:	b953      	cbnz	r3, 800385e <__swsetup_r+0xc6>
 8003848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800384c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003850:	d1ba      	bne.n	80037c8 <__swsetup_r+0x30>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	0792      	lsls	r2, r2, #30
 8003856:	bf58      	it	pl
 8003858:	6963      	ldrpl	r3, [r4, #20]
 800385a:	60a3      	str	r3, [r4, #8]
 800385c:	e7f2      	b.n	8003844 <__swsetup_r+0xac>
 800385e:	2000      	movs	r0, #0
 8003860:	e7f7      	b.n	8003852 <__swsetup_r+0xba>
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c
 8003868:	08003b74 	.word	0x08003b74
 800386c:	08003b94 	.word	0x08003b94
 8003870:	08003b54 	.word	0x08003b54

08003874 <_close_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4c06      	ldr	r4, [pc, #24]	; (8003890 <_close_r+0x1c>)
 8003878:	2300      	movs	r3, #0
 800387a:	4605      	mov	r5, r0
 800387c:	4608      	mov	r0, r1
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	f000 f84e 	bl	8003920 <_close>
 8003884:	1c43      	adds	r3, r0, #1
 8003886:	d102      	bne.n	800388e <_close_r+0x1a>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	b103      	cbz	r3, 800388e <_close_r+0x1a>
 800388c:	602b      	str	r3, [r5, #0]
 800388e:	bd38      	pop	{r3, r4, r5, pc}
 8003890:	2000019c 	.word	0x2000019c

08003894 <_fstat_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	4c07      	ldr	r4, [pc, #28]	; (80038b4 <_fstat_r+0x20>)
 8003898:	2300      	movs	r3, #0
 800389a:	4605      	mov	r5, r0
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	f000 f845 	bl	8003930 <_fstat>
 80038a6:	1c43      	adds	r3, r0, #1
 80038a8:	d102      	bne.n	80038b0 <_fstat_r+0x1c>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	b103      	cbz	r3, 80038b0 <_fstat_r+0x1c>
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	bd38      	pop	{r3, r4, r5, pc}
 80038b2:	bf00      	nop
 80038b4:	2000019c 	.word	0x2000019c

080038b8 <_isatty_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4c06      	ldr	r4, [pc, #24]	; (80038d4 <_isatty_r+0x1c>)
 80038bc:	2300      	movs	r3, #0
 80038be:	4605      	mov	r5, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	f000 f83c 	bl	8003940 <_isatty>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d102      	bne.n	80038d2 <_isatty_r+0x1a>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <_isatty_r+0x1a>
 80038d0:	602b      	str	r3, [r5, #0]
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	2000019c 	.word	0x2000019c

080038d8 <_lseek_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4c07      	ldr	r4, [pc, #28]	; (80038f8 <_lseek_r+0x20>)
 80038dc:	4605      	mov	r5, r0
 80038de:	4608      	mov	r0, r1
 80038e0:	4611      	mov	r1, r2
 80038e2:	2200      	movs	r2, #0
 80038e4:	6022      	str	r2, [r4, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f000 f832 	bl	8003950 <_lseek>
 80038ec:	1c43      	adds	r3, r0, #1
 80038ee:	d102      	bne.n	80038f6 <_lseek_r+0x1e>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	b103      	cbz	r3, 80038f6 <_lseek_r+0x1e>
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
 80038f8:	2000019c 	.word	0x2000019c

080038fc <_read_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4c07      	ldr	r4, [pc, #28]	; (800391c <_read_r+0x20>)
 8003900:	4605      	mov	r5, r0
 8003902:	4608      	mov	r0, r1
 8003904:	4611      	mov	r1, r2
 8003906:	2200      	movs	r2, #0
 8003908:	6022      	str	r2, [r4, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	f000 f828 	bl	8003960 <_read>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d102      	bne.n	800391a <_read_r+0x1e>
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	b103      	cbz	r3, 800391a <_read_r+0x1e>
 8003918:	602b      	str	r3, [r5, #0]
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	2000019c 	.word	0x2000019c

08003920 <_close>:
 8003920:	4b02      	ldr	r3, [pc, #8]	; (800392c <_close+0xc>)
 8003922:	2258      	movs	r2, #88	; 0x58
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f04f 30ff 	mov.w	r0, #4294967295
 800392a:	4770      	bx	lr
 800392c:	2000019c 	.word	0x2000019c

08003930 <_fstat>:
 8003930:	4b02      	ldr	r3, [pc, #8]	; (800393c <_fstat+0xc>)
 8003932:	2258      	movs	r2, #88	; 0x58
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f04f 30ff 	mov.w	r0, #4294967295
 800393a:	4770      	bx	lr
 800393c:	2000019c 	.word	0x2000019c

08003940 <_isatty>:
 8003940:	4b02      	ldr	r3, [pc, #8]	; (800394c <_isatty+0xc>)
 8003942:	2258      	movs	r2, #88	; 0x58
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	2000      	movs	r0, #0
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	2000019c 	.word	0x2000019c

08003950 <_lseek>:
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <_lseek+0xc>)
 8003952:	2258      	movs	r2, #88	; 0x58
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f04f 30ff 	mov.w	r0, #4294967295
 800395a:	4770      	bx	lr
 800395c:	2000019c 	.word	0x2000019c

08003960 <_read>:
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <_read+0xc>)
 8003962:	2258      	movs	r2, #88	; 0x58
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f04f 30ff 	mov.w	r0, #4294967295
 800396a:	4770      	bx	lr
 800396c:	2000019c 	.word	0x2000019c

08003970 <_sbrk>:
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <_sbrk+0x14>)
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	4602      	mov	r2, r0
 8003976:	b909      	cbnz	r1, 800397c <_sbrk+0xc>
 8003978:	4903      	ldr	r1, [pc, #12]	; (8003988 <_sbrk+0x18>)
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	4402      	add	r2, r0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	4770      	bx	lr
 8003984:	20000094 	.word	0x20000094
 8003988:	200001a0 	.word	0x200001a0

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
